(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    622810,      13478]
NotebookOptionsPosition[    618853,      13352]
NotebookOutlinePosition[    619196,      13367]
CellTagsIndexPosition[    619153,      13364]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"ChromaticPolynomial", "[", 
  RowBox[{
   RowBox[{"CycleGraph", "[", "3", "]"}], ",", "k"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"ChromaticPolynomial", "[", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2, 3}, {Null, 
         SparseArray[
         Automatic, {3, 3}, 0, {
          1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}]}, {
        GraphLayout -> "CircularEmbedding"}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         LineBox[{{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}, {
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}, {
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[
          
          DiskBox[{-0.8660254037844384, -0.49999999999999933`}, 
           0.020399597244776385`], "DynamicName", BoxID -> "VertexID$1"], 
         TagBox[
          
          DiskBox[{0.8660254037844389, -0.5000000000000012}, 
           0.020399597244776385`], "DynamicName", BoxID -> "VertexID$2"], 
         TagBox[
          DiskBox[{1.8369701987210297`*^-16, 1.}, 0.020399597244776385`], 
          "DynamicName", BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{0.7800000000000016, 88.22}, {-41.291199999999996`, 
         34.96543932331297}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", "k"}], "]"}]], "Output",
 CellChangeTimes->{3.646580410431444*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ContainsVertex", "[", 
   RowBox[{"graph_", ",", "vertex_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"Select", "[", 
     RowBox[{"graph", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "\[Equal]", "vertex"}], " ", "||", " ", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "vertex"}], " ", "||", 
        " ", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "vertex"}]}], "&"}]}], 
     "]"}], "]"}], ">", "0"}]}]], "Input",
 CellChangeTimes->{{3.6464167516056643`*^9, 3.6464167971502695`*^9}, {
  3.646416839060666*^9, 3.646416869649416*^9}, {3.646416911593815*^9, 
  3.6464169322749977`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Z", "[", "graph_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Z", "[", "graph", "]"}], "=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{"i", ",", 
       RowBox[{"l", " ", "=", 
        RowBox[{"Length", "[", "graph", "]"}]}], ",", " ", "start", ",", " ", 
       "end", ",", " ", "meltVertices", ",", " ", "dropEdge"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"l", "\[Equal]", "0"}], ",", 
        RowBox[{"Return", "[", "0", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Rule1", ":", " ", 
        RowBox[{"Simple", " ", "graph"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"l", "==", "1"}], "&&", 
         RowBox[{"IntegerQ", "[", 
          RowBox[{"graph", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "q", "]"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Rule2", " ", ":", " ", 
        RowBox[{
        "search", " ", "for", " ", "an", " ", "integer", " ", "in", " ", 
         "the", " ", "graph"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "\[Equal]", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", "l"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"IntegerQ", "[", 
           RowBox[{"graph", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", " ", 
           RowBox[{"q", " ", "*", " ", 
            RowBox[{"Z", "[", 
             RowBox[{"Drop", "[", 
              RowBox[{"graph", ",", 
               RowBox[{"{", "i", "}"}]}], "]"}], "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Rule", " ", "3"}], " ", ":", " ", 
        RowBox[{"drop", " ", "an", " ", "edge"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"start", " ", "=", " ", 
       RowBox[{
        RowBox[{"graph", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"end", " ", "=", " ", 
       RowBox[{
        RowBox[{"graph", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"PrintTemporary", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<drop \>\"", ",", " ", "start", ",", "end"}], "}"}], " ", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"dropEdge", "=", 
       RowBox[{"Drop", "[", 
        RowBox[{"graph", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ContainsVertex", "[", 
          RowBox[{"dropEdge", ",", "start"}], "]"}]}], ",", " ", 
        RowBox[{"dropEdge", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "start", "}"}], ",", "dropEdge"}], "]"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ContainsVertex", "[", 
          RowBox[{"dropEdge", ",", "end"}], "]"}]}], ",", " ", 
        RowBox[{"dropEdge", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "end", "}"}], ",", "dropEdge"}], "]"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"meltVertices", "=", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{"graph", ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], ",", 
         RowBox[{"start", "\[Rule]", "end"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"PrintTemporary", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<meltVertices1\>\"", ",", "meltVertices"}], "}"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ContainsVertex", "[", 
          RowBox[{"meltVertices", ",", "end"}], "]"}]}], ",", " ", 
        RowBox[{"meltVertices", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "end", "}"}], ",", "meltVertices"}], "]"}]}]}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"meltVertices", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
           "meltVertices"}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"Graph", "[", 
           RowBox[{"dropEdge", ",", 
            RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}], "+", 
          RowBox[{"v", "*", 
           RowBox[{"Graph", "[", 
            RowBox[{"meltVertices", ",", 
             RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]}],
          "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"PrintTemporary", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<dropEdge\>\"", ",", "dropEdge"}], "}"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"PrintTemporary", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<meltVertices\>\"", ",", "meltVertices"}], "}"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{
        RowBox[{"Z", "[", "dropEdge", "]"}], "+", 
        RowBox[{"v", "*", 
         RowBox[{"Z", "[", "meltVertices", "]"}]}]}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6464145514858246`*^9, 3.6464150416458597`*^9}, {
   3.646415089183579*^9, 3.646415203137097*^9}, {3.6464152376650715`*^9, 
   3.646415369669622*^9}, {3.6464154074437823`*^9, 3.6464155277476635`*^9}, {
   3.6464155649907937`*^9, 3.6464155654118176`*^9}, {3.6464156341847515`*^9, 
   3.6464157618500533`*^9}, 3.646415826722764*^9, {3.646415876946636*^9, 
   3.646415919275058*^9}, {3.646415975166254*^9, 3.6464160616852026`*^9}, {
   3.646416110401989*^9, 3.6464161438889046`*^9}, {3.646416174319645*^9, 
   3.646416301461917*^9}, {3.6464163530448675`*^9, 3.646416367720707*^9}, 
   3.646416454644679*^9, {3.64641650676266*^9, 3.646416534243232*^9}, {
   3.646416603088169*^9, 3.646416616950962*^9}, {3.6464167196878386`*^9, 
   3.646416748005458*^9}, {3.646417049014675*^9, 3.6464171022397194`*^9}, {
   3.6464171565638266`*^9, 3.646417219191408*^9}, {3.6464172892134137`*^9, 
   3.646417300110037*^9}, {3.64641735996346*^9, 3.6464173645277214`*^9}, {
   3.6464174285203815`*^9, 3.646417443964265*^9}, {3.6464175486502523`*^9, 
   3.6464175569047246`*^9}, {3.646417663073797*^9, 3.646417696940734*^9}, {
   3.646417731383704*^9, 3.646417811278274*^9}, {3.6464178522206154`*^9, 
   3.646417855761818*^9}, {3.6464179062427053`*^9, 3.646417920240506*^9}, {
   3.6464181903659563`*^9, 3.646418193371128*^9}, {3.6464182259289904`*^9, 
   3.646418275016798*^9}, {3.6464183406905546`*^9, 3.6464183442527585`*^9}, {
   3.6464183787857337`*^9, 3.6464183863001633`*^9}, {3.6464184627965384`*^9, 
   3.6464184806275587`*^9}, 3.646418563614305*^9, {3.646419065570015*^9, 
   3.646419077075673*^9}, {3.6464196098481464`*^9, 3.646419619988726*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Z2", "[", "graph_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Z2", "[", "graph", "]"}], "=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{"i", ",", 
       RowBox[{"l", " ", "=", 
        RowBox[{"Length", "[", "graph", "]"}]}], ",", " ", "start", ",", " ", 
       "end", ",", " ", "meltVertices", ",", " ", "dropEdge"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"l", "\[Equal]", "0"}], ",", 
        RowBox[{"Return", "[", "0", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Rule1", ":", " ", 
        RowBox[{"Simple", " ", "graph"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"l", "==", "1"}], "&&", 
         RowBox[{"IntegerQ", "[", 
          RowBox[{"graph", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "4", "]"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Rule2", " ", ":", " ", 
        RowBox[{
        "search", " ", "for", " ", "an", " ", "integer", " ", "in", " ", 
         "the", " ", "graph"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "\[Equal]", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", "l"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"IntegerQ", "[", 
           RowBox[{"graph", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", " ", 
           RowBox[{"4", " ", "*", " ", 
            RowBox[{"Z2", "[", 
             RowBox[{"Drop", "[", 
              RowBox[{"graph", ",", 
               RowBox[{"{", "i", "}"}]}], "]"}], "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"Rule", " ", "3"}], " ", ":", " ", 
        RowBox[{"drop", " ", "an", " ", "edge"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"start", " ", "=", " ", 
       RowBox[{
        RowBox[{"graph", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"end", " ", "=", " ", 
       RowBox[{
        RowBox[{"graph", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"PrintTemporary", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<drop \>\"", ",", " ", "start", ",", "end"}], "}"}], " ", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"dropEdge", "=", 
       RowBox[{"Drop", "[", 
        RowBox[{"graph", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ContainsVertex", "[", 
          RowBox[{"dropEdge", ",", "start"}], "]"}]}], ",", " ", 
        RowBox[{"dropEdge", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "start", "}"}], ",", "dropEdge"}], "]"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ContainsVertex", "[", 
          RowBox[{"dropEdge", ",", "end"}], "]"}]}], ",", " ", 
        RowBox[{"dropEdge", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "end", "}"}], ",", "dropEdge"}], "]"}]}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"meltVertices", "=", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{"graph", ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], ",", 
         RowBox[{"start", "\[Rule]", "end"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"PrintTemporary", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<meltVertices1\>\"", ",", "meltVertices"}], "}"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ContainsVertex", "[", 
          RowBox[{"meltVertices", ",", "end"}], "]"}]}], ",", " ", 
        RowBox[{"meltVertices", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "end", "}"}], ",", "meltVertices"}], "]"}]}]}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"meltVertices", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
           "meltVertices"}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"Graph", "[", 
           RowBox[{"dropEdge", ",", 
            RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}], "+", 
          RowBox[{"v", "*", 
           RowBox[{"Graph", "[", 
            RowBox[{"meltVertices", ",", 
             RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]}],
          "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"PrintTemporary", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<dropEdge\>\"", ",", "dropEdge"}], "}"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"PrintTemporary", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<meltVertices\>\"", ",", "meltVertices"}], "}"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{
        RowBox[{"Z2", "[", "dropEdge", "]"}], "-", 
        RowBox[{"Z2", "[", "meltVertices", "]"}]}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.646419547111558*^9, 3.6464195776343036`*^9}, {
  3.6464196471982822`*^9, 3.646419651487528*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Explain", "[", "graph_", "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", 
     RowBox[{"i", ",", 
      RowBox[{"l", " ", "=", 
       RowBox[{"Length", "[", "graph", "]"}]}], ",", " ", "start", ",", " ", 
      "end", ",", " ", "meltVertices", ",", " ", "dropEdge", ",", " ", "sub", 
      ",", " ", "sub2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"l", "\[Equal]", "0"}], ",", 
       RowBox[{"Return", "[", "0", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Rule1", ":", " ", 
       RowBox[{"Simple", " ", "graph"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"l", "==", "1"}], "&&", 
        RowBox[{"IntegerQ", "[", 
         RowBox[{"graph", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"graph", "\[Rule]", 
          RowBox[{"{", "q", "}"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Rule2", " ", ":", " ", 
       RowBox[{
       "search", " ", "for", " ", "an", " ", "integer", " ", "in", " ", "the",
         " ", "graph"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "\[Equal]", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", "l"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"IntegerQ", "[", 
          RowBox[{"graph", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sub", "=", 
           RowBox[{"Explain", "[", 
            RowBox[{"Drop", "[", 
             RowBox[{"graph", ",", 
              RowBox[{"{", "i", "}"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", " ", 
           RowBox[{"Join", "[", 
            RowBox[{"sub", ",", 
             RowBox[{"{", 
              RowBox[{"graph", "->", 
               RowBox[{"First", "[", 
                RowBox[{"Last", "[", "sub", "]"}], "]"}]}], "}"}]}], "]"}], 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Rule", " ", "3"}], " ", ":", " ", 
       RowBox[{"drop", " ", "an", " ", "edge"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"start", " ", "=", " ", 
      RowBox[{
       RowBox[{"graph", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"end", " ", "=", " ", 
      RowBox[{
       RowBox[{"graph", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"PrintTemporary", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<drop \>\"", ",", " ", "start", ",", "end"}], "}"}], " ", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"dropEdge", "=", 
      RowBox[{"Drop", "[", 
       RowBox[{"graph", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"ContainsVertex", "[", 
         RowBox[{"dropEdge", ",", "start"}], "]"}]}], ",", " ", 
       RowBox[{"dropEdge", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "start", "}"}], ",", "dropEdge"}], "]"}]}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"ContainsVertex", "[", 
         RowBox[{"dropEdge", ",", "end"}], "]"}]}], ",", " ", 
       RowBox[{"dropEdge", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "end", "}"}], ",", "dropEdge"}], "]"}]}]}], "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"meltVertices", "=", 
      RowBox[{"ReplaceAll", "[", 
       RowBox[{
        RowBox[{"Drop", "[", 
         RowBox[{"graph", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", 
        RowBox[{"start", "\[Rule]", "end"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"PrintTemporary", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<meltVertices1\>\"", ",", "meltVertices"}], "}"}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"ContainsVertex", "[", 
         RowBox[{"meltVertices", ",", "end"}], "]"}]}], ",", " ", 
       RowBox[{"meltVertices", "=", " ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "end", "}"}], ",", "meltVertices"}], "]"}]}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"meltVertices", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "#"}], "]"}], "&"}], ",", 
          "meltVertices"}], "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"sub", " ", "=", 
      RowBox[{"Explain", "[", "dropEdge", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sub2", "=", " ", 
      RowBox[{"Explain", "[", "meltVertices", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"MyGraph", "[", "graph", "]"}], " ", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<drop \>\"", ",", " ", "start", ",", "end"}], "}"}], ",", 
        RowBox[{
         RowBox[{"First", "[", 
          RowBox[{"Last", "[", "sub", "]"}], "]"}], "+", 
         RowBox[{"v", "*", 
          RowBox[{"First", "[", 
           RowBox[{"Last", "[", "sub2", "]"}], "]"}]}]}]}], "}"}], "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Join", "[", 
       RowBox[{"sub", ",", "sub2", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"graph", "\[Rule]", 
           RowBox[{"First", "[", 
            RowBox[{"Last", "[", "sub", "]"}], "]"}]}], ",", 
          RowBox[{"graph", "\[Rule]", 
           RowBox[{"First", "[", 
            RowBox[{"Last", "[", "sub", "]"}], "]"}]}]}], "}"}]}], "]"}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6464202855177927`*^9, 3.646420396227124*^9}, {
  3.6464204663041325`*^9, 3.646420537697216*^9}, {3.64642102380702*^9, 
  3.6464210544647737`*^9}, {3.6464211222796526`*^9, 3.6464211380585546`*^9}, {
  3.646421386518766*^9, 3.6464214786060333`*^9}, {3.6464215886583276`*^9, 
  3.646421662590556*^9}, {3.6464227248763156`*^9, 3.6464228628902097`*^9}, {
  3.6464229479410744`*^9, 3.646422952538337*^9}, {3.6464229893134403`*^9, 
  3.646422990437505*^9}, {3.6464230336159744`*^9, 3.64642315697303*^9}, {
  3.6464232239098587`*^9, 3.6464232483532567`*^9}, {3.646423434683914*^9, 
  3.646423437554078*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MyGraph", "[", "graph_", "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"l", " ", "=", 
       RowBox[{"Length", "[", "graph", "]"}]}], ",", " ", "newGraph"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"newGraph", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"ListQ", "[", "#", "]"}]}], " ", ",", 
           RowBox[{"#", "\[Rule]", "#"}], ",", "#"}], "]"}], "&"}], ",", 
        "graph"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graph", "[", 
      RowBox[{"newGraph", ",", 
       RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6464206973813496`*^9, 3.6464207633691235`*^9}, {
  3.6464208146040545`*^9, 3.646420861722749*^9}, {3.6464209423633614`*^9, 
  3.6464210032708454`*^9}, {3.6464211714114623`*^9, 3.6464211770067825`*^9}, {
  3.6464212526461086`*^9, 3.646421253472156*^9}, {3.6464233485369873`*^9, 
  3.6464233746064777`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MyGraph", "[", 
  RowBox[{"{", "q", "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6464233894803286`*^9, 3.6464233951426525`*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{$CellContext`q}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
    Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.055582995951417], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation[
          "VertexID$1", Automatic, 
           Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
          0.03764453921420462}, {-0.057471546601070275`, 
          0.049435954969179276`}, {-0.01769585109355211, 0.03815670647706046}, 
          DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
         7]]}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox["q", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{121.7606933090101, 
       243.35330217104558`}, {-68.2393066909899, 62.239306690989906`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  PlotRangePadding->0.1]], "Output",
 CellChangeTimes->{3.6464233959286976`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Explain", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "2"}], ",", 
    RowBox[{"2", "\[Rule]", "3"}], ",", 
    RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6464212718512073`*^9, 3.6464212796676545`*^9}, {
  3.646422876664997*^9, 3.6464228896807423`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{3 -> 1}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.055582995951417], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation[
            "VertexID$1", Automatic, 
             Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
            0.03764453921420462}, {-0.057471546601070275`, 
            0.049435954969179276`}, {-0.01769585109355211, 
            0.03815670647706046}, 
            DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
           7]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox[
             RowBox[{"3", "\[Rule]", "1"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{58.760693309010094`, 
         145.82617134710006`}, {-35.239306690989906`, 33.239306690989906`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None,
    PlotRangePadding->0.1], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", "v", "}"}], "+", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464212810147314`*^9, 3.646421488304588*^9, {3.646422866815434*^9, 
   3.646422890856809*^9}, 3.6464229563645563`*^9, 3.646422993308669*^9, 
   3.646423161779305*^9, {3.6464232309232597`*^9, 3.646423251921461*^9}, 
   3.646423445369526*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{3 -> 1}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.055582995951417], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation[
            "VertexID$1", Automatic, 
             Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
            0.03764453921420462}, {-0.057471546601070275`, 
            0.049435954969179276`}, {-0.01769585109355211, 
            0.03815670647706046}, 
            DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
           7]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox[
             RowBox[{"3", "\[Rule]", "1"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{58.760693309010094`, 
         145.82617134710006`}, {-35.239306690989906`, 33.239306690989906`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None,
    PlotRangePadding->0.1], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", "v", "}"}], "+", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464212810147314`*^9, 3.646421488304588*^9, {3.646422866815434*^9, 
   3.646422890856809*^9}, 3.6464229563645563`*^9, 3.646422993308669*^9, 
   3.646423161779305*^9, {3.6464232309232597`*^9, 3.646423251921461*^9}, 
   3.646423445433529*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{2 -> 3, 3 -> 1}, {{{1, 1}, {2, 2}}, Null}, {
        VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[0.05032098685208049], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$1", Automatic, Center], {
            0.13231414890644788`, -0.48818670647706053`}, {
            0.09253845339892973, -0.49946595496917934`}, {
            0.06710432850403827, -0.48767453921420467`}, {
            0.06710432850403826, -0.4123854607857954}, {
            0.09253845339892973, -0.40059404503082074`}, {
            0.13231414890644788`, -0.41187329352293955`}, 
            DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
           7]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$2", Automatic, Center], {
            0.13231414890644788`, -0.18816670647706046`}, {
            0.09253845339892973, -0.19944595496917927`}, {
            0.06710432850403827, -0.18765453921420464`}, {
            0.06710432850403826, -0.11236546078579537`}, {
            0.09253845339892973, -0.10057404503082072`}, {
            0.13231414890644788`, -0.11185329352293955`}, 
            DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
           7]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0.15001, -0.45003000000000004`}, 0.003819254600000001], 
            "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox[
             RowBox[{"2", "\[Rule]", "3"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0.15001, -0.15001}, 0.003819254600000001], "DynamicName",
             BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox[
             RowBox[{"3", "\[Rule]", "1"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{-3.2393066909899018`, 
         76.65657414562074}, {-112.2393066909899, 108.2393066909899}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{"3", "\[Rule]", "1"}], ")"}]}], "}"}], "+", 
    RowBox[{"{", 
     RowBox[{"2", ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464212810147314`*^9, 3.646421488304588*^9, {3.646422866815434*^9, 
   3.646422890856809*^9}, 3.6464229563645563`*^9, 3.646422993308669*^9, 
   3.646423161779305*^9, {3.6464232309232597`*^9, 3.646423251921461*^9}, 
   3.6464234454535303`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{3 -> 2}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.055582995951417], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation[
            "VertexID$1", Automatic, 
             Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
            0.03764453921420462}, {-0.057471546601070275`, 
            0.049435954969179276`}, {-0.01769585109355211, 
            0.03815670647706046}, 
            DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
           7]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox[
             RowBox[{"3", "\[Rule]", "2"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{58.7606933090101, 
         145.82617134710006`}, {-35.2393066909899, 33.2393066909899}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None,
    PlotRangePadding->0.1], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", " ", "v"}], "}"}], "+", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464212810147314`*^9, 3.646421488304588*^9, {3.646422866815434*^9, 
   3.646422890856809*^9}, 3.6464229563645563`*^9, 3.646422993308669*^9, 
   3.646423161779305*^9, {3.6464232309232597`*^9, 3.646423251921461*^9}, 
   3.646423445507533*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{3 -> 3}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.055582995951417], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation[
            "VertexID$1", Automatic, 
             Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
            0.03764453921420462}, {-0.057471546601070275`, 
            0.049435954969179276`}, {-0.01769585109355211, 
            0.03815670647706046}, 
            DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
           7]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox[
             RowBox[{"3", "\[Rule]", "3"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{58.7606933090101, 
         145.82617134710006`}, {-35.2393066909899, 33.2393066909899}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None,
    PlotRangePadding->0.1], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", "+", 
     RowBox[{"3", " ", "v"}]}], "}"}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464212810147314`*^9, 3.646421488304588*^9, {3.646422866815434*^9, 
   3.646422890856809*^9}, 3.6464229563645563`*^9, 3.646422993308669*^9, 
   3.646423161779305*^9, {3.6464232309232597`*^9, 3.646423251921461*^9}, 
   3.646423445552536*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{2 -> 3, 3 -> 2}, {{{1, 1}, {2, 2}}, Null}, {
        VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[0.05032098685208049], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$1", Automatic, Center], {
            0.13231414890644788`, -0.48818670647706053`}, {
            0.09253845339892973, -0.49946595496917934`}, {
            0.06710432850403827, -0.48767453921420467`}, {
            0.06710432850403826, -0.4123854607857954}, {
            0.09253845339892973, -0.40059404503082074`}, {
            0.13231414890644788`, -0.41187329352293955`}, 
            DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
           7]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$2", Automatic, Center], {
            0.13231414890644788`, -0.18816670647706046`}, {
            0.09253845339892973, -0.19944595496917927`}, {
            0.06710432850403827, -0.18765453921420464`}, {
            0.06710432850403826, -0.11236546078579537`}, {
            0.09253845339892973, -0.10057404503082072`}, {
            0.13231414890644788`, -0.11185329352293955`}, 
            DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
           7]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0.15001, -0.45003000000000004`}, 0.003819254600000001], 
            "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox[
             RowBox[{"2", "\[Rule]", "3"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0.15001, -0.15001}, 0.003819254600000001], "DynamicName",
             BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox[
             RowBox[{"3", "\[Rule]", "2"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{-3.2393066909899018`, 
         76.65524606845582}, {-112.2393066909899, 108.2393066909899}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"3", "\[Rule]", "2"}], ")"}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{"3", "\[Rule]", "3"}], ")"}]}]}], "}"}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464212810147314`*^9, 3.646421488304588*^9, {3.646422866815434*^9, 
   3.646422890856809*^9}, 3.6464229563645563`*^9, 3.646422993308669*^9, 
   3.646423161779305*^9, {3.6464232309232597`*^9, 3.646423251921461*^9}, 
   3.646423445557536*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1 -> 2, 2 -> 3, 3 -> 1}, {{{1, 1}, {2, 2}, {3, 3}}, Null}, {
        VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[0.05032098685208048], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$1", Automatic, Center], {
            0.4323341489064481, -0.1881667064770605}, {
            0.3925584533989299, -0.19944595496917933`}, {
            0.3671243285040385, -0.18765453921420466`}, {
            0.3671243285040385, -0.1123654607857954}, {
            0.3925584533989299, -0.10057404503082075`}, {
            0.4323341489064481, -0.11185329352293957`}, 
            DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
           7]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$2", Automatic, Center], {
            0.132314148906448, -0.4881867064770606}, {
            0.09253845339892981, -0.4994659549691794}, {
            0.06710432850403836, -0.4876745392142047}, {
            0.06710432850403834, -0.41238546078579547`}, {
            0.09253845339892981, -0.4005940450308208}, {
            0.132314148906448, -0.4118732935229396}, 
            DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
           7]], 
         ArrowBox[
          BezierCurveBox[{
            DynamicLocation["VertexID$3", Automatic, Center], {
            0.13231414890644788`, -0.1881667064770605}, {
            0.0925384533989297, -0.19944595496917933`}, {
            0.06710432850403825, -0.18765453921420466`}, {
            0.06710432850403823, -0.1123654607857954}, {
            0.0925384533989297, -0.10057404503082075`}, {
            0.13231414890644788`, -0.11185329352293957`}, 
            DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
           7]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.4500300000000002, -0.15001000000000003`}, 
             0.003819254600000003], "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox[
             RowBox[{"1", "\[Rule]", "2"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.1500100000000001, -0.4500300000000001}, 
             0.003819254600000003], "DynamicName", BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox[
             RowBox[{"2", "\[Rule]", "3"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.15000999999999998`, -0.15001000000000003`}, 
             0.003819254600000003], "DynamicName", BoxID -> "VertexID$3"], 
           InsetBox[
            FormBox[
             RowBox[{"3", "\[Rule]", "1"}], TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{-0.23930669098990176`, 
         204.86937779148167`}, {-93.2393066909899, 90.2393066909899}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"2", "\[Rule]", "3"}], ")"}], "+", 
      RowBox[{"v", " ", 
       RowBox[{"(", 
        RowBox[{"2", "\[Rule]", "3"}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"3", "\[Rule]", "1"}], ")"}], "+", 
      RowBox[{"v", " ", 
       RowBox[{"(", 
        RowBox[{"3", "\[Rule]", "2"}], ")"}]}]}]}], "}"}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464212810147314`*^9, 3.646421488304588*^9, {3.646422866815434*^9, 
   3.646422890856809*^9}, 3.6464229563645563`*^9, 3.646422993308669*^9, 
   3.646423161779305*^9, {3.6464232309232597`*^9, 3.646423251921461*^9}, 
   3.6464234455635366`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", "3", "}"}], "\[Rule]", 
    RowBox[{"{", "q", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", "1", "}"}], "\[Rule]", 
    RowBox[{"{", "q", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", "3", "}"}], "\[Rule]", 
    RowBox[{"{", "q", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", "1", "}"}], "\[Rule]", 
    RowBox[{"{", "q", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", "3", "}"}], "\[Rule]", 
    RowBox[{"{", "q", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", "2", "}"}], "\[Rule]", 
    RowBox[{"{", "q", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "2"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "2"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", "3", "}"}], "\[Rule]", 
    RowBox[{"{", "q", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", "3", "}"}], "\[Rule]", 
    RowBox[{"{", "q", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "3"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "3"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "2"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "2"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "2"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", "\[Rule]", "2"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.6464234455685368`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"GraphPlot", "[", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"MyGraph", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "->", 
       RowBox[{"MyGraph", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", "3", "}"}], "\[Rule]", 
        RowBox[{"{", "q", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
        RowBox[{"{", "3", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", "1", "}"}], "\[Rule]", 
        RowBox[{"{", "q", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "1"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", "3", "}"}], "\[Rule]", 
        RowBox[{"{", "q", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
        RowBox[{"{", "3", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", "1", "}"}], "\[Rule]", 
        RowBox[{"{", "q", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", "3", "}"}], "\[Rule]", 
        RowBox[{"{", "q", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", 
        RowBox[{"{", "3", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", "2", "}"}], "\[Rule]", 
        RowBox[{"{", "q", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "2"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "2"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", "3", "}"}], "\[Rule]", 
        RowBox[{"{", "q", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", "3", "}"}], "\[Rule]", 
        RowBox[{"{", "q", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "3"}], "}"}], "\[Rule]", 
        RowBox[{"{", "3", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "3"}], "}"}], "\[Rule]", 
        RowBox[{"{", "3", "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "2"}]}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "2"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "2"}]}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"3", "\[Rule]", "2"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "2"}], ",", 
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "2"}], ",", 
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}]}]}], "}"}]}], "]"}], ",", 
   RowBox[{"VertexLabeling", "\[Rule]", "True"}], ",", " ", 
   RowBox[{"EdgeLabeling", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6464232621090436`*^9, 3.6464233222594843`*^9}, {
  3.646423458017249*^9, 3.6464235215818844`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[GraphicsComplexBox[CompressedData["
1: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
    "], {
     {RGBColor[0.5, 0., 0.], 
      LineBox[{{1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
         29, 2}, {1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
        44, 45, 2}, {1, 2}, {1, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 
        57, 58, 59, 60, 61, 2}, {1, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 
        72, 73, 74, 75, 76, 77, 2}, {3, 78, 79, 80, 81, 82, 83, 84, 85, 86, 
        87, 88, 89, 90, 91, 92, 93, 1}, {3, 94, 95, 96, 97, 98, 99, 100, 101, 
        102, 103, 104, 105, 106, 107, 108, 109, 1}, {4, 110, 111, 112, 113, 
        114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 2}, {4, 
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 
        140, 141, 2}, {5, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 
        152, 153, 154, 155, 156, 157, 3}, {5, 158, 159, 160, 161, 162, 163, 
        164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 3}, {5, 174, 175, 
        176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 
        3}, {5, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 
        202, 203, 204, 205, 3}, {6, 5}, {7, 206, 207, 208, 209, 210, 211, 212,
         213, 214, 215, 216, 217, 218, 219, 220, 221, 6}, {7, 222, 223, 224, 
        225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 6}, {
        8, 1}, {9, 2}, {10, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 
        248, 249, 250, 251, 252, 253, 8}, {10, 254, 255, 256, 257, 258, 259, 
        260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 8}, {11, 270, 271, 
        272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 
        1}, {11, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 
        298, 299, 300, 301, 1}, {12, 302, 303, 304, 305, 306, 307, 308, 309, 
        310, 311, 312, 313, 314, 315, 316, 317, 10}, {12, 318, 319, 320, 321, 
        322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 10}, {13, 
        334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 
        348, 349, 7}, {13, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 
        360, 361, 362, 363, 364, 365, 7}}]}, {InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            Graph[{3}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
           Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
              Arrowheads[0.055582995951417], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation[
                 "VertexID$1", Automatic, 
                  Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
                 0.03764453921420462}, {-0.057471546601070275`, 
                 0.049435954969179276`}, {-0.01769585109355211, 
                 0.03815670647706046}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", 
                 BoxID -> "VertexID$1"], 
                InsetBox[
                 FormBox["3", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$1"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{58.760693309010094`, 
              126.82617134710006`}, {-35.239306690989906`, 
              33.239306690989906`}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None,
         PlotRangePadding->0.1],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 1], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{$CellContext`q}, {{{1, 1}}, Null}, {
             VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
           GraphicsGroupBox[{{
              Arrowheads[0.055582995951417], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation[
                 "VertexID$1", Automatic, 
                  Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
                 0.03764453921420462}, {-0.057471546601070275`, 
                 0.049435954969179276`}, {-0.01769585109355211, 
                 0.03815670647706046}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", 
                 BoxID -> "VertexID$1"], 
                InsetBox[
                 FormBox["q", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$1"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{58.760693309010094`, 
              126.82617134710004`}, {-35.239306690989906`, 
              33.239306690989906`}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None,
         PlotRangePadding->0.1],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 2], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{1, 3}, {{{1, 1}, {2, 2}}, Null}, {
             VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
           GraphicsGroupBox[{{
              Arrowheads[0.05032098685208049], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$1", Automatic, Center], {
                 0.13231414890644788`, -0.48818670647706053`}, {
                 0.09253845339892973, -0.49946595496917934`}, {
                 0.06710432850403827, -0.48767453921420467`}, {
                 0.06710432850403826, -0.4123854607857954}, {
                 0.09253845339892973, -0.40059404503082074`}, {
                 0.13231414890644788`, -0.41187329352293955`}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$2", Automatic, Center], {
                 0.13231414890644788`, -0.18816670647706046`}, {
                 0.09253845339892973, -0.19944595496917927`}, {
                 0.06710432850403827, -0.18765453921420464`}, {
                 0.06710432850403826, -0.11236546078579537`}, {
                 0.09253845339892973, -0.10057404503082072`}, {
                 0.13231414890644788`, -0.11185329352293955`}, 
                 DynamicLocation["VertexID$2", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 
                 DiskBox[{0.15001, -0.45003000000000004`}, 
                  0.003819254600000001], "DynamicName", BoxID -> 
                 "VertexID$1"], 
                InsetBox[
                 FormBox["1", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> "VertexLabelID$1"], 
              TagBox[{
                TagBox[
                 DiskBox[{0.15001, -0.15001}, 0.003819254600000001], 
                 "DynamicName", BoxID -> "VertexID$2"], 
                InsetBox[
                 FormBox["3", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$2"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{-3.2393066909899018`, 
              57.656574145620766`}, {-112.2393066909899, 108.2393066909899}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 3], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            Graph[{1}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
           Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
              Arrowheads[0.055582995951417], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation[
                 "VertexID$1", Automatic, 
                  Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
                 0.03764453921420462}, {-0.057471546601070275`, 
                 0.049435954969179276`}, {-0.01769585109355211, 
                 0.03815670647706046}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", 
                 BoxID -> "VertexID$1"], 
                InsetBox[
                 FormBox["1", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$1"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{58.760693309010094`, 
              126.82617134710014`}, {-35.239306690989906`, 
              33.239306690989906`}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None,
         PlotRangePadding->0.1],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 4], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            Graph[{3 -> 1}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
           Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
              Arrowheads[0.055582995951417], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation[
                 "VertexID$1", Automatic, 
                  
                  Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
                 0.03764453921420462}, {-0.057471546601070275`, 
                 0.049435954969179276`}, {-0.01769585109355211, 
                 0.03815670647706046}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", 
                 BoxID -> "VertexID$1"], 
                InsetBox[
                 FormBox[
                  RowBox[{"3", "\[Rule]", "1"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$1"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{58.760693309010094`, 
              145.82617134709994`}, {-35.239306690989906`, 
              33.239306690989906`}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None,
         PlotRangePadding->0.1],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 5], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{2, 3 -> 1}, {{{1, 1}, {2, 2}}, Null}, {
             VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
           GraphicsGroupBox[{{
              Arrowheads[0.05032098685208049], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$1", Automatic, Center], {
                 0.13231414890644788`, -0.48818670647706053`}, {
                 0.09253845339892973, -0.49946595496917934`}, {
                 0.06710432850403827, -0.48767453921420467`}, {
                 0.06710432850403826, -0.4123854607857954}, {
                 0.09253845339892973, -0.40059404503082074`}, {
                 0.13231414890644788`, -0.41187329352293955`}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$2", Automatic, Center], {
                 0.13231414890644788`, -0.18816670647706046`}, {
                 0.09253845339892973, -0.19944595496917927`}, {
                 0.06710432850403827, -0.18765453921420464`}, {
                 0.06710432850403826, -0.11236546078579537`}, {
                 0.09253845339892973, -0.10057404503082072`}, {
                 0.13231414890644788`, -0.11185329352293955`}, 
                 DynamicLocation["VertexID$2", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 
                 DiskBox[{0.15001, -0.45003000000000004`}, 
                  0.003819254600000001], "DynamicName", BoxID -> 
                 "VertexID$1"], 
                InsetBox[
                 FormBox["2", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> "VertexLabelID$1"], 
              TagBox[{
                TagBox[
                 DiskBox[{0.15001, -0.15001}, 0.003819254600000001], 
                 "DynamicName", BoxID -> "VertexID$2"], 
                InsetBox[
                 FormBox[
                  RowBox[{"3", "\[Rule]", "1"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$2"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{-3.2393066909899018`, 
              76.65657414562054}, {-112.2393066909899, 108.2393066909899}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 6], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{2 -> 3, 3 -> 1}, {{{1, 1}, {2, 2}}, Null}, {
             VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
           GraphicsGroupBox[{{
              Arrowheads[0.05032098685208049], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$1", Automatic, Center], {
                 0.13231414890644788`, -0.48818670647706053`}, {
                 0.09253845339892973, -0.49946595496917934`}, {
                 0.06710432850403827, -0.48767453921420467`}, {
                 0.06710432850403826, -0.4123854607857954}, {
                 0.09253845339892973, -0.40059404503082074`}, {
                 0.13231414890644788`, -0.41187329352293955`}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$2", Automatic, Center], {
                 0.13231414890644788`, -0.18816670647706046`}, {
                 0.09253845339892973, -0.19944595496917927`}, {
                 0.06710432850403827, -0.18765453921420464`}, {
                 0.06710432850403826, -0.11236546078579537`}, {
                 0.09253845339892973, -0.10057404503082072`}, {
                 0.13231414890644788`, -0.11185329352293955`}, 
                 DynamicLocation["VertexID$2", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 
                 DiskBox[{0.15001, -0.45003000000000004`}, 
                  0.003819254600000001], "DynamicName", BoxID -> 
                 "VertexID$1"], 
                InsetBox[
                 FormBox[
                  RowBox[{"2", "\[Rule]", "3"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> "VertexLabelID$1"], 
              TagBox[{
                TagBox[
                 DiskBox[{0.15001, -0.15001}, 0.003819254600000001], 
                 "DynamicName", BoxID -> "VertexID$2"], 
                InsetBox[
                 FormBox[
                  RowBox[{"3", "\[Rule]", "1"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$2"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{-3.2393066909899018`, 
              76.65657414562065}, {-112.2393066909899, 108.2393066909899}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 7], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{2, 3}, {{{1, 1}, {2, 2}}, Null}, {
             VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
           GraphicsGroupBox[{{
              Arrowheads[0.05032098685208049], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$1", Automatic, Center], {
                 0.13231414890644788`, -0.48818670647706053`}, {
                 0.09253845339892973, -0.49946595496917934`}, {
                 0.06710432850403827, -0.48767453921420467`}, {
                 0.06710432850403826, -0.4123854607857954}, {
                 0.09253845339892973, -0.40059404503082074`}, {
                 0.13231414890644788`, -0.41187329352293955`}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$2", Automatic, Center], {
                 0.13231414890644788`, -0.18816670647706046`}, {
                 0.09253845339892973, -0.19944595496917927`}, {
                 0.06710432850403827, -0.18765453921420464`}, {
                 0.06710432850403826, -0.11236546078579537`}, {
                 0.09253845339892973, -0.10057404503082072`}, {
                 0.13231414890644788`, -0.11185329352293955`}, 
                 DynamicLocation["VertexID$2", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 
                 DiskBox[{0.15001, -0.45003000000000004`}, 
                  0.003819254600000001], "DynamicName", BoxID -> 
                 "VertexID$1"], 
                InsetBox[
                 FormBox["2", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> "VertexLabelID$1"], 
              TagBox[{
                TagBox[
                 DiskBox[{0.15001, -0.15001}, 0.003819254600000001], 
                 "DynamicName", BoxID -> "VertexID$2"], 
                InsetBox[
                 FormBox["3", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$2"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{-3.2393066909899018`, 
              57.656574145620766`}, {-112.2393066909899, 108.2393066909899}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 8], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            Graph[{2}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
           Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
              Arrowheads[0.055582995951417], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation[
                 "VertexID$1", Automatic, 
                  Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
                 0.03764453921420462}, {-0.057471546601070275`, 
                 0.049435954969179276`}, {-0.01769585109355211, 
                 0.03815670647706046}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", 
                 BoxID -> "VertexID$1"], 
                InsetBox[
                 FormBox["2", TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$1"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{58.760693309010094`, 
              126.82617134710006`}, {-35.239306690989906`, 
              33.239306690989906`}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None,
         PlotRangePadding->0.1],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 9], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            Graph[{3 -> 2}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
           Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
              Arrowheads[0.055582995951417], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation[
                 "VertexID$1", Automatic, 
                  Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
                 0.03764453921420462}, {-0.057471546601070275`, 
                 0.049435954969179276`}, {-0.01769585109355211, 
                 0.03815670647706046}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", 
                 BoxID -> "VertexID$1"], 
                InsetBox[
                 FormBox[
                  RowBox[{"3", "\[Rule]", "2"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$1"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{58.760693309010094`, 
              145.82617134710011`}, {-35.239306690989906`, 
              33.239306690989906`}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None,
         PlotRangePadding->0.1],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 10], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            Graph[{3 -> 3}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
           Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
              Arrowheads[0.055582995951417], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation[
                 "VertexID$1", Automatic, 
                  Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
                 0.03764453921420462}, {-0.057471546601070275`, 
                 0.049435954969179276`}, {-0.01769585109355211, 
                 0.03815670647706046}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", 
                 BoxID -> "VertexID$1"], 
                InsetBox[
                 FormBox[
                  RowBox[{"3", "\[Rule]", "3"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$1"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{58.760693309010094`, 
              145.82617134709994`}, {-35.239306690989906`, 
              33.239306690989906`}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None,
         PlotRangePadding->0.1],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 11], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{2 -> 3, 3 -> 2}, {{{1, 1}, {2, 2}}, Null}, {
             VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
           GraphicsGroupBox[{{
              Arrowheads[0.05032098685208049], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$1", Automatic, Center], {
                 0.13231414890644788`, -0.48818670647706053`}, {
                 0.09253845339892973, -0.49946595496917934`}, {
                 0.06710432850403827, -0.48767453921420467`}, {
                 0.06710432850403826, -0.4123854607857954}, {
                 0.09253845339892973, -0.40059404503082074`}, {
                 0.13231414890644788`, -0.41187329352293955`}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$2", Automatic, Center], {
                 0.13231414890644788`, -0.18816670647706046`}, {
                 0.09253845339892973, -0.19944595496917927`}, {
                 0.06710432850403827, -0.18765453921420464`}, {
                 0.06710432850403826, -0.11236546078579537`}, {
                 0.09253845339892973, -0.10057404503082072`}, {
                 0.13231414890644788`, -0.11185329352293955`}, 
                 DynamicLocation["VertexID$2", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 
                 DiskBox[{0.15001, -0.45003000000000004`}, 
                  0.003819254600000001], "DynamicName", BoxID -> 
                 "VertexID$1"], 
                InsetBox[
                 FormBox[
                  RowBox[{"2", "\[Rule]", "3"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> "VertexLabelID$1"], 
              TagBox[{
                TagBox[
                 DiskBox[{0.15001, -0.15001}, 0.003819254600000001], 
                 "DynamicName", BoxID -> "VertexID$2"], 
                InsetBox[
                 FormBox[
                  RowBox[{"3", "\[Rule]", "2"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$2"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{-3.2393066909899018`, 
              76.65657414562065}, {-112.2393066909899, 108.2393066909899}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 12], InsetBox[
       FrameBox[
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{1 -> 2, 2 -> 3, 3 -> 1}, {{{1, 1}, {2, 2}, {3, 3}}, 
              Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
           Typeset`boxes$s2d = GraphicsGroupBox[{{
              Arrowheads[0.05032098685208048], 
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$1", Automatic, Center], {
                 0.4323341489064481, -0.1881667064770605}, {
                 0.3925584533989299, -0.19944595496917933`}, {
                 0.3671243285040385, -0.18765453921420466`}, {
                 0.3671243285040385, -0.1123654607857954}, {
                 0.3925584533989299, -0.10057404503082075`}, {
                 0.4323341489064481, -0.11185329352293957`}, 
                 DynamicLocation["VertexID$1", Automatic, Center]}, 
                SplineDegree -> 7]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$2", Automatic, Center], {
                 0.132314148906448, -0.4881867064770606}, {
                 0.09253845339892981, -0.4994659549691794}, {
                 0.06710432850403836, -0.4876745392142047}, {
                 0.06710432850403834, -0.41238546078579547`}, {
                 0.09253845339892981, -0.4005940450308208}, {
                 0.132314148906448, -0.4118732935229396}, 
                 DynamicLocation["VertexID$2", Automatic, Center]}, 
                SplineDegree -> 7]], 
              ArrowBox[
               BezierCurveBox[{
                 DynamicLocation["VertexID$3", Automatic, Center], {
                 0.13231414890644788`, -0.1881667064770605}, {
                 0.0925384533989297, -0.19944595496917933`}, {
                 0.06710432850403825, -0.18765453921420466`}, {
                 0.06710432850403823, -0.1123654607857954}, {
                 0.0925384533989297, -0.10057404503082075`}, {
                 0.13231414890644788`, -0.11185329352293957`}, 
                 DynamicLocation["VertexID$3", Automatic, Center]}, 
                SplineDegree -> 7]]}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], 
              TagBox[{
                TagBox[
                 
                 DiskBox[{0.4500300000000002, -0.15001000000000003`}, 
                  0.003819254600000003], "DynamicName", BoxID -> 
                 "VertexID$1"], 
                InsetBox[
                 FormBox[
                  RowBox[{"1", "\[Rule]", "2"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> "VertexLabelID$1"], 
              TagBox[{
                TagBox[
                 
                 DiskBox[{0.1500100000000001, -0.4500300000000001}, 
                  0.003819254600000003], "DynamicName", BoxID -> 
                 "VertexID$2"], 
                InsetBox[
                 FormBox[
                  RowBox[{"2", "\[Rule]", "3"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> "VertexLabelID$2"], 
              TagBox[{
                TagBox[
                 
                 DiskBox[{0.15000999999999998`, -0.15001000000000003`}, 
                  0.003819254600000003], "DynamicName", BoxID -> 
                 "VertexID$3"], 
                InsetBox[
                 FormBox[
                  RowBox[{"3", "\[Rule]", "1"}], TraditionalForm], 
                 Offset[{2, 2}, 
                  DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
                 ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
               "DynamicName", BoxID -> 
               "VertexLabelID$3"]}}], $CellContext`flag}, 
           TagBox[
            
            DynamicBox[GraphComputation`NetworkGraphicsBox[
             3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
             CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
              SynchronousUpdating -> False, 
              TrackedSymbols :> {$CellContext`flag}},
             
             ImageSizeCache->{{-0.23930669098990176`, 
              182.33043329851955`}, {-82.2393066909899, 79.2393066909899}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False,
           UnsavedVariables:>{$CellContext`flag}]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FrameTicks->None],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 13]}}],
   Annotation[#, 
    VertexCoordinateRules -> {{1.660052746162851, 2.257338358494488}, {
     0.7302820427521808, 3.2668507620952782`}, {2.075858845538146, 
     2.8296463559557954`}, {0.6558066092092238, 4.406774141590191}, {
     2.4916649449648305`, 3.4019543533797663`}, {2.9074710443915146`, 
     3.9742623508037367`}, {3.323277143818199, 4.546570348227708}, {
     2.0758588453475824`, 1.4148231779778977`}, {0., 2.388408937411242}, {
     2.075858845252301, 0.7074115889889487}, {3.421435648284853, 
     2.3924419496954896`}, {2.075858845157019, 0.}, {3.7390832432448837`, 
     5.118878345651678}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  ImageSize->{834.8238283895729, Automatic},
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{
  3.6464232899466357`*^9, 3.646423323215539*^9, {3.6464233814508696`*^9, 
   3.646423403326121*^9}, {3.6464234594633317`*^9, 3.646423522316927*^9}}],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"2", "\[Rule]", "3"}], ",", 
      RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"v", " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["q", "2"], "+", 
         RowBox[{"q", " ", "v"}], "+", 
         RowBox[{"v", " ", 
          RowBox[{"(", 
           RowBox[{"q", "+", 
            RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"2", "\[Rule]", "3"}], ",", 
          RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["q", "2"], "+", 
             RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"2", ",", 
              RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"3", "\[Rule]", "1"}], "}"}], "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"q", " ", "v"}], "+", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"q", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", "3", "}"}], "\[Rule]", "q"}], ")"}]}], 
                    "}"}]}], ")"}]}], "}"}]}], ")"}]}], "}"}]}], ")"}]}], 
         "}"}]}], ")"}]}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.646421495259986*^9, 3.646421502264386*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{{
       1 -> 2, 2 -> 3, 3 -> 
        1}, {$CellContext`v ($CellContext`q^2 + $CellContext`q $CellContext`v + \
$CellContext`v ($CellContext`q + $CellContext`q $CellContext`v)) + ({
          2 -> 3, 3 -> 
           1} -> {$CellContext`v ($CellContext`q^2 + $CellContext`q \
$CellContext`v) + ({
             2, 3 -> 1} -> {$CellContext`q ({
                3 -> 1} -> {$CellContext`q $CellContext`v + ({1, 
                   3} -> {$CellContext`q ({
                    3} -> $CellContext`q)})})})})}}, {{{1, 2}}, Null}]], 
    Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.041582132564841494`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       ArrowBox[
        LineBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]]}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[
        DiskBox[{1., 0.}, 0.01273], "DynamicName", BoxID -> "VertexID$1"], 
       TagBox[
        DiskBox[{0., 1.2246467991473532`*^-16}, 0.01273], "DynamicName", 
        BoxID -> "VertexID$2"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{6.18, 352.82000000000005`}, {-7.107199999999999, 
       3.4494812942484785`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.6464215030244293`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Explain", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "4"}], ",", 
    RowBox[{"1", "\[Rule]", "5"}], ",", 
    RowBox[{"1", "\[Rule]", "6"}], ",", 
    RowBox[{"2", "\[Rule]", "4"}], ",", 
    RowBox[{"2", "\[Rule]", "5"}], ",", 
    RowBox[{"2", "\[Rule]", "6"}], ",", 
    RowBox[{"3", "\[Rule]", "4"}], ",", 
    RowBox[{"3", "\[Rule]", "5"}], ",", 
    RowBox[{"3", "\[Rule]", "6"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6464203405029373`*^9, 3.6464203417670097`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 4, 5, 6, 2, 
        3}, {{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 4}, {6, 2}, {6, 
         3}, {6, 4}}, Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.03384563758389261], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$4"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$5"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$6"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.5102040816326543`, 
         180.01439314502733`}, {-56.01439314502731, 46.179844461447786`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 5, 6, 2, 4, 
         3}, {{{1, 2}, {1, 3}, {4, 5}, {4, 2}, {4, 3}, {6, 5}, {6, 2}, {6, 
          3}}, Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
       Typeset`boxes$s2d = GraphicsGroupBox[{{
          Arrowheads[0.03384563758389261], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$1"], 
            InsetBox[
             FormBox["1", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$2"], 
            InsetBox[
             FormBox["5", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[
             DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$3"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$3"], 
          TagBox[{
            TagBox[
             DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$4"], 
            InsetBox[
             FormBox["2", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$4"], 
          TagBox[{
            TagBox[
             DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$5"], 
            InsetBox[
             FormBox["4", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$5"], 
          TagBox[{
            TagBox[
             DiskBox[{2., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$6"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{0.5857864376269051, 
          90.13333469307726}, {-32.1333346930776, 25.335891018717717`}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{4, 5, 6, 2, 
          3}, {{{1, 2}, {1, 3}, {4, 1}, {4, 2}, {4, 3}, {5, 1}, {5, 2}, {5, 
           3}}, Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
        Typeset`boxes$s2d = GraphicsGroupBox[{{
           Arrowheads[0.03384563758389261], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$4", Automatic, Center], 
             DynamicLocation["VertexID$1", Automatic, Center]}], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation[
              "VertexID$4", Automatic, Center], {-1.0987654320987654`, 
              1.9012345679012346`}, {-1.1555555555555557`, 
              1.8444444444444446`}, {-1.217283950617284, 
              1.7827160493827163`}, {-1.2839506172839505`, 
              1.7160493827160495`}, {-1.3555555555555556`, 
              1.6444444444444444`}, {-1.432098765432099, 
              1.567901234567901}, {-1.5135802469135804`, 
              1.4864197530864198`}, {-1.6, 1.4}, {-1.6777041428934945`, 
              1.312926145520821}, {-1.7330387937962004`, 
              1.2294823598610631`}, {-1.766003952708118, 
              1.1496686430207257`}, {-1.7765996196292462`, 
              1.0734849949998084`}, {-1.7648257945595862`, 
              1.0009314157983116`}, {-1.7306824774991374`, 
              0.9320079054162353}, {-1.6741696684479, 
              0.8667144638535795}, {-1.595287367405874, 
              0.8050510911103445}, {-1.4940355743730591`, 
              0.7470177871865296}, {-1.259484898270071, 
              0.6297424491350355}, {-1.0420709030158013`, 
              0.5210354515079006}, {-0.8417935886102487, 
              0.42089679430512433`}, {-0.6586529550534134, 
              0.3293264775267067}, {-0.4926490023452955, 
              0.24632450117264776`}, {-0.3437817304858955, 
              0.17189086524294775`}, {-0.21205113947521276`, 
              0.10602556973760638`}, 
              DynamicLocation["VertexID$2", Automatic, Center]}]], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation["VertexID$4", Automatic, Center], {-1., 
              1.9012345679012346`}, {-1.0000000000000002`, 
              1.8444444444444446`}, {-1., 1.7827160493827163`}, {-1., 
              1.7160493827160495`}, {-1., 1.6444444444444444`}, {-1., 
              1.567901234567901}, {-1., 1.4864197530864198`}, {-1., 
              1.4}, {-0.9955830756000004, 
              1.3138409205160493`}, {-0.9823323024000018, 
              1.2331414598419759`}, {-0.960247680400004, 
              1.15790161797778}, {-0.9293292096000066, 
              1.08812139492346}, {-0.8895768900000104, 
              1.0238007906790176`}, {-0.840990721600015, 
              0.9649398052444519}, {-0.7835707044000204, 
              0.9115384386197634}, {-0.7173168384000268, 
              0.8635966908049516}, {-0.6422291236000337, 
              0.8211145618000169}, {-0.3765760976592858, 
              0.6882880488296428}, {-0.1317188525481685, 
              0.5658594262740843}, {0.09234261173331831, 
              0.4538286941333409}, {0.29560829518517484`, 
              0.3521958524074126}, {0.4780781978074008, 0.2609609010962996}, {
              0.6397523195999962, 0.18012384020000188`}, {0.7806306605629614, 
              0.10968466971851933`}, 
              DynamicLocation["VertexID$3", Automatic, Center]}]], 
           ArrowBox[{
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$1", Automatic, Center]}], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation["VertexID$5", Automatic, Center], {1., 
              1.9012345679012346`}, {1.0000000000000002`, 
              1.8444444444444446`}, {1., 1.7827160493827163`}, {1., 
              1.7160493827160495`}, {1., 1.6444444444444444`}, {1., 
              1.567901234567901}, {1., 1.4864197530864198`}, {1., 1.4}, {
              0.9965081146608071, 1.3125574973768561`}, {0.9860324586432287, 
              1.2280077672852039`}, {0.9685730319472647, 
              1.1463508097250426`}, {0.9441298345729148, 
              1.0675866246963714`}, {0.9127028665201793, 
              0.9917152121991917}, {0.8742921277890583, 0.9187365722335026}, {
              0.8288976183795514, 0.8486507047993046}, {0.7765193382916591, 
              0.7814576098965974}, {0.717157287525381, 0.717157287525381}, {
              0.6061489679212886, 0.6061489679212886}, {0.5029716924536255, 
              0.5029716924536255}, {0.4076254611223916, 0.4076254611223916}, {
              0.32011027392758673`, 0.32011027392758673`}, {
              0.24042613086921102`, 0.24042613086921102`}, {
              0.16857303194726456`, 0.16857303194726456`}, {
              0.10455097716174719`, 0.10455097716174719`}, 
              DynamicLocation["VertexID$2", Automatic, Center]}]], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation["VertexID$5", Automatic, Center], {
              1.0987654320987654`, 1.9012345679012346`}, {1.1555555555555557`,
               1.8444444444444446`}, {1.217283950617284, 
              1.7827160493827163`}, {1.2839506172839505`, 
              1.7160493827160495`}, {1.3555555555555556`, 
              1.6444444444444444`}, {1.432098765432099, 1.567901234567901}, {
              1.5135802469135804`, 1.4864197530864198`}, {1.6, 1.4}, {
              1.6790123456790123`, 1.3111111111111107`}, {1.7382716049382716`,
               1.222222222222222}, {1.7777777777777781`, 
              1.1333333333333335`}, {1.7975308641975307`, 
              1.0444444444444445`}, {1.797530864197531, 0.9555555555555556}, {
              1.7777777777777781`, 0.8666666666666667}, {1.7382716049382716`, 
              0.7777777777777778}, {1.6790123456790125`, 
              0.6888888888888889}, {1.6, 0.6}, {1.5135802469135802`, 
              0.5135802469135802}, {1.4320987654320987`, 
              0.4320987654320988}, {1.3555555555555558`, 
              0.35555555555555557`}, {1.2839506172839508`, 
              0.2839506172839506}, {1.217283950617284, 0.2172839506172839}, {
              1.1555555555555554`, 0.15555555555555556`}, {
              1.0987654320987654`, 0.09876543209876543}, 
              DynamicLocation["VertexID$3", Automatic, Center]}]]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$1"], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"], 
           TagBox[{
             TagBox[
              DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$2"], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$2"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$3"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$3"], 
           TagBox[{
             TagBox[
              DiskBox[{-1., 2.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$4"], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$4"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 2.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$5"], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-2.2393066909899053`, 
           90.2393066909899}, {-38.23930669099009, 31.6793852005232}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.6464211418137693`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 5, 6, 2, 4, 
        3}, {{{1, 2}, {1, 3}, {4, 5}, {4, 2}, {4, 3}, {6, 5}, {6, 2}, {6, 3}},
          Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.03384563758389261], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$4"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$5"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$6"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.5102040816326534`, 
         180.01439314502733`}, {-56.01439314502757, 46.17984446144763}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 6, 2, 4, 5, 
         3}, {{{1, 2}, {3, 4}, {3, 5}, {3, 2}, {6, 4}, {6, 5}, {6, 2}}, 
          Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
       Typeset`boxes$s2d = GraphicsGroupBox[{{
          Arrowheads[0.03384563758389261], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$1"], 
            InsetBox[
             FormBox["1", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$2"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[
             DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$3"], 
            InsetBox[
             FormBox["2", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$3"], 
          TagBox[{
            TagBox[
             DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$4"], 
            InsetBox[
             FormBox["4", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$4"], 
          TagBox[{
            TagBox[
             DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$5"], 
            InsetBox[
             FormBox["5", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$5"], 
          TagBox[{
            TagBox[
             DiskBox[{2., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$6"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{0.5857864376269051, 
          90.13333469307726}, {-32.1333346930776, 25.335891018717717`}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{5, 6, 2, 4, 
          3}, {{{1, 2}, {3, 4}, {3, 1}, {3, 2}, {5, 4}, {5, 1}, {5, 2}}, 
           Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
        Typeset`boxes$s2d = GraphicsGroupBox[{{
           Arrowheads[0.03384563758389261], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$1", Automatic, Center]}], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation[
              "VertexID$3", Automatic, Center], {-0.09876543209876541, 
              1.9012345679012346`}, {-0.15555555555555556`, 
              1.8444444444444446`}, {-0.21728395061728392`, 
              1.7827160493827163`}, {-0.2839506172839506, 
              1.7160493827160495`}, {-0.3555555555555555, 
              1.6444444444444444`}, {-0.4320987654320988, 
              1.567901234567901}, {-0.5135802469135802, 
              1.4864197530864198`}, {-0.6, 1.4}, {-0.6790123456790123, 
              1.3111111111111107`}, {-0.7382716049382716, 
              1.222222222222222}, {-0.7777777777777778, 
              1.1333333333333335`}, {-0.7975308641975307, 
              1.0444444444444445`}, {-0.7975308641975308, 
              0.9555555555555556}, {-0.7777777777777779, 
              0.8666666666666667}, {-0.7382716049382716, 
              0.7777777777777778}, {-0.6790123456790124, 
              0.6888888888888889}, {-0.6, 0.6}, {-0.5135802469135802, 
              0.5135802469135802}, {-0.4320987654320988, 
              0.4320987654320988}, {-0.35555555555555557`, 
              0.35555555555555557`}, {-0.2839506172839506, 
              0.2839506172839506}, {-0.2172839506172839, 
              0.2172839506172839}, {-0.15555555555555556`, 
              0.15555555555555556`}, {-0.09876543209876543, 
              0.09876543209876543}, 
              DynamicLocation["VertexID$2", Automatic, Center]}]], 
           ArrowBox[{
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$1", Automatic, Center]}], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation["VertexID$5", Automatic, Center], {
              1.0987654320987654`, 1.9012345679012346`}, {1.1555555555555557`,
               1.8444444444444446`}, {1.217283950617284, 
              1.7827160493827163`}, {1.2839506172839505`, 
              1.7160493827160495`}, {1.3555555555555556`, 
              1.6444444444444444`}, {1.432098765432099, 1.567901234567901}, {
              1.5135802469135804`, 1.4864197530864198`}, {1.6, 1.4}, {
              1.6777041428934945`, 1.312926145520821}, {1.7330387937962004`, 
              1.2294823598610631`}, {1.766003952708118, 
              1.1496686430207257`}, {1.7765996196292462`, 
              1.0734849949998084`}, {1.7648257945595862`, 
              1.0009314157983116`}, {1.7306824774991374`, 
              0.9320079054162353}, {1.6741696684479, 0.8667144638535795}, {
              1.595287367405874, 0.8050510911103445}, {1.4940355743730591`, 
              0.7470177871865296}, {1.259484898270071, 0.6297424491350355}, {
              1.0420709030158013`, 0.5210354515079006}, {0.8417935886102487, 
              0.42089679430512433`}, {0.6586529550534134, 
              0.3293264775267067}, {0.4926490023452955, 
              0.24632450117264776`}, {0.3437817304858955, 
              0.17189086524294775`}, {0.21205113947521276`, 
              0.10602556973760638`}, 
              DynamicLocation["VertexID$2", Automatic, Center]}]], 
           ArrowBox[{
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$1"], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"], 
           TagBox[{
             TagBox[
              DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$2"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$2"], 
           TagBox[{
             TagBox[
              DiskBox[{0., 2.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$3"], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$3"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$4"], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$4"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 2.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$5"], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-2.2393066909899053`, 
           90.23930669098989}, {-47.23930669098992, 41.61120393874798}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.646421141945777*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 6, 2, 4, 5, 
        3}, {{{1, 2}, {3, 4}, {3, 5}, {3, 2}, {6, 4}, {6, 5}, {6, 2}}, 
         Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
      Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.03384563758389261], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$6", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$4"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$5"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$5"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$6"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.5102040816326534`, 
         180.01439314502736`}, {-56.01439314502759, 46.17984446144762}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{1, 2, 4, 5, 6, 
         3}, {{{1, 1}, {2, 3}, {2, 4}, {2, 5}, {6, 3}, {6, 4}, {6, 5}}, 
          Null}, {VertexLabels -> {"Name"}}]], Typeset`boxes, 
       Typeset`boxes$s2d = GraphicsGroupBox[{{
          Arrowheads[0.031247371155372787`], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$1", Automatic, Center], {
             0.9772471525888187, -1.3883108461192015`}, {
             0.684505960076926, -1.4713238673144367`}, {
             0.497315869313595, -1.384541397128281}, {
             0.49731586931359495`, -0.830428783356687}, {
             0.684505960076926, -0.7436463131705313}, {
             0.9772471525888187, -0.8266593343657666}, 
             DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
            7]], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$6", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             
             DiskBox[{1.107485090242484, -1.107485090242484}, 
              0.02638288999416022], "DynamicName", BoxID -> "VertexID$1"], 
            InsetBox[
             FormBox["1", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             
             DiskBox[{1.371505018048497, -2.586475198533465}, 
              0.02638288999416022], "DynamicName", BoxID -> "VertexID$2"], 
            InsetBox[
             FormBox["2", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[
             
             DiskBox[{0.3715050180484969, -3.586475198533465}, 
              0.02638288999416022], "DynamicName", BoxID -> "VertexID$3"], 
            InsetBox[
             FormBox["4", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$3"], 
          TagBox[{
            TagBox[
             
             DiskBox[{1.371505018048497, -3.586475198533465}, 
              0.02638288999416022], "DynamicName", BoxID -> "VertexID$4"], 
            InsetBox[
             FormBox["5", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$4"], 
          TagBox[{
            TagBox[
             
             DiskBox[{2.371505018048497, -3.586475198533465}, 
              0.02638288999416022], "DynamicName", BoxID -> "VertexID$5"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$5"], 
          TagBox[{
            TagBox[
             
             DiskBox[{2.371505018048497, -2.586475198533465}, 
              0.02638288999416022], "DynamicName", BoxID -> "VertexID$6"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{-0.2393066909899053, 
          84.6203927996376}, {-57.792197725170226`, 51.30120725839761}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{2, 4, 5, 6, 
          3}, {{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 4}}, Null}, {
          VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
        GraphicsGroupBox[{{
           Arrowheads[0.03384563758389261], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$5", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$1"], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"], 
           TagBox[{
             TagBox[
              DiskBox[{-1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$2"], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$2"], 
           TagBox[{
             TagBox[
              DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$3"], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$3"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$4"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$4"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$5"], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{0.6734693877551008, 
           90.04565174294913}, {-32.04565174294929, 25.2482080685895}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.6464211420737844`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{2, 4, 5, 6, 
        3}, {{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 4}}, Null}, {
        VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[0.03384563758389261], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$5", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{-1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$4"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$5"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.5102040816326605`, 
         180.01439314502744`}, {-56.01439314502727, 46.17984446144783}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{2, 5, 6, 3, 
         4}, {{{1, 2}, {1, 3}, {4, 5}, {4, 2}, {4, 3}}, Null}, {
         VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
       GraphicsGroupBox[{{
          Arrowheads[0.03384563758389261], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$1"], 
            InsetBox[
             FormBox["2", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$2"], 
            InsetBox[
             FormBox["5", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[
             DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$3"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$3"], 
          TagBox[{
            TagBox[
             DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$4"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$4"], 
          TagBox[{
            TagBox[
             DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$5"], 
            InsetBox[
             FormBox["4", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{0.5857864376269051, 
          90.13333469307734}, {-32.13333469307737, 25.335891018717696`}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{4, 5, 6, 
          3}, {{{1, 2}, {1, 3}, {4, 1}, {4, 2}, {4, 3}}, Null}, {
          VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
        GraphicsGroupBox[{{
           Arrowheads[0.03384563758389261], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$4", Automatic, Center], 
             DynamicLocation["VertexID$1", Automatic, Center]}], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation[
              "VertexID$4", Automatic, Center], {-0.10455097716174719`, 
              1.8954490228382528`}, {-0.16857303194726453`, 
              1.8314269680527357`}, {-0.24042613086921105`, 
              1.7595738691307892`}, {-0.32011027392758673`, 
              1.6798897260724133`}, {-0.4076254611223915, 
              1.5923745388776085`}, {-0.5029716924536255, 
              1.4970283075463744`}, {-0.6061489679212887, 
              1.3938510320787114`}, {-0.717157287525381, 
              1.282842712474619}, {-0.7765193382916591, 
              1.2185423901034025`}, {-0.8288976183795513, 
              1.1513492952006954`}, {-0.8742921277890583, 
              1.0812634277664974`}, {-0.9127028665201794, 
              1.0082847878008083`}, {-0.9441298345729148, 
              0.9324133753036284}, {-0.9685730319472646, 
              0.8536491902749577}, {-0.9860324586432287, 
              0.771992232714796}, {-0.9965081146608072, 
              0.6874425026231434}, {-1., 0.6}, {-1., 
              0.5135802469135802}, {-1., 
              0.4320987654320988}, {-1.0000000000000002`, 
              0.35555555555555557`}, {-1., 0.2839506172839506}, {-1., 
              0.2172839506172839}, {-1., 0.15555555555555556`}, {-1., 
              0.09876543209876543}, 
              DynamicLocation["VertexID$2", Automatic, Center]}]], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation["VertexID$4", Automatic, Center], {
              0.10455097716174719`, 1.8954490228382528`}, {
              0.16857303194726453`, 1.8314269680527357`}, {
              0.24042613086921105`, 1.7595738691307892`}, {
              0.32011027392758673`, 1.6798897260724133`}, {0.4076254611223915,
               1.5923745388776085`}, {0.5029716924536255, 
              1.4970283075463744`}, {0.6061489679212887, 
              1.3938510320787114`}, {0.717157287525381, 1.282842712474619}, {
              0.7765193382916591, 1.2185423901034025`}, {0.8288976183795513, 
              1.1513492952006954`}, {0.8742921277890583, 
              1.0812634277664974`}, {0.9127028665201794, 
              1.0082847878008083`}, {0.9441298345729148, 
              0.9324133753036284}, {0.9685730319472646, 0.8536491902749577}, {
              0.9860324586432287, 0.771992232714796}, {0.9965081146608072, 
              0.6874425026231434}, {1., 0.6}, {1., 0.5135802469135802}, {1., 
              0.4320987654320988}, {1.0000000000000002`, 
              0.35555555555555557`}, {1., 0.2839506172839506}, {1., 
              0.2172839506172839}, {1., 0.15555555555555556`}, {1., 
              0.09876543209876543}, 
              DynamicLocation["VertexID$3", Automatic, Center]}]]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$1"], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"], 
           TagBox[{
             TagBox[
              DiskBox[{-1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$2"], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$2"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$3"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$3"], 
           TagBox[{
             TagBox[
              DiskBox[{0., 2.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$4"], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$4"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-1.2393066909899089`, 
           91.95842782169406}, {-53.95842782169428, 46.2393066909899}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.6464211421987915`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{2, 5, 6, 3, 
        4}, {{{1, 2}, {1, 3}, {4, 5}, {4, 2}, {4, 3}}, Null}, {
        VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[0.03384563758389261], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$3", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$4", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$4"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$5"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.5102040816326543`, 
         180.01439314502733`}, {-56.01439314502716, 46.1798444614478}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{2, 6, 3, 4, 5}, {{{1, 2}, {3, 4}, {3, 5}, {3, 2}}, Null}, {
         VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
       GraphicsGroupBox[{{
          Arrowheads[0.03384563758389261], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$1"], 
            InsetBox[
             FormBox["2", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$2"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[
             DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$3"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$3"], 
          TagBox[{
            TagBox[
             DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$4"], 
            InsetBox[
             FormBox["4", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$4"], 
          TagBox[{
            TagBox[
             DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
             "VertexID$5"], 
            InsetBox[
             FormBox["5", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{0.5857864376269051, 
          90.13333469307734}, {-32.133334693077714`, 25.33589101871746}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{5, 6, 3, 4}, {{{1, 2}, {3, 4}, {3, 1}, {3, 2}}, Null}, {
          VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
        GraphicsGroupBox[{{
           Arrowheads[0.03384563758389261], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           ArrowBox[{
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$1", Automatic, Center]}], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation["VertexID$3", Automatic, Center], {
              1.1045509771617472`, 1.8954490228382528`}, {1.1685730319472647`,
               1.8314269680527357`}, {1.240426130869211, 
              1.7595738691307892`}, {1.3201102739275867`, 
              1.6798897260724133`}, {1.4076254611223917`, 
              1.5923745388776085`}, {1.5029716924536256`, 
              1.4970283075463744`}, {1.6061489679212888`, 
              1.3938510320787114`}, {1.717157287525381, 1.282842712474619}, {
              1.776519338291659, 1.2185423901034025`}, {1.8288976183795513`, 
              1.1513492952006954`}, {1.8742921277890585`, 
              1.0812634277664974`}, {1.9127028665201795`, 
              1.0082847878008083`}, {1.944129834572915, 0.9324133753036284}, {
              1.9685730319472647`, 0.8536491902749577}, {1.9860324586432287`, 
              0.771992232714796}, {1.9965081146608072`, 0.6874425026231434}, {
              2., 0.6}, {2., 0.5135802469135802}, {2., 0.4320987654320988}, {
              2.0000000000000004`, 0.35555555555555557`}, {2., 
              0.2839506172839506}, {2., 0.2172839506172839}, {2., 
              0.15555555555555556`}, {2., 0.09876543209876543}, 
              DynamicLocation["VertexID$2", Automatic, Center]}]], 
           ArrowBox[{
             DynamicLocation["VertexID$3", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$1"], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"], 
           TagBox[{
             TagBox[
              DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$2"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$2"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 2.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$3"], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$3"], 
           TagBox[{
             TagBox[
              DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
              "VertexID$4"], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$4"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-0.2393066909899062, 
           90.95842782169413}, {-52.95842782169433, 45.23930669098999}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.646421142326799*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{2, 6, 3, 4, 5}, {{{1, 2}, {3, 4}, {3, 5}, {3, 2}}, Null}, {
        VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[0.03384563758389261], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[{
           DynamicLocation["VertexID$1", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$2", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$4", Automatic, Center]}], 
         ArrowBox[{
           DynamicLocation["VertexID$3", Automatic, Center], 
           DynamicLocation["VertexID$5", Automatic, Center]}]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$1"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$3"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$4"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$4"], 
         TagBox[{
           TagBox[
            DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
            "VertexID$5"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.5799999999999987`, 
         183.57066257047583`}, {-61.71386257047598, 42.25661937091249}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "2", ",", "6"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{2, 3, 4, 5, 6}, {{{1, 1}, {2, 3}, {2, 4}, {2, 5}}, Null}, {
         VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
       GraphicsGroupBox[{{
          Arrowheads[0.03193109752815274], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$1", Automatic, Center], {
             0.8801553028227224, -2.938450623863463}, {
             0.623404292348664, -3.0112578598096484`}, {
             0.45922772210987395`, -2.9351445983976077`}, {
             0.45922772210987384`, -2.4491556868900526`}, {
             0.623404292348664, -2.3730424254780114`}, {
             0.8801553028227224, -2.4458496614241967`}, 
             DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
            7]], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             
             DiskBox[{0.9943815304598784, -2.69215014264383}, 
              0.025337102783440757`], "DynamicName", BoxID -> "VertexID$1"], 
            InsetBox[
             FormBox["2", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             
             DiskBox[{1.3488843060919757`, -0.34888430609197574`}, 
              0.025337102783440757`], "DynamicName", BoxID -> "VertexID$2"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[
             
             DiskBox[{0.34888430609197574`, -1.3488843060919757`}, 
              0.025337102783440757`], "DynamicName", BoxID -> "VertexID$3"], 
            InsetBox[
             FormBox["4", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$3"], 
          TagBox[{
            TagBox[
             
             DiskBox[{1.3488843060919757`, -1.3488843060919757`}, 
              0.025337102783440757`], "DynamicName", BoxID -> "VertexID$4"], 
            InsetBox[
             FormBox["5", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$4"], 
          TagBox[{
            TagBox[
             
             DiskBox[{2.3488843060919757`, -1.3488843060919757`}, 
              0.025337102783440757`], "DynamicName", BoxID -> "VertexID$5"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{-1.5888635073332193`, 
          91.53144021566274}, {-72.07529876017472, 53.239306690989906`}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{3, 4, 5, 6}, {{{1, 2}, {1, 3}, {1, 4}}, Null}, {
          VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
        GraphicsGroupBox[{{
           Arrowheads[0.03685673738335107], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}]], 
           ArrowBox[
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}]], 
           ArrowBox[
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}]]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              
              DiskBox[{0.7745966692414834, 0.7745966692414834}, 
               0.018845521490452433`], "DynamicName", BoxID -> "VertexID$1"], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"], 
           TagBox[{
             TagBox[
              DiskBox[{0., 0.}, 0.018845521490452433`], "DynamicName", BoxID -> 
              "VertexID$2"], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$2"], 
           TagBox[{
             TagBox[
              DiskBox[{0.7745966692414834, 0.}, 0.018845521490452433`], 
              "DynamicName", BoxID -> "VertexID$3"], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$3"], 
           TagBox[{
             TagBox[
              DiskBox[{1.5491933384829668`, 0.}, 0.018845521490452433`], 
              "DynamicName", BoxID -> "VertexID$4"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$4"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{0.78, 95.62991730228133}, {-39.70111730228122, 
           20.44346834947288}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.6464211423888025`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{3, 4, 5, 6}, {{{1, 2}, {1, 3}, {1, 4}}, Null}, {
        VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[0.03685673738335107], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}]], 
         ArrowBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]], 
         ArrowBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.7745966692414834, 0.7745966692414834}, 
             0.018845521490452433`], "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.018845521490452433`], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{0.7745966692414834, 0.}, 0.018845521490452433`], 
            "DynamicName", BoxID -> "VertexID$3"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"], 
         TagBox[{
           TagBox[
            DiskBox[{1.5491933384829668`, 0.}, 0.018845521490452433`], 
            "DynamicName", BoxID -> "VertexID$4"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$4"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.5799999999999996`, 
         183.52938861574785`}, {-61.67258861574811, 42.397537466917385`}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{4, 3, 5, 6}, {{{1, 1}, {2, 3}, {2, 4}}, Null}, {
         VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
       GraphicsGroupBox[{{
          Arrowheads[0.03286999358269471], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$1", Automatic, Center], {
             0.7821110302610572, -1.1241366974546132`}, {
             0.5385356348667255, -1.1932077061739825`}, {
             0.3827840647499683, -1.1210003263122266`}, {
             0.3827840647499682, -0.6599507629272597}, {
             0.5385356348667255, -0.5877433830655038}, {
             0.7821110302610572, -0.656814391784873}, 
             DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
            7]], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             
             DiskBox[{0.8904755446197431, -0.8904755446197431}, 
              0.023964767502767492`], "DynamicName", BoxID -> "VertexID$1"], 
            InsetBox[
             FormBox["4", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             
             DiskBox[{0.27810310892394874`, -2.0590541981634347`}, 
              0.023964767502767492`], "DynamicName", BoxID -> "VertexID$2"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[
             
             DiskBox[{0.27810310892394874`, -3.0590541981634347`}, 
              0.023964767502767492`], "DynamicName", BoxID -> "VertexID$3"], 
            InsetBox[
             FormBox["5", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$3"], 
          TagBox[{
            TagBox[
             
             DiskBox[{1.2781031089239487`, -3.0590541981634347`}, 
              0.023964767502767492`], "DynamicName", BoxID -> "VertexID$4"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$4"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{-2.239306690989906, 
          55.68571852405133}, {-60.930883226717036`, 53.27613494655795}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{4, 5, 6}, {{{1, 2}, {1, 3}}, Null}, {
          VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
        GraphicsGroupBox[{{
           Arrowheads[0.04266728990926259], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}]], 
           ArrowBox[
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}]]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              
              DiskBox[{0.4472135954999579, 0.8944271909999159}, 
               0.011386058141428929`], "DynamicName", BoxID -> "VertexID$1"], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"], 
           TagBox[{
             TagBox[
              DiskBox[{0., 0.}, 0.011386058141428929`], "DynamicName", BoxID -> 
              "VertexID$2"], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$2"], 
           TagBox[{
             TagBox[
              DiskBox[{0.8944271909999159, 0.}, 0.011386058141428929`], 
              "DynamicName", BoxID -> "VertexID$3"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{0.7800000000000009, 
           95.61645043094921}, {-60.68765043094969, 41.14880000000001}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.64642114251081*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{3, 5, 6}, {{{1, 2}, {1, 3}}, Null}, {
        VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
      GraphicsGroupBox[{{
         Arrowheads[0.04266728990926259], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}]], 
         ArrowBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            
            DiskBox[{0.4472135954999579, 0.8944271909999159}, 
             0.011386058141428929`], "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 0.}, 0.011386058141428929`], "DynamicName", BoxID -> 
            "VertexID$2"], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"], 
         TagBox[{
           TagBox[
            DiskBox[{0.8944271909999159, 0.}, 0.011386058141428929`], 
            "DynamicName", BoxID -> "VertexID$3"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.580000000000001, 
         183.5023035599228}, {-103.6455035599229, 84.27679999999998}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{5, 3, 6}, {{{1, 1}, {2, 3}}, Null}, {
         VertexLabels -> {"Name"}}]], Typeset`boxes, Typeset`boxes$s2d = 
       GraphicsGroupBox[{{
          Arrowheads[0.041582132564841494`], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$1", Automatic, Center], {
             0.5990307445322395, -0.8782935323853024}, {
             0.4001522669946487, -0.9346897748458964}, {
             0.2729816425201914, -0.8757326960710232}, {
             0.2729816425201914, -0.49928730392897697`}, {
             0.4001522669946487, -0.4403302251541037}, {
             0.5990307445322395, -0.49672646761469774`}, 
             DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
            7]], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             DiskBox[{0.6875100000000001, -0.6875100000000001}, 0.01273], 
             "DynamicName", BoxID -> "VertexID$1"], 
            InsetBox[
             FormBox["5", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             DiskBox[{1.5625300000000002`, -0.18751000000000007`}, 0.01273], 
             "DynamicName", BoxID -> "VertexID$2"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"], 
          TagBox[{
            TagBox[
             DiskBox[{1.5625300000000002`, -1.18751}, 0.01273], "DynamicName",
              BoxID -> "VertexID$3"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{-2.2393066909899053`, 
          97.92179168368969}, {-53.99299168368958, 34.22658206207312}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{5, 6}, {{{1, 2}}, Null}, {VertexLabels -> {"Name"}}]], 
        Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
           Arrowheads[0.041582132564841494`], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}]]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              DiskBox[{1., 0.}, 0.01273], "DynamicName", BoxID -> 
              "VertexID$1"], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"], 
           TagBox[{
             TagBox[
              DiskBox[{0., 1.2246467991473532`*^-16}, 0.01273], "DynamicName",
               BoxID -> "VertexID$2"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$2"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{0.42643356184433423`, 
           95.97001686910504}, {-13.810663993322166`, 5.414213562373093}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.646421142642817*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{3, 6}, {{{1, 2}}, Null}, {VertexLabels -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.041582132564841494`], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{1., 0.}, 0.01273], "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.2246467991473532`*^-16}, 0.01273], "DynamicName", 
            BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.5800000000000005`, 
         183.50230355992284`}, {-16.215515191775825`, 4.133211631853037}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"drop \"\>", ",", "3", ",", "6"}], "}"}], ",", 
   RowBox[{
    GraphicsBox[
     NamespaceBox["NetworkGraphics",
      DynamicModuleBox[{Typeset`graph = HoldComplete[
        Graph[{6, 3}, {{{1, 1}, {2, 2}}, Null}, {VertexLabels -> {"Name"}}]], 
       Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
          Arrowheads[0.05032098685208049], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$1", Automatic, Center], {
             0.13231414890644788`, -0.48818670647706053`}, {
             0.09253845339892973, -0.49946595496917934`}, {
             0.06710432850403827, -0.48767453921420467`}, {
             0.06710432850403826, -0.4123854607857954}, {
             0.09253845339892973, -0.40059404503082074`}, {
             0.13231414890644788`, -0.41187329352293955`}, 
             DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
            7]], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             0.13231414890644788`, -0.18816670647706046`}, {
             0.09253845339892973, -0.19944595496917927`}, {
             0.06710432850403827, -0.18765453921420464`}, {
             0.06710432850403826, -0.11236546078579537`}, {
             0.09253845339892973, -0.10057404503082072`}, {
             0.13231414890644788`, -0.11185329352293955`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], 
          TagBox[{
            TagBox[
             DiskBox[{0.15001, -0.45003000000000004`}, 0.003819254600000001], 
             "DynamicName", BoxID -> "VertexID$1"], 
            InsetBox[
             FormBox["6", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$1"], 
          TagBox[{
            TagBox[
             DiskBox[{0.15001, -0.15001}, 0.003819254600000001], 
             "DynamicName", BoxID -> "VertexID$2"], 
            InsetBox[
             FormBox["3", TraditionalForm], 
             Offset[{2, 2}, 
              DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
             ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
           BoxID -> "VertexLabelID$2"]}}], $CellContext`flag}, 
       TagBox[
        DynamicBox[GraphComputation`NetworkGraphicsBox[
         3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
         CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
          SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache->{{-3.2393066909899053`, 
          34.1950999211155}, {-61.02714575660811, 54.239306690989906`}}],
        MouseAppearanceTag["NetworkGraphics"]],
       AllowKernelInitialization->False,
       UnsavedVariables:>{$CellContext`flag}]],
     DefaultBaseStyle->{
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks->None], "+", 
    RowBox[{
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{6}, {{{1, 1}}, Null}, {VertexLabels -> {"Name"}}]], 
        Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
           Arrowheads[0.055582995951417], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           ArrowBox[
            BezierCurveBox[{
              DynamicLocation[
              "VertexID$1", Automatic, 
               Center], {-0.01769585109355211, -0.03815670647706047}, \
{-0.057471546601070275`, -0.04943595496917929}, {-0.08290567149596173, \
-0.03764453921420464}, {-0.08290567149596174, 
              0.03764453921420462}, {-0.057471546601070275`, 
              0.049435954969179276`}, {-0.01769585109355211, 
              0.03815670647706046}, 
              DynamicLocation["VertexID$1", Automatic, Center]}, SplineDegree -> 
             7]]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[{
             TagBox[
              DiskBox[{0., 0.}, 0.004014598540145964], "DynamicName", BoxID -> 
              "VertexID$1"], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{2, 2}, 
               DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
              ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
            BoxID -> "VertexLabelID$1"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{27.760693309010094`, 
           68.56260593512732}, {-21.47332349553084, 16.239306690989903`}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None,
      PlotRangePadding->0.1], " ", "v"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6464206326436467`*^9, {3.646421038439857*^9, 3.6464210641573277`*^9}, 
   3.6464211427718244`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"q", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"q", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], 
       ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
  RowBox[{"v", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"q", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], 
       ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
  RowBox[{"v", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"q", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], 
       ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
           "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
  RowBox[{"v", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"q", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], 
       ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"q", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
           "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{"v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"q", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
        "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
             ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
           "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"q", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox["q", "2"], "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"v", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"q", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
           "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
           "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                ")"}]}]}], ")"}]}], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["q", "2"], "+", 
              RowBox[{"q", " ", "v"}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{"q", "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
              "+", 
              RowBox[{"v", " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox["q", "2"], "+", 
                 RowBox[{"q", " ", "v"}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
                 RowBox[{"v", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox["q", "2"], "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                   ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{
  3.6464206334446926`*^9, {3.646421038789877*^9, 3.6464210651873865`*^9}, 
   3.6464211427858253`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Explain", "[", 
  RowBox[{"{", 
   RowBox[{"1", "\[Rule]", "2"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6464204121730366`*^9, 3.64642041538322*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{1, 2}, {{{1, 2}}, Null}, {VertexLabels -> {"Name"}}]], 
      Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
         Arrowheads[0.041582132564841494`], 
         Directive[
          Opacity[0.7], 
          Hue[0.6, 0.7, 0.5]], 
         ArrowBox[
          LineBox[{
            DynamicLocation["VertexID$1", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}]]}, {
         Directive[
          Hue[0.6, 0.2, 0.8], 
          EdgeForm[
           Directive[
            GrayLevel[0], 
            Opacity[0.7]]]], 
         TagBox[{
           TagBox[
            DiskBox[{1., 0.}, 0.01273], "DynamicName", BoxID -> "VertexID$1"], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$1"], 
         TagBox[{
           TagBox[
            DiskBox[{0., 1.2246467991473532`*^-16}, 0.01273], "DynamicName", 
            BoxID -> "VertexID$2"], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, 
             DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
          BoxID -> "VertexLabelID$2"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
        ImageSizeCache->{{2.510204081632652, 
         180.01411771119604`}, {-15.014117711196064`, 5.261902498081408}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False,
      UnsavedVariables:>{$CellContext`flag}]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    FrameTicks->None], ",", 
   RowBox[{
    RowBox[{"v", " ", 
     RowBox[{"Graph", "[", 
      RowBox[{
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"VertexLabels", "\[Rule]", "\<\"Name\"\>"}]}], "]"}]}], "+", 
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], ",", 
      RowBox[{"VertexLabels", "\[Rule]", "\<\"Name\"\>"}]}], "]"}]}]}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.646420416219268*^9, {3.6464204719614563`*^9, 3.646420541646442*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["q", "2"], "+", 
  RowBox[{"q", " ", "v"}]}]], "Output",
 CellChangeTimes->{
  3.6464204162242684`*^9, {3.6464204719664564`*^9, 3.6464205416514425`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Z2", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "2"}], ",", 
    RowBox[{"1", "\[Rule]", "3"}], ",", 
    RowBox[{"1", "\[Rule]", "4"}], ",", 
    RowBox[{"2", "\[Rule]", "3"}], ",", 
    RowBox[{"2", "\[Rule]", "4"}], ",", 
    RowBox[{"3", "\[Rule]", "4"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{3.6464195903390303`*^9}],

Cell[BoxData["24"], "Output",
 CellChangeTimes->{3.6464195943632603`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompleteGraph", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.6464186133121476`*^9, 3.6464186141551957`*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4}, {Null, 
       SparseArray[
       Automatic, {4, 4}, 0, {
        1, {{0, 3, 6, 9, 12}, {{2}, {3}, {4}, {1}, {3}, {4}, {1}, {2}, {4}, {
          1}, {2}, {3}}}, Pattern}]}, {GraphLayout -> "StarEmbedding"}]], 
    Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       LineBox[{{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}, {
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$3", Automatic, Center]}, {
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$4", Automatic, Center]}, {
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$3", Automatic, Center]}, {
          DynamicLocation["VertexID$2", Automatic, Center], 
          DynamicLocation["VertexID$4", Automatic, Center]}, {
          DynamicLocation["VertexID$3", Automatic, Center], 
          DynamicLocation["VertexID$4", Automatic, Center]}}]}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[
        DiskBox[{0., 0.}, 0.020399597244776413`], "DynamicName", BoxID -> 
        "VertexID$1"], 
       TagBox[
        DiskBox[{0.8660254037844389, -0.5000000000000012}, 
         0.020399597244776413`], "DynamicName", BoxID -> "VertexID$2"], 
       TagBox[
        DiskBox[{1.8369701987210297`*^-16, 1.}, 0.020399597244776413`], 
        "DynamicName", BoxID -> "VertexID$3"], 
       TagBox[
        DiskBox[{-0.8660254037844386, -0.49999999999999917`}, 
         0.020399597244776413`], "DynamicName", BoxID -> 
        "VertexID$4"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{6.179999999999991, 352.82}, {-153.1072, 
       148.42239007943093`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.646418615292261*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Z", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "2"}], ",", 
    RowBox[{"2", "\[Rule]", "2"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.646420084914318*^9, 3.6464201164141197`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"q", " ", 
   RowBox[{"(", 
    RowBox[{"q", "+", 
     RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
  RowBox[{"v", " ", 
   RowBox[{"(", 
    RowBox[{"q", "+", 
     RowBox[{"q", " ", "v"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.646420089688592*^9, 3.646420117699194*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{"Z", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"1", "\[Rule]", "4"}], ",", 
     RowBox[{"2", "\[Rule]", "3"}], ",", 
     RowBox[{"2", "\[Rule]", "4"}], ",", 
     RowBox[{"3", "\[Rule]", "4"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6464185568459177`*^9, 3.6464185596500783`*^9}, 
   3.646418623544733*^9, {3.646418689110483*^9, 3.646418715584997*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["q", "4"], "+", 
  RowBox[{"6", " ", 
   SuperscriptBox["q", "3"], " ", "v"}], "+", 
  RowBox[{"15", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "2"]}], "+", 
  RowBox[{"16", " ", "q", " ", 
   SuperscriptBox["v", "3"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "3"]}], "+", 
  RowBox[{"15", " ", "q", " ", 
   SuperscriptBox["v", "4"]}], "+", 
  RowBox[{"6", " ", "q", " ", 
   SuperscriptBox["v", "5"]}], "+", 
  RowBox[{"q", " ", 
   SuperscriptBox["v", "6"]}]}]], "Output",
 CellChangeTimes->{
  3.6464185674585247`*^9, 3.6464186239387555`*^9, 3.646418717527108*^9, {
   3.6464190805738735`*^9, 3.646419102147107*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{"Z", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "2"}], ",", 
     RowBox[{"1", "\[Rule]", "3"}], ",", 
     RowBox[{"1", "\[Rule]", "4"}], ",", 
     RowBox[{"1", "\[Rule]", "5"}], ",", 
     RowBox[{"2", "\[Rule]", "3"}], ",", 
     RowBox[{"2", "\[Rule]", "4"}], ",", 
     RowBox[{"2", "\[Rule]", "5"}], ",", 
     RowBox[{"3", "\[Rule]", "4"}], ",", 
     RowBox[{"3", "\[Rule]", "5"}], ",", 
     RowBox[{"4", "\[Rule]", "5"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6464191163959227`*^9, 3.6464191333728933`*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["q", "5"], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["q", "4"], " ", "v"}], "+", 
  RowBox[{"45", " ", 
   SuperscriptBox["q", "3"], " ", 
   SuperscriptBox["v", "2"]}], "+", 
  RowBox[{"110", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "3"]}], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["q", "3"], " ", 
   SuperscriptBox["v", "3"]}], "+", 
  RowBox[{"125", " ", "q", " ", 
   SuperscriptBox["v", "4"]}], "+", 
  RowBox[{"85", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "4"]}], "+", 
  RowBox[{"222", " ", "q", " ", 
   SuperscriptBox["v", "5"]}], "+", 
  RowBox[{"30", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "5"]}], "+", 
  RowBox[{"205", " ", "q", " ", 
   SuperscriptBox["v", "6"]}], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "6"]}], "+", 
  RowBox[{"120", " ", "q", " ", 
   SuperscriptBox["v", "7"]}], "+", 
  RowBox[{"45", " ", "q", " ", 
   SuperscriptBox["v", "8"]}], "+", 
  RowBox[{"10", " ", "q", " ", 
   SuperscriptBox["v", "9"]}], "+", 
  RowBox[{"q", " ", 
   SuperscriptBox["v", "10"]}]}]], "Output",
 CellChangeTimes->{
  3.6464191970465355`*^9, {3.6464196364196663`*^9, 3.6464196417989736`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"K5", "[", 
   RowBox[{"q_", ",", "v_"}], "]"}], ":=", 
  RowBox[{
   SuperscriptBox["q", "5"], "+", 
   RowBox[{"10", " ", 
    SuperscriptBox["q", "4"], " ", "v"}], "+", 
   RowBox[{"45", " ", 
    SuperscriptBox["q", "3"], " ", 
    SuperscriptBox["v", "2"]}], "+", 
   RowBox[{"110", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "3"]}], "+", 
   RowBox[{"10", " ", 
    SuperscriptBox["q", "3"], " ", 
    SuperscriptBox["v", "3"]}], "+", 
   RowBox[{"125", " ", "q", " ", 
    SuperscriptBox["v", "4"]}], "+", 
   RowBox[{"85", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "4"]}], "+", 
   RowBox[{"222", " ", "q", " ", 
    SuperscriptBox["v", "5"]}], "+", 
   RowBox[{"30", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "5"]}], "+", 
   RowBox[{"205", " ", "q", " ", 
    SuperscriptBox["v", "6"]}], "+", 
   RowBox[{"5", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "6"]}], "+", 
   RowBox[{"120", " ", "q", " ", 
    SuperscriptBox["v", "7"]}], "+", 
   RowBox[{"45", " ", "q", " ", 
    SuperscriptBox["v", "8"]}], "+", 
   RowBox[{"10", " ", "q", " ", 
    SuperscriptBox["v", "9"]}], "+", 
   RowBox[{"q", " ", 
    SuperscriptBox["v", "10"]}]}]}]], "Input",
 CellChangeTimes->{{3.6464198045002794`*^9, 3.646419826222522*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "4"}], ",", 
    RowBox[{"1", "\[Rule]", "5"}], ",", 
    RowBox[{"1", "\[Rule]", "6"}], ",", 
    RowBox[{"2", "\[Rule]", "4"}], ",", 
    RowBox[{"2", "\[Rule]", "5"}], ",", 
    RowBox[{"2", "\[Rule]", "6"}], ",", 
    RowBox[{"3", "\[Rule]", "4"}], ",", 
    RowBox[{"3", "\[Rule]", "5"}], ",", 
    RowBox[{"3", "\[Rule]", "6"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.646420001126526*^9, 3.6464200072058735`*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 4, 5, 6, 2, 
      3}, {{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 4}, {6, 2}, {6, 3}, {
       6, 4}}, Null}]], Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.03384563758389261], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$2", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$3", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$4", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$2", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$3", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$4", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$2", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$3", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$4", Automatic, Center]}]}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[
        DiskBox[{0., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
        "VertexID$1"], 
       TagBox[
        DiskBox[{0., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
        "VertexID$2"], 
       TagBox[
        DiskBox[{1., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
        "VertexID$3"], 
       TagBox[
        DiskBox[{2., 0.}, 0.02261146496815286], "DynamicName", BoxID -> 
        "VertexID$4"], 
       TagBox[
        DiskBox[{1., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
        "VertexID$5"], 
       TagBox[
        DiskBox[{2., 1.}, 0.02261146496815286], "DynamicName", BoxID -> 
        "VertexID$6"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{6.179999999999999, 352.82}, {-92.10719999999998, 
       86.02305225786358}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.64642000819493*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{"Z", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "4"}], ",", 
     RowBox[{"1", "\[Rule]", "5"}], ",", 
     RowBox[{"1", "\[Rule]", "6"}], ",", 
     RowBox[{"2", "\[Rule]", "4"}], ",", 
     RowBox[{"2", "\[Rule]", "5"}], ",", 
     RowBox[{"2", "\[Rule]", "6"}], ",", 
     RowBox[{"3", "\[Rule]", "4"}], ",", 
     RowBox[{"3", "\[Rule]", "5"}], ",", 
     RowBox[{"3", "\[Rule]", "6"}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.646419741312666*^9, 3.6464197748585844`*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["q", "6"], "+", 
  RowBox[{"9", " ", 
   SuperscriptBox["q", "5"], " ", "v"}], "+", 
  RowBox[{"36", " ", 
   SuperscriptBox["q", "4"], " ", 
   SuperscriptBox["v", "2"]}], "+", 
  RowBox[{"84", " ", 
   SuperscriptBox["q", "3"], " ", 
   SuperscriptBox["v", "3"]}], "+", 
  RowBox[{"117", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "4"]}], "+", 
  RowBox[{"9", " ", 
   SuperscriptBox["q", "3"], " ", 
   SuperscriptBox["v", "4"]}], "+", 
  RowBox[{"81", " ", "q", " ", 
   SuperscriptBox["v", "5"]}], "+", 
  RowBox[{"45", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "5"]}], "+", 
  RowBox[{"78", " ", "q", " ", 
   SuperscriptBox["v", "6"]}], "+", 
  RowBox[{"6", " ", 
   SuperscriptBox["q", "2"], " ", 
   SuperscriptBox["v", "6"]}], "+", 
  RowBox[{"36", " ", "q", " ", 
   SuperscriptBox["v", "7"]}], "+", 
  RowBox[{"9", " ", "q", " ", 
   SuperscriptBox["v", "8"]}], "+", 
  RowBox[{"q", " ", 
   SuperscriptBox["v", "9"]}]}]], "Output",
 CellChangeTimes->{3.64641977880781*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"K33", "[", 
   RowBox[{"q_", ",", "v_"}], "]"}], ":=", 
  RowBox[{
   SuperscriptBox["q", "6"], "+", 
   RowBox[{"9", " ", 
    SuperscriptBox["q", "5"], " ", "v"}], "+", 
   RowBox[{"36", " ", 
    SuperscriptBox["q", "4"], " ", 
    SuperscriptBox["v", "2"]}], "+", 
   RowBox[{"84", " ", 
    SuperscriptBox["q", "3"], " ", 
    SuperscriptBox["v", "3"]}], "+", 
   RowBox[{"117", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "4"]}], "+", 
   RowBox[{"9", " ", 
    SuperscriptBox["q", "3"], " ", 
    SuperscriptBox["v", "4"]}], "+", 
   RowBox[{"81", " ", "q", " ", 
    SuperscriptBox["v", "5"]}], "+", 
   RowBox[{"45", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "5"]}], "+", 
   RowBox[{"78", " ", "q", " ", 
    SuperscriptBox["v", "6"]}], "+", 
   RowBox[{"6", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "6"]}], "+", 
   RowBox[{"36", " ", "q", " ", 
    SuperscriptBox["v", "7"]}], "+", 
   RowBox[{"9", " ", "q", " ", 
    SuperscriptBox["v", "8"]}], "+", 
   RowBox[{"q", " ", 
    SuperscriptBox["v", "9"]}]}]}]], "Input",
 CellChangeTimes->{{3.6464198374711657`*^9, 3.6464198501158886`*^9}}],

Cell[BoxData[
 RowBox[{"Z2", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "2"}], ",", 
    RowBox[{"1", "\[Rule]", "3"}], ",", 
    RowBox[{"1", "\[Rule]", "4"}], ",", 
    RowBox[{"1", "\[Rule]", "5"}], ",", 
    RowBox[{"2", "\[Rule]", "3"}], ",", 
    RowBox[{"2", "\[Rule]", "4"}], ",", 
    RowBox[{"2", "\[Rule]", "5"}], ",", 
    RowBox[{"3", "\[Rule]", "4"}], ",", 
    RowBox[{"3", "\[Rule]", "5"}], ",", 
    RowBox[{"4", "\[Rule]", "5"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.646419665320319*^9, 3.6464196684644985`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"K33", "[", 
  RowBox[{"4", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6464200443029957`*^9, 3.6464200557886524`*^9}}],

Cell[BoxData["420"], "Output",
 CellChangeTimes->{3.646419676320948*^9, 3.646420056599699*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"v", "=", 
      RowBox[{"-", "1"}]}], ",", 
     RowBox[{"q", "=", "4"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"q", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"q", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}],
          ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
               ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
    RowBox[{"v", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"q", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}],
          ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
               ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
    RowBox[{"v", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"q", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}],
          ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
               ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
               ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
             "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                  ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
    RowBox[{"v", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"q", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}],
          ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
               ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
               ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"q", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
             "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                  ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
       RowBox[{"v", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"q", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
          "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
               ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
             "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"q", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["q", "2"], "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                  ")"}]}]}], ")"}]}]}], ")"}]}], "+", 
          RowBox[{"v", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"q", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
             "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
             "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                  ")"}]}]}], ")"}]}], "+", 
             RowBox[{"v", " ", 
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["q", "2"], "+", 
                RowBox[{"q", " ", "v"}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
                "+", 
                RowBox[{"v", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   SuperscriptBox["q", "2"], "+", 
                   RowBox[{"q", " ", "v"}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}], "+", 
                   RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["q", "2"], "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}], "+", 
                    RowBox[{"v", " ", 
                    RowBox[{"(", 
                    RowBox[{"q", "+", 
                    RowBox[{"q", " ", "v"}]}], ")"}]}]}], ")"}]}]}], 
                    ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], ")"}]}]}], 
      ")"}]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.646419224178087*^9, 3.646419240452018*^9}, 
   3.646421320548993*^9}],

Cell[BoxData["420"], "Output",
 CellChangeTimes->{{3.646419225300151*^9, 3.646419231024479*^9}, 
   3.6464213224361005`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Z", "[", 
  RowBox[{"3", "\[Rule]", "3"}], "]"}]], "Input",
 CellChangeTimes->{3.646417832345479*^9, 3.6464178775870667`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Rule", "::", "argr"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(Rule\\)\[NoBreak] called with 1 argument; \
\[NoBreak]\\!\\(2\\)\[NoBreak] arguments are expected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Rule\\\", ButtonNote -> \
\\\"Rule::argr\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.646417878010091*^9}],

Cell[BoxData[
 SuperscriptBox["q", "2"]], "Output",
 CellChangeTimes->{3.6464178780120907`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Conjunction", "[", 
  RowBox[{
   SuperscriptBox["q", "4"], "+", 
   RowBox[{"6", " ", 
    SuperscriptBox["q", "3"], " ", "v"}], "+", 
   RowBox[{"15", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "2"]}], "+", 
   RowBox[{"16", " ", "q", " ", 
    SuperscriptBox["v", "3"]}], "+", 
   RowBox[{"4", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "3"]}], "+", 
   RowBox[{"15", " ", "q", " ", 
    SuperscriptBox["v", "4"]}], "+", 
   RowBox[{"6", " ", "q", " ", 
    SuperscriptBox["v", "5"]}], "+", 
   RowBox[{"q", " ", 
    SuperscriptBox["v", "6"]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6464190140310674`*^9, 3.6464190344392347`*^9}}],

Cell[BoxData[
 RowBox[{"Conjunction", "[", 
  RowBox[{
   SuperscriptBox["q", "4"], "+", 
   RowBox[{"6", " ", 
    SuperscriptBox["q", "3"], " ", "v"}], "+", 
   RowBox[{"15", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "2"]}], "+", 
   RowBox[{"16", " ", "q", " ", 
    SuperscriptBox["v", "3"]}], "+", 
   RowBox[{"4", " ", 
    SuperscriptBox["q", "2"], " ", 
    SuperscriptBox["v", "3"]}], "+", 
   RowBox[{"15", " ", "q", " ", 
    SuperscriptBox["v", "4"]}], "+", 
   RowBox[{"6", " ", "q", " ", 
    SuperscriptBox["v", "5"]}], "+", 
   RowBox[{"q", " ", 
    SuperscriptBox["v", "6"]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.6464190177872825`*^9, 3.646419035342286*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"v", "=", 
      RowBox[{"-", "1"}]}], ",", 
     RowBox[{"q", "=", "5"}]}], "}"}], ",", 
   RowBox[{
    SuperscriptBox["q", "4"], "+", 
    RowBox[{"6", " ", 
     SuperscriptBox["q", "3"], " ", "v"}], "+", 
    RowBox[{"15", " ", 
     SuperscriptBox["q", "2"], " ", 
     SuperscriptBox["v", "2"]}], "+", 
    RowBox[{"16", " ", "q", " ", 
     SuperscriptBox["v", "3"]}], "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["q", "2"], " ", 
     SuperscriptBox["v", "3"]}], "+", 
    RowBox[{"15", " ", "q", " ", 
     SuperscriptBox["v", "4"]}], "+", 
    RowBox[{"6", " ", "q", " ", 
     SuperscriptBox["v", "5"]}], "+", 
    RowBox[{"q", " ", 
     SuperscriptBox["v", "6"]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6464188230311427`*^9, 3.646418869777817*^9}, {
   3.6464189232478747`*^9, 3.646419001453348*^9}, 3.646419043253739*^9}],

Cell[BoxData["120"], "Output",
 CellChangeTimes->{{3.646418984555382*^9, 3.646419002526409*^9}, 
   3.646419045147847*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"K33", "[", 
  RowBox[{"4", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6464199663885393`*^9, 3.6464199733079348`*^9}}],

Cell[BoxData["420"], "Output",
 CellChangeTimes->{3.6464199741259813`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"K33", "[", 
    RowBox[{"q", ",", "v"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"q", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", ",", 
     RowBox[{"-", "0.9"}], ",", 
     RowBox[{"-", "1.1"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.646419309782984*^9, 3.6464193564876547`*^9}, {
  3.6464193987780733`*^9, 3.6464194396934137`*^9}, {3.646419859677436*^9, 
  3.646419893029343*^9}, {3.64641992426613*^9, 3.646419940903082*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
qvq/66I64w03jdZKab3Vuxl4mIbrctT+49nUvhYqIUE0sUjgF66L5li/RZZ+
4P/R9uZRNX9f/H/zRKk0SMpQZGpAptB9Zc5QKQmhlJlIkigaUCpjUmbKnFmE
0L2mRMYGpbmkgeaZit/7457nOV/X773e67vW7+cfy8NZ57zu3vucs1/77H1e
q14/LaR6+fBVsNlGtpofGrN1iecLphfwa2/cTmefZnr5/Pt+kSq+vkTtzAMv
mF6SJ8ZkWehU801VExYK3jK9rFM8PDNcv5rv7SxnP07MjrZHHKlxRk3wA6Xx
VC+o09m7qP9jGw8WL8LvGhq63zfX1YPKH3LYNtyj7XUM0wviVy47nAfNvsv0
0sv3imudejU/oONs+prjuymPIHGwPXJ9lq6Q2EPlv8/DpPRY/7/10u/6Xus+
CVV/6eVm1No7raFV/L4zrrZPDv9J5a/wzpu7uL2KzyuwKjzgVEA54k6lhsdO
JOfkU73Mc14y0DK8il+88t0Ofg7TC/hbt4V+RhOMKV99JXrNsmX/8Htf3n1d
bUzlbJ0wKcTsYhU/sNLM/IjpeKqX5sAxP0OvV/EXWi9cFLuB6cWTxNOWtWv/
VN/M9IJ6KPX2XQ1Da5he5Mnv2pm0ReNsHtML5ODR6WHdApUAyhHH6/S9l5us
QQDLt6mzVvt6+p/n7/O+tN5hD+WIB5ooZBaUPGF60ShPi4yIq/pLL1f1h4pp
T/pbL6MVVZfVqVfxw8yU3ftYtlP5h0/sUXdaqYp/fu1EPdOMXMonxJnIiolV
8ZtdJt2xnpdL9VKUIZtjoVPFt+rn7fqmnumlkPD86BqPVzVML429J+k41VXy
Uw8kGk9xYnr5aFwxetiwKn4/972l16KZXra15l/bblbFt6gJcBpWw+KWwaTu
7I5ruLeeJ4tbHiDP31lf6lzAog1Uzvi9h5MiFtzayeR/jMQtXae5xzhvZ/I3
Xt7wrHhQFd9svbyaTY+9VJ4nFm6assf8bzmPOppxo+v7v/PNkJfbJTrko9oy
DRovRd6UcmqTm2OKigB5ZWjvs6s5tWxWDQ/yR76Wc3PGzbfe9Xzkm+FccsdJ
MfXLuu089IP2PpeujusxtprmoaF/mxQD8WqHdnoOi+c5cDGiMTddjANH+55V
Jz2fhzH9god+NDPq84rFS8FTF38fbzd7HJuP5HnWDF/wqY/KAKpftP8qSI+y
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
Z+cmmI8GG9sMyvawc5NTpN65hHMP/DCmlvaPuPel9TvlEgQKtH/M0wblqa2R
o6tpPyPJPG2JGHfJzZydv+BerBe9rA++7VZN+0c8XEbs+J4QCXn2HkHm7/Zf
HytVpCtpP5i/dyfNOLJb4xvlV0n9ac2L4Ktc8TfaP+Lkww34plvmydL+Ma8d
OhoD3zRX0H4mkXmdo9Rvlrca47i3yi5u3t2BqRW0f8TVVVtvubT9H/etod6t
Jufmm6dpzI9C/MRguUGL2VPGEd8wHhXddNKEyR/+gMHOcJv3Gez9C+9BH7R0
cufvZO9NiBtMfDOjQ3m8Ov29qBPxvB3sk9TzBx03iNy3czpYV2qZCeO4D4eb
HLXlZdV3yun3uJ8VT8pW+kGfE/EHz4kP717tpEbHRb2D+3vrDzfmttJ+cP+M
8ovN7bVirH/cD9PLKyRC6wlrj/4LI320phW10nERx7DhTh38VqRKx0V+/m3D
G4kPLjfTfjqT+1gubj+Sofa5heV5kvtSdr2Uf51/gXH0f3Gd5TvueQsdF/GQ
S2rrzu54pkLHRT551lT1rbWaLF6B+0m4yVu26n1kz4P7Q8TC7zavOck4+i/8
KD1ZJaGZjou4ytg93fYPjVOm4yL/We6NVtW84ywuEU7u5fi18kbsxk/seXBv
hr/sqy+65xhH/1zzNHN1fhMdF++D4WJzDBc6svdNvN9dz1Me7rqcvQ/ifW3b
DEPb8hD2fof3r5pHxbILn7D3NbxPjThnZj9Emb1/4f3IZ7n3y3QP9j6F95S6
m4FH4iukBPC3Ub/p/W7ToXHd2Dk+/T4s+e6kKA8gHH41+vH7dn722P/VVxKO
fTZdrMvo/ns3cNTfIH54+7KId60b2PsI4oeN799PmTuinnLcZyV5ZGrvbbLM
T8b9S9eGVTxQecv8VdwXtDZmb1fDS8z/xP02+S9bDoScYv4k7l0Zflb23eIb
zD9EnnOP1J5pNdnM38O9Ez1OLTVz0y2lHHmVtx+Omt91C/PHUHev3zNnhXYV
86+QxyV11vJCohfzl1B3vO/NhD0jNAopRz7P5F0d1ZsP5fGhX8RpJSuys74N
Yv4A/If9J4rcdb6zfR9x1DCtd0lqxeq0Pe5Jc44aWlv3lq1vaM8t1hesucLW
McRXXa3kciefU6P94B4wE1vziW6RbL1C+xv2ey0+bvxO+0Hctfvk03ljN3al
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
E/8DXVZQTA==
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxFnXXcFcXbxs85e86e3bO7R0FURFTABAwEDOwOxA5sBQUVBbsxQBEDu7s7
QURKFFQEUQzCLlRUFLvzvb7PNe/n98fzzL1zZmZndyfu+7pjOvY/do8hlVKp
dHSjVIqU/pCUSjeWS6Xt66XS3aKX14/3id4sLZVWVf6Tcal0VrVUaqv8VXT9
qH7ronSC8h8R3Vn0ONF7q7EOKrOGrvcUvZLo1UX3ylRH99lU9/ta7XTUXwf9
7a97VVXmWrVxgOgVRD8gemfVrYteXnX3U/7XSocr/0b9tRd9v+61k8rEKtNO
1y+p3VuUd3qzVJop+lbRZ4ieJXoj3fcvPceLom9S/mnKX0/9eUj5GytvA9HL
qd2Zyl+odDe196XKFWp7RdF7q9xNyl9B9EPKv0N0B9GPiV5CZVYSvY/K3Kn8
jqKfUP6randj5f2t+26rfn6r/Kb+btSzfKX0XJX9R2WGq8w3uv+/os8T/a3o
v0W/qzauUn/eVLmtVf4tXY8VvbboZ0UPUJt76N5b6fow0buL3lL0sbrf9Xqv
g5U+qfJrKe8ZlT+iEK38ROk7yt9e+R8q/13RO4j+WPTWamex6EJ/a6i9NZUO
UJ8uVZmlRN+uMoPVxkLRDf1tqHtkSq9V/m16rorqXK2yF+hvCeXfoPyRopcU
fbPon5W20t92avNXpa0Zb6IvU5k2ou9UmdXURlfRhyv/K91rBf2119/Guldb
5d+jMifr+j/Ry+rveb2r9VX2N/0+VfR6tC36h9Tv/1Tl9VP7P4k+TXUPVd3f
dI//dD1CZeapjRP0+xz1/xnRh4reS2V+VZkfGTd6Jw8xHkTvqt8WKj1G7XRQ
3U9FHyX6ROWXVGYkz6jyt4n+TFn9VOYe0TszptTmL2rzc+X/rjIPKP8L0Ycp
/23RZf2tr/w3lP6r/JeV/qG0vf6OUP3flJ6t9r/Q8+wlekmlRyr/d9HnMB5E
/yp6KHNAdFX1LxU9Tekvym+rv57qzz9Kz+e7K7+iv9Xpj559tujBqrev+vOc
6J8Ziyq/ptLjda81RD/CnGYMqp8TRP+g3/bW9SKlx6nNfxOvD/cq71PV6a38
utJP9Lej6Fjpw3WvB2NV/prU68NDyjtT9/1T9Gr6bZfI6w/rzgTVuVpl39Jc
uL3uufaIrp9V/nVKpyp/09Rr0mhdb5R6XNwl+vLU68P1qveWyt/L+1D5Bfo9
1l9X+qf7jhH9jeh9VO5rnlflMuU39LdY1+uqne+Vnqz8X/SM41T+AOaQ8vuI
/lz5p+o6En2J6IW6154qv4TSd/S3DcND6RkqU1OZy1TmA10/qPQc9ec90duq
TEXpR7wj5Z+r/KPV/hXqw1FKH9V9d9azvKI2ttH15mpnrsp1T/0dThV9ktaO
g/X7eNU9SPO8FWMu1/PofR6jugeoTtvc6Q/6/STlswkcWPa6srboI9XWU2pj
YMnrxr51v4OTRL+mOrOUrqv2xyn/iJLXoruU/7X68aPyB9Tcxl5Kb9eztBN9
pPq1lu51XxjzTyh/FPNG5Uez/irvapUZI3pD0deJflz0RSpzgsrcx/hT/hnK
v1f0Wcofovz+dY/tM3S9W91zdIjoNSPPO+bq7sr/Sumxyu9b93c+kfVK7Swn
eqDanK6+n693dYTSV5W+pvrr6l28qt8Gq8yZKtux4bXwV6VvK/8k0cNFH6yy
61Vc7lM984lK31H7F+qdzFZb+yl9VX8zlbeC+tyh4bXt54bX4O1U9xRdt6Mt
5qLKdmr4/b8u+rOa7/Uec1b3PVn0efq9dcN7ztcNr5edK253tuq8rLLdml6/
u1bc7znKf035KzW9J6xZ8ff7WO0fo/RN/faR6KMZq3oPF+tex+l9TVD5x5T2
L3l/X0r36yt6htp7v+Z7zoi9/6+iNg/j+9adTgj8wMrK76frVg3vpYuUfqW/
8fr9fPbi1GveBbo+qu51b5joK1T3c9W9lPVC5a9S3ikq/4Xe63LwIqSq+6XK
9Nb82F19nsE85j7KH8UexZ6cej0+WvX3UJlZovdTmV8a/l7zlddH9S9X+Y1V
fhmV/0Rtbqe8Y/SMFzHfle6pcq+o/P6q91vD34WxMF11Ni77/T6gOj1Vd4Ly
PhL9F/NL6UF6ll6i11O5LdV+d/YulR9R9VhbV9eLRa+qv1X0d4DKb6j8nsr/
Tted9beG/l5Uuxsp71XWQNEblD22poheX/R00aNUrrfqbqbrvdS/zfXbOL23
1dXmzcpboH4P1vNcJ/pApRuqf8NFd2FNU/nJ+n0nPd8Oop8R3Uf0d+wR9F/p
dsqfoPwdlN+nar6RvfDixHvfjmrnYJXZSenTuu8Fuu/LqnuufnsAPkd9PE75
T4q+gnVL9MEaT0urrd+1PvVW3bVVd4zy99C7Ood9Cj5I+furvw+q7M6ip+qe
u6mNzXXfkSqzLvus6KtFbyG6r8q8rjIHq8zuyr+Gd6/8+3Xdmb1Sv2+m/AuU
3035W7IGKX8reDfRj4neTPRS6sNL6v86Krup8ldQ2YfVtzV0fYbqdtD15spf
SekjrGl1z8mJerY/6l5vfxN9QVhrL2dvZewzr/V7Q8+8l/KvY69g3JU9tg4S
vWfZfOEHsef+Syq/E7yh6B/1Lg5QmT3K5iPf1nseoOt94YfVn15lr1c38430
d5Z++54xR3tq5zrlXau/w5XfRn3YH55N5T/IPMbOFz0v87g6V/R81T1edZ9j
n8zMl17Kesg6rfxpyt9Q32YntfeJft877AXsCSfoPsfr7xt499xrwvMqs4HK
byD6NeaR/jYse228S2U6Kn+a8uZknjfnKP9bld9I+W8or5PaPVbPfKSuW6v8
fipzltJd1J8bdd9f9Huu36OKecdM19tH7sOJudft2Wqnm8rvwhqo33vEXlfn
i747My/xpu57ivp+UpVNWv3PLJe8rfzb1c6KypuqvHc1Hgr2VMaFyp6uvxrl
lbej/r5jrKjdlWru81HK21PpLso/RvTeoncVPU90H9E7ib5GbVwVvlElt2xy
DbyV+nklcpva+kr0MPoMbxB7LCxS/uWqd1nV3+OnzPvNFapbyn2fq+E3Yu8/
M5FvVOcI3XtXlf8zM29zqsp+AT+iMnNVpnvsNXyeym6lctuWvYYernqbBHlk
VuJ1e3ul10Zen1lbt1JfFom+QvTK+u00pSuqzX1Sr/EbiR5b9drL2r2zylyp
dFPlT1I7t4R1ppPyTxW9vPK3U/nvKp7b+6udxbxP/b6t8r+teC1opTFzE7/r
mc5TO08p/2RdL4mspee5VXP2RNW9jTGq9Bel6+mvp/7uZI6wh6p879Rj7FfV
OVJtrqvfMqWJ2vmBMad2Ftc9l7/TdSvl36H+dtA7XEL0H8q7RWVai75T+Ssr
v43oiurcofylMhhS9UN0b7W9mvp6g9o6CB6PtUDPtQfvVHlbq1xd32BzlZmr
64syy2IT9U0vibxWs6bHmcdJpHudzNxQ/mfKO73wd/5cdFu1c0jkefhd4TH5
hfIvVd7ros9TO/0izztkzAvVt5H66848VH6PsNf0Ut/Oh7dgjxI9QvQ6oudX
vMa+qn7smXof6Mw+rzY21d8m+ttC5S9Ufg/lX642P1WdS1ivE++/68HHZR5f
o/SMXZQ/FJ5D+VMqXoefZQ2seC+YLbqzypwpupPKTE+8B3VTOlnp6cqfojKP
V722s8e8UXhfXVHv/4HYPPnFqntfbB7+QvhH3Xtf0W2U/tHw+rYK65L+9hO9
tNIxdfNek1TvvKp5gB66vjH1nj5Zvz9T997+gso8X/e6B9+2RWpeYKroF+pe
w+G5f2iYB1tR6e8N824rK/2pYf7rEvV5n8i8B7zFN4nHeQelB1c895nnb9e9
v7yPTFX3/IW3PKJmHGAfpZ+qziDGCVhLzXjCzvptoNofWPG6UEnNY8xC9k3N
w4yvmx9GTkE+2S71Gvap2q+LPkz5H6nMjw3zhysp/bzu9W8h2EJY/1hrvql7
71uMbFXxnGLfOlL92Vt0X6Vf1733faMyO6be934W3bHmucx+VtKzHKr0X3hy
tXMQa6CyGyo/lHURHIZ+K/8vZDeVP0/5vyvvP/0dovx/kDf0XOdUPP+vgJ9l
HVY7R+le/UXvyzqs8ruLXqTyy2ms1nT9jr7LSqIT0TNEH1vxGs563VH5tyFf
6j0sW7OstwVro/JvV3535a8uuqm696huV9F3K3995a8qOlf+3fDzovdT/Qc0
fjuLXkL59yp/Vz3jCWpvGV3nFeNmYAfV1HjR68p/o+45PU99vjkzJjND7a+t
6x2QQXiXonuJPgs8KTZm85ryH8qMj32IzJpZNv9Y9ITM/A98fs/Y8sJbKv9X
2TgSWMCGsWUHZIiJmecLskyv2PLKB8p/OnZ/b9V9b8iMHU1XmTVjY0izVeaD
gPN8pvQ4vb9j9feFyjUCdogc/k/Z+BJ4xI2x8aLT1Ob1sfGiU0T/UDY+xzz/
qWz8ivl/R2z88Gy+gcbAlvp7Cx4uc/nn4H80ZjJkbKWrViwLMb43ii3Hfah+
rlWx3MW8Ha4+Dquab7hBa3Ki9Cn4LJU/CPkR3jw37zCW+6jt9gEPqWfm/Wr8
Lvpr1bmeuV8xPwYf9r76sYTqHKd0HjxB2TJppuub9Xt/pXuFvRp+7mO1Vdb1
E8jphXmcx0W3qRjnZL1bV/nL6XqK8j9JvdYtVNqz8D4wS/lTYpe9B/xHbbZT
/rPwian3B2TMdSrGGlg3b8n9ncYh78ceF1fWzRuCH7PeLVMxpsr9ztY7G1p1
Pz5K/T0/T70O8l7fRCbNvM7Bu35eM8/MWndj5jF8svKfUZ1j4KmUvpMbz9xN
dWfUjD+AI2+q9/eO8nvq+tLM4+RE8OPE33+6yr5UM3YBprxcGHeblozxfFi2
jHFF5vF2UsPjjHbANRh/5IODvKx2NhP9V+JxzHh+X2m7ujHzJZU/qWKeB3ms
fd2ySWvlP10zxgI2OAi+lDVJ94rVnyfKLaxe6ZbMY/iUhscxNLI0WO6XZd+7
ERmX3iLMc94VstnMmmnwdDDF98vGYp4rjLF11tj7pXDdn9Xn7dTOotBOd9Vd
V3/TdJ9c6fSqcfxnU19PUXpv5LkDPn557vTd3Jg5c3JrtbNxmHM9RJ9Xd9s3
JMar4am3Knkufh/m7+2J818Fjwkyx5Z8x9z49h6F5/ePYY7/nvo7srb0St3/
YXWvL6wz4HQvwt/qb37ZPAH1wLQPjM1HxMh6qccP6yfrI+skWB58A/0CD2cN
+63sdllr/yi7HOvin2FtnFYY4+yid3tC7nuO4hvm5ls2E31QbH6nrrS9+nWj
xsdA/baq7nuqrofpuq9+e6JE59R+7t/bMT8q3hNZR06qeI+DR9wtNr/6u9rY
PTaP+ofoNVR3MN9ddX+PLb9+qWf6M/Zeukj0irn31pvAp8FBlP+36u4rerTo
stKHdK8hZcvYad1739/wGKp7lPI7sP7UPcZX0ze8o+J85sA9+o536+865S2n
8kcqf0WVvwkcq2xdzqrKP0b0aspfUu3cBd+rdvbRvR8X/Z/6c5fKDyp7/mR1
77P/sterzNWivxO9ZG5+v63auUv3vCPc91nlP43Mo/R5/U1AVlc6J/DI4EoH
q53nYDuUbpybL91C7TypMieVjZv0yE33RP4VfYroDcGWVGZY2RjW+rlllPXZ
V/U9x+i3E3W9v9p9mudS+kzudrdS2kllZgWM5fmK+d6pjLG6eYaa3sODeo77
9fe4fu+Sm4e5BV2Z8m4J+EC5br7mh7qfj76BB82rmLcH/zpU957OmqF05bq/
53Jq/wm18Zj+Zqjsurl5j+7sUaKfUN4WyB+F77+56P6xZYIitl5mMrwP66zK
jAfXa1qn0wz7LfIUY3WV3DIUY3j13Dog5vNVmfVu7PV3ZNb9Ma9uC/o1+N4f
MuPt8EIPiB6ge/SEB82M1cMzIN8jN8Fbxrn3XHjRJDfvCh7yAtiArs/Xs4xR
2o33yD4u+nG12QNZjecWvb7oPXOvj6yTo0RvpPKjVf5p0Q/AI7Keid5E+eOU
P0H0g03z8fNFr638G5T/pOi7mt7Le4r+R/04mr2bhR6ZRHRXvb9fdK/f2UcL
yw7gJ+Atz2XmJW7LLUeA88zIjIm16JIyY5vIHe9lxkiRTd4JOAwy/oOquyAz
RrFRYbkM7OKx3HIj8uMjubF99ozrM2P46LDOEn24fvtXZeYwz/T3n+hNC2M6
yJj3Km+Urntrvt5aWI/wteoenRm3X8QeJ3p0Zmzn2tz6JviERzPLaPBakzLL
aGCzMzPLaPAek0Wf1bR+aK/C+in4nEcy627gPeBJDtDfrfCshfVu8HVPZ+bP
WUNW0n3XVDv36FvclFufizz1HdgkOoTIOsX/UutGr8itz0SvuYzyj8ms3xuk
ehML6yWWaRr/frLs38bXvKej45tUWA+zLDostbmC8t9WOji3Pu4EtTdZ5Tso
/zf16U+lY8sut7/uOb7s35ZVO/1V7wu184zKdyxZJ4i+6GmeizVKv08UfRBr
e2Gd4Klqf1fRk7iX0mcK616WUzuHqFwn1btM971Vz/1PxeWOVd+mKD1Fdach
n0a+7qH0Weay6qwneip7V8k6UO5LW+hGyV9N9LWJyz+r/p6WWW85RO9tMvrK
yDo59JnPl/3bc8rvFVm/y7ieXjafNLVmvgzd6DF16wDBo5+rma9Bfzew7jbQ
MzFmXyhbV3S27ttF6bG677SaaXR5ddbFsnWl52Zu87iGdYyzyr6eUlin0U7v
6tOgV31XaTe1sw68kPq7u8rMUfmTAxb+mui1Ve4Z0S9E1tEOEP260nWU/3zN
6R96Ny+I7layrnRXlV2iZl3qRN3jcNU5TOn6+nuTb6LnO15/61JedY/PrXce
yVpSNZ7UXb9tFrk85SarbqI2JyndOTUvUVcbO+bGdnZS3f9Ud2/2aXhBlb1B
9XKVPUXtnKvxcJOuf607Haf7np1bpm6VG6sFs0VmXqVm/gVZ5Tddj1LaT+VP
VDsjlH+LrndK3eYv8AuJ838Dv1Rbw8FzWIuU3051zkis62Stvkx1l8+Nw98Y
1oylK5YvWAOWqliGeT61rDFQ6Uylr0bWbSPjtq4YI641LCM/r+81vTDev1bT
MvGSFeOkyEK0h03IS2rrErV1pNK76paLsSF5qTBWtHbTMhV9+ZjnC/sL+8w7
kfW4YBM3qY2zK36/7Ovs72CIn+XGKg8ojF/Cs9wXeCB4IbDFv/SO7he5RGps
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
2A9UjXmOK1l/A4bdqBvLpf/0G4wbrBsbmM0bxqjB9ldJ3BfsW8D7n61YxwCW
PLVi3B9d0MSK68dBB4HN3BYNY/5gzhNz9x9M8cNgJ/MB/Ya3Ef1hybIOshzy
PPL4cpFtqJCtoZHVea/0mz7fGMoj740O+SeGOXRnmEd7qv3OkW3dd409DhmP
2AeSD/9xdmIMv1C6d+y5wxw6IIxhxvKwxBh4x8T8BHzFgpJxbvDul0TvGHu8
Me6wOYLfgtdKa9YbteiMEtvCYOeI3hU780NKtgehHTDzEYltlLADHabnX5L1
PzXvRpvzdb1z1TaU9GFC4HNUpTQyaWFLSk/UbPMFBrubrls3Pa/BYo/OPUfg
97DJwjarN3x2ZHsadKjYwl1U9XzHvob8Tcu2/xwZaOzkkL/uUHu9CvMepxXG
FS4NZWjj4qptTrDDw/6rCg5c9b25L3nQp8NXxMYFwQ6xVbko1J0buZ+U3bjw
+nBxw/syNmmbKV2xZv4b3nqTwuvHu3ruLQvfZ7Pgd3JN4P/4w+YQPpAUG8S+
ZT8/zzhI+W9FzqfsT1WXo8yZhW1RtlJ6Z8M2+cfr+co145s8A9jmfuCrSp9V
O7tWbfu1e+CfGZNrRL6Ghofdp+q9b5eqy3/Hfl31NTT1dg+8Nzw1GBd8Nf4c
/Kbbl/aoetzTJvl7BLpNYZp1vmUfqFrHsXTh+8IDH5Z5LxzJ/Ct8z2WC/f4B
AZMFf4XPhm+mXt/QZ25OPvtWObO9ze+Z6xxYNZbLHsxe3K5w3kH6+5s1uupr
6Ocj51MPPczBoZ/sWdDU7dEwn4l+bfvY3xy5Ct0/369UeL+Ow9p+ROK9Hv8b
MMZE+cfl1oGgb8ZebVGgt1C5wYl9uW6oW8ZFxkZOxi76HP11KxuPpB0wSXiB
OyLv7ZVQHjvPoxP7MI2o214BvOiT3Dg5fTtG6bGJ/VDwR8EWdMnIdv5r14x1
rA9vl5hnwe8HuyrKYFt1QmLbLWy4sHVaKrK9E/gE2AQ4wtax91z23uVDPvYb
Jye2t8HuBns86iILIKuyz2JvybOeG54Xu4uWZ1faumZcA0wDH7pT+UYqs05s
bAAsoVkzXsA1v58WymDPAVbwYe71iXVqubJxYnxvwIprIZ+1C7yBdrB/Je+M
UH7twr/nYJ+R86kHFnFKwCOwIeHeaxbGQshH34G9C+svay/p8HDfP0M+NPge
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
POYFMSKJwcE6+X/4p9DF
         "]], Polygon3DBox[CompressedData["
1:eJxFnXf8lfP7x+9z7nPuc849jpBSRiIj66uSHcqqiCTZUUJEGZEtZUXI3skm
aVGpRNlpWMlIRotIZG+/17PX/Xj8/rjrfb2v9/2+x3nf1/sar+v6NO89oFv/
YhAEaSUISvr/WP3/XCEI/lR7SBQEA+Ig2Fbtl8tq14PgkGoQfKMTtgyD4Gq1
12RBcJzG/6HzjhR/+0TjRDcS7wTRx6j/WfiaY7Dmq6ZBcIToQ9S+W/zTNf4b
8TYS3Q9a19tI9PO63pmiT6oFgVjBozqnl9qP6Pxjde2nNP+r4vfT+d+Kv3Hk
8TtoTFkPskp956qvoPEDdL9f6T7uEv8FzTtFcx2jMZuIf6nm2UjzPaDxv4n3
jfqGqH2Ozlmpcy4Sf0Pxb1LfD+L30Pz76ty/dOwu/jm6/g/ibarzztL8W4uv
RwjG6BrbqN1dY55R+1f1XaIxzTXfZM3dXHNeqfbX4p8t+gSN+V38vjq5qcZO
Kft9fCP+ueL35DcR/3zxdxd/tvjni3+Fnm+I+L9r3H2i99D9DNLYzTX3SaK7
qf9p0b/onIt0/mD1b6ZrP6dzNlP7N2jxZuh5huh+Dxf9g3ifi35M9M8653rx
W4vuJPrLiun/ie4oeg8dm6p9qPp20thXRK+neztedFvRu4puKv4+orcV3U70
5qJPEL2L6F803z1qt1HfweJtKHpPtffQ0VV0TffzpPi7cg3Rv+h511W7mfq+
E32Zjvm632fVd7naRa3HrdXuoPZHev4bdf7/9Lw/avzxmnsHvb9dxD9E/I/F
r1Q8N31d1Peb5l9f7eYa/6vaF6vvGdGh5uijud5jnfEs6ttPvE3UNyXwPR8u
+ifRv+h+9AqCH9X+UXP8onP76byGut7bGvM/Md/Xb3K0+JfpfluIvo93qnvr
ovt5SLwjS17vW+j4U+draPAc71V0R/HWqK+Z2q3EeF28fdTXXfRsztG4u9XX
RddcoGO7ku93f/GWir5EvB1FHyj6NR0baPxJvGPxVrJ+xdOtBl+rvZHu6US1
F6r9nTq30v//6Nor1Xe47vUP3q/as3TOteIdor6HC37nw8W7qOa1xju8hPl0
fC16iugr1L5VY3bV2P80R39+e72PEeL1E+8T5IH+76rxt+R9x2l9L9XYDXWv
p4u/Sv930/WO05hv9RzjdYzi29Oc12rudTXfwTq3Md+Wxl+gOUbr/MfUN0jt
/jruRvBpfC+Nn6t72FfnnyT6GdFddXyvuT/TmEc0doXmOVT8I1hzVf8+f2js
15riLPE66XojNfY89X+q652r/x8UXdCY3vzeOjZR+z6dn1a9vqYiL/L3c1bs
tTejbHnyJOfremvUd4Hm/1PrqbHG7iT6D7Xf5PvT2GGiDxL/Z55Z7Rc05krx
Jog3Te0ZodfjDzqQ91PVN1j8q3S0ED1T9DU1z8ncLTTXPrr+76I3EG9H5F8+
/iXRL3Igg2p+lsfz98n7pV3U9U7WtTrofdwleoD6F2m+bfX79dfzbCDe8aIj
zT+Q31fzR+INrXluvpH5NV8DOtT/zfjNo7U/VfCT/tlM/MX6vXrp/CM15w/i
ZZr3AdGbin85e0Tk/WJ39c3Q2Ibqe0LtCZrjaPGG6n2fr/ZyzX+T7qep7uca
8f/U2PtFbyL6OtF/iX5AdFuNf1jjG1R8/7uIfkT0ehXvd+/oeU8VPUn0NaI7
iD9R9Baie4s+WPO9ovlm8X3qeY8VvVj0O6KPEv2R7qOJ6EtLlp936PzbeN6y
98uHdf892S815hG1x+p6v4k+TfO3E/9VvZOGGruDjtHqe1DzH6Xnf0xjh4h/
s+a7SuNXiX+76CGiB4peJvpG0TeJHhr4W7pNdNfY97qz5jpF9F+Rf6vrdf1/
1Hel+OeJXqrxw8X/N/L93sQi0zVjHfeqfYXu4UXWpo5HRI8Tu4fG7qb7e1j0
WGSonn/n1OuJdfWw5ttV9Cjkh/i7i38j70i/9UD2RfFb6/oPipeIPk50K9Ej
RddEHyv6Lb2f3qLHih4q+h9d81bRwzXnf+pbX/fzmNrjef98P3qOy0TfU7L8
nKvzTxZvvMZerfP30v2MLvo3ba97+ZV3IHqQnm+q5rpC47fVHOeiG9StTxyO
vqEx36j/HPUvEL2Pxt/JfqLxp2muyeq/VuMnR77fzTV+jPqmRr5+C96B6H10
zidqv62+PuK9qudtoPmuFe9Anf+hrrGe+M3Ut7P4b+h+54h+Q+NfV3u8+o5W
e331PaRzpusZdtDYF9R/JfqW7udrPfvtovcTPU6/w6Eae4jGLFPfy7reOmpf
o3MPEP/W2PrAal33TtGH6xpzNf5N9gfNPVbnHKX2uuobpXM+Vt9uPH/k9fZv
Ynl6oZ5rhug3eA6NPUh9izXmatGr1U7YQzXmpcjva3uNeU68RTp/d/H3jfz9
jtf9h6IHidde9IzI3+O2yGv1fab73E7t7TVmD/Ee4btUXzcdX+hZ99Y1PhJ/
vs45WfyF6m+APNH4NqJf0/V2VfuNyOvhU/G3Fn9b9e2mvnX1PrZifWveq8T/
WPymolsUrO+wv56tvv46dkK3yKwbnqLxe2n8YvW31PjtNH53jR8n/j98fzXL
41d1/V3Eey3yeh4h+hPR5+v885APGrda53+qc/pqzAeary56E41pLXq8+KeJ
PgadUHSJ31P0SJ0/mP1Kv19N7/p0vYd9RU/R/C01dpLGXo780/mNtD5W6Lha
fa3R99ReVvL+9ISOI/j++IY0Z6j5M7XvV/sKnT9a/O58r+q7V303im4p+jNd
4yLRN4jeRvSn+W/4iu7/bbX7aP4txHtR10v5DXVcxRrU+7lUcx3NGtG9rtFx
oNoHRpZvd+v//dm78jU7VMcqtQ9iD9Yz3if+Aehq+Td0Br+HrhWpfbTObxdb
9jStWJ/+R/wrdL2fRb8heoLe19CibaBM156j+/pa7bhgfbe3zl8P+VO2vtIj
9rexi649nv0VHVtjh2m+C1lPkfej4zXnR+q7m99B9EqNuUft7zRPH/FuLXm/
f0v0V+KdKbql6Im6n6vEP159dd3P/TqWqH2p5rpA838v+gDRB0SW70ew5nXu
nzq20ZhvxO+h899X+9Zcv2I/OA/9Sn1DqrZdpquvLN4S9fUVbwA2hXh76fwL
Nf8WavfS+U9p/mmi/w28XlqI30/0OlXL62uqtiU/RiaJ/13k/el8zblKc2+u
8WfwLFXL8/l63l8KlnnbMxYdTOe/hQ2Lbqbxw8RrX/V+1UH0pfwWVe+/v4s+
WHTHyPJqga5xlK7VVX1fsX51vz9qvmWa7wzRH0fe347WmA80dmHFshyZvpL9
S/O+U/Q9DFV7UeT99Fj1faixnXS9q5E14vXR9a6rWjddrjGdxH8XQ0FjB6Lz
6NwX9PtNFP28uqerfan6mqj9asEy4i/kLLJU449AtqnvtYJl3vWiO8bWJ9vo
OuN0vcsj25OvF6wjnKjjhYJ17ls0ZqvUe3VB7ZEaP1j3+5b4Z2CXij5I/Ono
Tpqjo3hbatwLol9kjWKza9wcjY903Cx6rN5fW/H3Ef0+tpL4c9Wu6LhF9HWx
7Y+v9BwjsJc1/0nidRPvQWjN/6LOf0ljTlBfH2SA+EUd14meLv5T4t2tMS+o
/bfmuUvtU8TvLv6FuseX1T5Z5/XHPhb9O/tpZP/FFZH9C29qTF+Naanrj9D5
Rc01SvyH0OHF/1P8m7Bv9Dy/qn0DvgDx79V8ZeyLyPb327r+b6LX1bGD+saI
v5naz2Bnsf40/7NF/yYHijcCOaJzuur4DJ2Y30T87jpntc55QPdxGEsCmYx+
oHEFtRsXbF8/yG8s/u+ib9S5Nc0/SPzV2NG63t6xdamNK/7+1uj/i8XvrfEF
tbfRnDNFz9SYnprrHc3/h3jr6dhR9IGabyrvFntC93tTZP/PF+JfrPO/R06J
30v0f9gjNd/LcK6j692TeOwlogfm/hts2f90TFa7Wy5vsFlPimwP/8b3E1jf
31Pn3R7ax4Svqaq+haLPEL1U9Fs6bhX9lehOah9d9rPxjO3U3kzy+W9sMc2z
t65/fWbboC/6s9qH6Ple09h9WX+i56S+3lzm1vhh6uvIt8K6Uvsg9d9U8DXn
qP2h7mdX8XZBxoq+IfP1T1ffPWpPUF/f0DIR2VhMTE/ETtf8ZZ3/vujDxS+p
neCHCL2HrEAm8o51/y+p7xfRn+v8juLNVn8z9o+y74++PdU+quznwwbaS+1J
qe0f7KA36/aJ4BuZrTl76X3/lNq+R/dYKP6h7DG61nY6bqjanzJR/Hmao23V
+hP64Q5F2zToo+g66DzoxNjw2PIfYYNE1l/RF7YsWudenFifQ6/btG4bE1vz
A425Wu0Pxd9X/JfF36RuHxS+qPn4w3T9D8Tfm/Uq/sbYw4xDP9OYuzT2DvyW
ot8SfWvN+sfGOjdV333IgMT+TPyajXX+WYn9kfglG2GP4s8KLcOR5eirfL8N
RT+M71L0lqI3RqZp/kt1jMXXhI9D489LvL+1wXeV6zfoWuhcD1SsbzcX3Uj0
o9goev+fq91ev9UtWi8nJLbvN6/ZP7RE/WfrXfbWPY1lD0vsv8OPt4H4F/Ib
in+/+G+L31jnLee3Q+cR/XTi75nvetu6/VV7c3+65hdl61sl9Fcds9ChIuuX
zxfsczhT9ArR92jOeVXvH9iX4wr2SSI/kacTCvbRfiC6Pftb0ff7lZ5vEns3
crru/XP/gn9jbMTxieUZcm075KnGd9O1Fmn89qKX6/8Jof0x32tMW+Qn/ib1
zxP/66pp/Cm/iv96Yn0ZvXmnuvdf9JsORdu06FPog/sXbeO/kVj/xw5oVff+
iv6Nj3Zy2foneyl76syy5R/yfnbBPvDJuv7ZoW0+bL/Rur/DWI/sw5qvu8b0
xb+mvj5qb6PfuJ/WS2v1/VKzjXGM2hsUbXuwB3QW/XfBewPvk9++m/jvVrxO
WC/oNJ3KllvIL3SajmXvhxeGtrGxtfFPnYGtxPNyT+q7LrRN1lrtlfyGgcfg
v+pTs+5Y03xXaHxT/HOhfXRNkM2a79zQOiU+/u/1vF+x9thTUvvzVuZ0Z2z7
xPovenDLun3m+M6Z43nxlyW2Jw/Qec3FTxO/zylV69NV/X9awc/0Qi7/9hS9
n+a5V+9yY/UNFD1Y/FlV+7jwdU0uWF5iH+7It1m0TR2K/57G/iv6S83xeM2+
7c90T40i8wcElsnI5oeQSeJ/qfGN1H6nYv8jcyCvT9Q9fCX+htgjahcYI15r
jfkcX5v23wRbsGb7eXTN9jQ+tQGa63MdncVfoHMq4t2pY574rYoYTXpn7Alq
FvDZIls13+sa+6eebT7+sprPPZj9omz/K3xsJGwl/PmvhI5xEOs4O/JcY0Uf
qWuPQu6LfkPnr6/2HPxGBT9DUfSXqf1P+KHe0fWeF38n8eeHvj/0+RW5f/wE
fBzIE9HjNaaH6J56J8tL3oNH694botPr3MUl26N3oH+VHBPgHf1Uc5s4wYd1
vyPeFT7OXdR3e8WxhWai9xL9aOQ2MYc9RV9ZcWyBOXfHF6njXbU7F/089/P7
iz656Pc9Tc9VZb3j0xR9i47Z/J7i/6t392jNvt7FfKPoY+zXJduYsdr38ntz
79i3NdsLS0r2SY5DpmGfBn4n27M/6ZhLvELjb69Z3vLusKGx6XmH0MQc2EPw
92JLYzN2Fm+S5vw7tM99S/HOj8zD5m7F+XrfS0vWGUbpfR8pOtK1bhbvsrrj
QsSHkKnoF3/pmB3aZsR2xF/Ab3Or6MPE24lvqmCZ8XpuH2NrYXNdz+9ds397
uK73G2s5s38bP/enub2Nf+gn5qj49+Z7+Kbg32eI+r5V+3WdcyPvr+JY0BYl
76//6p7GiB6i67+M7NLH8F7Ba2EjzT81zeNnPIfogTXbQn2wMarW3xuq/Q/2
RsXrZUPso6LXDz5vfN/3qG9N1fr0+mr/hf2i8TOrli3o7JvyLhLbN9g5TXW9
ixLbI9glTeqOGRI7vFjnzND4PWPHF5qp/aT4s3S9BhqzPfpkxf55dLt7sRHK
1lP5Vvhm0XfuZD9Re5Tal2J/4+PXvdR0nwvqji/+G3pNtKhZ5iJ7kcnIa3QA
dIGloeUXMSViS0nV/tQa31loHwK+hHdjr4e/mQd9Qf9voPGz2F/VXoIOEFgH
RxdH/v+tcxN8Sxr/mO5/C11vbujvp5PmW6J2Q74b/AsVx4q4Z+KhrfT+Fqvd
gO9S/HVqprFpsW3Z3+/H/6O+Ot+Sjk9C+2Txzf6EvV7wM/A9Nk7Mz/ju69bJ
0M2+CC3fvkUn0nyfi163Zv3ixsA6N7r3haxBrYdzdM5G4r2r41ddq6HGvIN9
qfnH4w9Qe67mn5bYv4qfdce69S/2ipai57EX6f52xGdVsnyo6vvYQe3rNF/L
2D55fPNzSpYH6JPI4m3UN7dmf+uPJdvI8yq+v7Hib805al+kOfoF3muuy9f/
HeJvJfottSuZ433E/dhfB4t+RfT14n1Tt18a/zQxHPTvvuL/VPI7jRP7B38u
2adLrHex+L+Lnohc0vkn1vzt/K2+SegOVftm9+N+Ne+PGvOl+o9AthALqVm2
EhMmNsz3gHxaV/TLan/AN6vzX9Kcd7D3IyNL3nPYe/qrL0Mf0vwLdM5pmnNN
yXsoGyX+hh9KjslO0/hhotvgL1HfDWqvqVvPQt+q6N3VYst75P5i8d4v23bg
G22FrNL8rbAtNMd2seXl3mq/hsxjPWaOVx+KH1Pnz1RfXed2Cey/2UX8q5HN
fBO6vyxzbJtzOPfYzLbLJ+h1df8PTcyG+GvfmveuJuiq6F+J43vE+VbW/X7Q
FRqh+6odZ47F83vV1J5BX9n3jD+QODex7ScD+0ey2PsR+9Jndf8+xJr4hvmW
XxBdK/sdbhk5nsTeRYyYWPF3GcqJ7J6K/cNno8+LN0W8r0SfL7okeip6j+gr
M8s+bLRnsWWx6TRFe9Yc+k7FsWt8AvgiL4utj6GrTdP5G/P9i95P/KPVPlvn
r0OsVn2L8jXP2n8isD+sXcVjV+l6XTT20Kr3tv3Vd2zN+JCo5D16qs67PLa9
hd11va53iuhGop8VfQbyLfF+dYzmGYS+Kn5X1qLmWYV8Q2YXHJM/QX2b1qxb
HiT6OLUBg7TXf+8hizR+v4p5YCy66dz/1ayLfIePUbw9Kn43YEzAmhxT872j
Q22i9iuR8Q1b6Whfs0xANkzW+cdEliHIktdEn0i8gu9MY6tl/56H1YytALNw
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
         "]], Polygon3DBox[CompressedData["
1:eJwt13nYz1Uax/EveX6/Z7GliWiRJ2EqrjIzTdmXttEmy2h15dGIRpqoFOma
MhGaTFoUkXYViTYh2bcQki3SprTaUtEj87qv0x/39fve7/O573O+53fOfc63
XtlNnfpVzLJsMytgpZWzbBTwC6dyPstOLsmyllWy7DB2bWGW3VCUZS3401j9
XJYtoltTIcvupfsRe5jmIXaGXMOxBcVZNpbuNrk+ohuDvUrXAFsqdhv2MLaI
7nHs9nxij2ArsUnYXdgX2CTsLrbMcx/sbm1z5ZrOGnpeJt92bWNpVoidiA2h
+xybiG1l53qPJdj72j4Q15ZuHtbImE/EP8Yuofuz58bYYm0XmZO/YY2xBtg7
2AXYNWJ3e74Ma6vta7GXYluw1jEH0XfkwzZhrbDTsc+wGay9MewsSHN7m3yv
YPWw+dhSYx4S48BLxJWxCkdkWW9+J/Yn/nXsCOwGfjvak+SujU2RryXWg/3q
eTv2cWirZlln7EzP17BybWX89qwuvyerKF8f/tXGvEt7R6yNvDuNrUwfk42r
I7+fcb6NbaF73vN92D5tk2l2Ym9hE7CqcszEvsfmYs9iNbE58X9gk7GR2H6x
L2IF2JHan8SmaFugj5ON57/YAfNSFW9YkuY//occTROsA9YIG40dpKuG/RFr
gj0Uc49dwRpjFc3DSu/VnGa0frvQfKbfaXI9iB3CptKtj7Uv9l1subZVxrIO
a47NxZZg78UcYO2xxdgqbC02lZ3oeZ4+F8s3mGYgm+e5jG6QtndoprA6nt+k
m6rtepp92Gjje4CV2kf9savZRO0jsRFsL80NsZewbvINkGMWtirWjLFMpnmB
HcBKi9P4FtG9R/c+dhR2CjYDmx17EauBNcKmY7OwJVhf+Wbo43LsFmw2dqb5
mki3QP7a+F9pWrDjPNfAntV2Ns0I2nO8VwvWA9tPUxu/1/M7dIX0dbHq2F3R
TlcQaxibL/YZ/TVXb06oZM74i/GGdFvplmnbV5zWTKyd1diL2DassnyD6PbI
tQcrpHmsJNWGqBFPxPvSnRBjpCunO4BVo6mE9ce+wb7FCrCX2M9i3xf7Mra9
OK3pWNsfYjOxr7GeYg9h3b3bheK70wzGbufv4P9T2538ytZfO++1UFzTGDvd
kyWpxkWtG4O/Lt+EklS7oob9D3utONXKqI9RJ+/HXsXGY59iy41lArYcuyfq
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
9krsmRXaVuvj/6/GTgs=
         "]]}]}, {}, 
     {GrayLevel[0.82], EdgeForm[None], 
      GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtlFuIzVEUxvecOXvmnP85ZzwwyINQI2kYT3iQFzM0SS4hJGSKlJDcIiHG
SIzLGCN3Y9wvLygvSpSkXPMkaUakPKAhD+Ty+/r+D7u9/muv/f3X+ta39tCl
q2etyoQQtrPKWY8rQ5hQFsLLihB2FkL4jW9tEsLCYggd+OfhW1QVQj/iRmOv
Zn0hZiUxw1mbsHezt5e4H0P4gF3KhlDMOq4Lfyv+Zvyzc8acDNYyMMeyTwdv
Ev69+MfxPa1oW/5zrBz2Ju72Jb4FnK+Jsfuk+D+IH5zmUwvOVuKHg1OVxvTh
7Cr3erCvR/uKqb8O/DXEjwFjOfgNla53fsF5ioNeeJmL/Y2zPP7vfB8ntpzv
JvxZ/vmXvZo1FcwZBeevOgZA9DDsBfiPwMM2/v+MPKuJyXL/HDgDc86hutK1
PmWNCo4Rfl3R+SlG/CsH5VOSH/w67BXE95BXI/ZbcBoK5mEiMf/433vO2vlX
E6uG83r1OXHfn2AfJq/dYLSxfwfzc7nrf5O13ROMI/yfxO+KrquZ/VviHO7h
n0Mt3cH9/Zg45ib+7oL/JZ1sj+ZqB/unvO/er3B/ejO+vy5aQ+vZnyeO7wSj
FQ5fcr4Y3zu+Nwbr6nXJ+h1CfXfTnFXHfvwPiJlJzIHo+IPRvIgf8aCaGjPW
sfAvc36tZF6U8y/u7sM3RXhpznvYP+fNhe4fSjw3d8qsRXGhuqRVaekVviWJ
e6QcnsDPhmj9bozmSFxpdqZTw4sK/7ch53o1F9LVQ+xZ+K+wNnPvcMm2/q3Z
Vd9vY9cn5ku8SW93WFuJbyvZls40W6fx3SL+TLTOpLdTibUljXVgV5BDV7Be
H2XMm/IQt13cu8rey1l78GxohpSzcj8a7e9gHwnW0WDME9GYJ9lvZKxt5T2C
s5ZgPt9VWpPS7uic+6i5Vm+lyx/cO57iCK88zUG5tKV6PsJeC9aF4LqkSc1o
LvHsyz8eu5deTgh+Z1T30ozzkPbk/5P33IirQTnnoP9rRr7mPa96M3WmGM1y
Z3TO56PjpUvNkeZF70H/xG9RVfqO6S1UvGrtzvgNkW40p5rvmlTn0o+0fzGa
50vRb7N4UK/0Xql28Xcm7e/Z6B6In2PRfd6ScT/+A8Tpzh8=
         "]], Polygon3DBox[CompressedData["
1:eJwtlF9ol2UUx5/f3LP3t+f9/XblNLyQCpSI5XbVvBAv3CaMkJWYWISJghGI
E/PPZApqbeqi1LVNm39o5jY2q5sSr4RQCRE0J17K2CTpTmUbXiSVny/fXRze
c97z9znne84bW9vX76wIIXwOVUKf1YSwoRjCDD8/TSH8XhVCfSGEBuRrWQir
SyH8DP8bti15CB9gcwP+XXTb8e2KIbyJ/WJsuqP/NRFvssK2fyXrv0LXX4bQ
P8K3lX//oxtCrkS+TMw6cj2HP6BYyDPUcg+bWmwP49+Hf45NP7oB5BHkTr53
0Rehg/BHou3/g47Cj0W/bZrHjsN3QFfRvSTGAfgzxN+IfAz5bfhPiD+F/QPk
j3hvX3Qtqqkf/mx0/l7k7+F/io49xb818E3EuIVuCP489TUiX0G+gHwOeZD3
zlY5ht7SAPWhH0auJ98m6EzBM9FstuA/W+F/qucL4pTIV4b2RM9sQrPJbD/D
txP7bdgvyJxDtauvyr0Zeq3omlTbFDFb4e+gf73GNEF9qwrWdWGzn/gnyXWZ
+tv411PwjDXrU9H6LcQ4Db+Nf3VF90C9mMut08z75+Mrl3weEq8Dm1XwT4g5
hO0kuq0VnonmL0yo15VFY0XxNI9ecg3j34x8qOCcyi3M9qA7EY1l5VV+5ZtG
/if5bbf534b9cDRW1cOReTwMBPewXHKPhM2FmXu3Oxk7S6Fn1SHsjZ7FU+R9
8IuSd0s79Dy5fvkPohul3h3JtjX4zKH7JTdW31MPknv0uMpv1FtXJu/eroLx
UUT+OHinZH8hedaquQ7+eu5dlI3yq953gnfkS3Snk7GuHr/I3UPNTT1SPtUo
XKvnql07JtwLQ8LSFeTR6H59Cz8O/Rh9E76BX555Hn9gv4KZrMhduzCn/mmO
ii38C5/rSra9ifx+bowKq5p/NXJtZn/doCX4NmbGn3a0ZR4Tiqke1ObeuR+o
59dg/Om9ujUdyG8l4023Qj2ZqXa9ql14FYbu0/uvozEkLH1X9l2Rz1V8e8u+
G8LAGPKl3NgVhv9M3nPtlvJfhL+T+5YKEy+T74JyKecl+Obkt6tnuq/dybVq
J7V/azPfFt0w3YT23PdLd+xk2TflfDTGhFX92x+NMdkKb8KqfCSrJ6ptWeZ9
UT81S+2Adlr5dGvmkD9EHii7H+pL2/zuqjb1VPv0b7Wxq5ur92teiq8eaObC
p26bblx9yTup3TwO/Y3v+uRbq5lq/q8AqDPjyQ==
         "]], Polygon3DBox[CompressedData["
1:eJwlj79LwlEUxU/iz77aohK4NeioTk3SlDSF6OQQCP4BtScmJNlSTuGeKOhQ
WzS5SgSFQrOEGIFLYOCgYH0ebzi8ez/vnHvf2yufFU5dkiLIg1JB6Q7g9Utu
nxR1pNK2tID1MfRQMyT9wFJb0ndAmqPwjmXX3DfQLv4B2QYsg2/NGUcJtEIj
r/TM/DS+V3w58i/0R/Q35FvsqMPfyFboz1Gf3MSxHuMdM+MD3yEsTh/jzQ/c
HfCHK7xNMrce6ze5JIr47N/MH9P4crB9WBI2hB3DirAsLAv7hJ3A8mY3dZd5
HTOXve+wGvUF+uKdbXL3jq0Nq6InPDNUp75EG+4e8SxR2byLPVP+8YcnxJ4K
bAH7hQXw/AMZ4jnp
         "]]}]}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl09tPz3Ecx/F3pZ+c8kOsi4itjZaZCxcO5TCnUkLOUsg5FO78By65Kudo
jLnAJlPMlf/AqRw3jFlFXNhMDo/vunju9Xy9v5/fZ9/D5zetobmmKSMinqEz
KyLxFnmO9I2ISOvpYRH9vJDn8QE+i/8eHZGvl/FBXsCr+B8+ldfyv7yI54+M
aNRn8On8BJ/Ji/lJPpuX8BaeOyZijn6Nj+VzeUdyH7yUP+Z19v2QGfHJvT7R
78v3erfr6VTEU7N7/KPZuNTQ85XnWK8/5xX8M3/BK/kX3mP9eGu7zXr1Cbwn
cXu/lAWeu4+/4pN5P8+z5rX+lU/kb/g3Pom/5VOsG9Df8UL+nd/MjjiOYziC
7Tjt2ZbIChxGLU6ZLZblOIQb+ja5CCvRiOtmW+VCrMAZ/aDcgjIsR6vZAbkZ
pViGFrP9chMW4Ky+VO7DfLTrG+VebMAe9Lr/K+br+W7UoAGXzdbJXViLnWgz
WyN3oBqX9NWyHlW4qFfKOlzgq2QTjqIZ8/AAud5bju/SxS2LbN7Jff4ocT+Z
+ihezP95t45QFPFB3mEdjV/8LveZ4ycfLltlNbnqnD/iqeS8JHvYr92sS97x
m+zkPPM2s9sKjR/W3+JZyZmyx3nXHiqOTNTbo8Ki1oyh/9N/925pEg==
       "]], Line3DBox[CompressedData["
1:eJwl0b0v3VEYwPGHVIIog8QoMRAR9g6mxmaTWExisxDx0ttqvb+/Xa+XKlp6
vdbYwe4/MJpYLRKsEp8Twzef85x7c05yfjVdvW09BRHRp/IPERUsY39RxIAG
NaQvyn6MyPCr1q2/cVjftWH+wRGNatM8xnFNaFJb9qY4rRnNqrI84qEkYs56
XgtaVM5/l7isFeXNWa5qTcfm9XRvuiudrRN7OW5rRz91am+Xv7SXNO/zQL/1
J+3bO+SR/urCnE93pDPTGfpn74zn6Xdd6rPuvFd7ccRLYcStd7s3X/HZ3Fka
cWNu4zVb+J+feMxG5tjAWdYzwzrWqtu6ih0sZitfvVUzn9jER1bzpez9+70B
81NAOg==
       "]]}, {Line3DBox[CompressedData["
1:eJwVzktOAmEQReFyYqKIifIwDF2HizBxqDwbhO4GIS7BBzphC+gGnBs1cQkO
WQUDwQ349eCmTp1bf6dPk9nFdCcizmW9F3F3EHEvl6WIo3JEehjR24+4xcdS
kStdxif8r9uNbKXKtXRj3Nc18db9N//AdexV+0DXtr/zba6PG7sRXfyI59LD
a7e5m2v3P9yTPBff1tV0Qz7BH7hW3OERNzBnvjcy33RnuiF+0WXF/9lTnOJX
c2xOuAzn+NObuv0G59zE/OJOuGnxnvvzHyv7gl/KPxt0KeM=
       "]], Line3DBox[CompressedData["
1:eJwV0LtOAmEYhOHPUlRKBFSM96HXQEJvTKzdXQ6eD3io9CaMIKiN1iZ4uAQv
AxtpjNr6bDGZmXe+P9nsymbWSKciokFf0xE/sxHrcxE3hYgKL9E8jYsRzZmI
styzteQES+Rfb/7oxVbGOrYtPaG2/I2/4323i3KVFmjD/oxvu6nrberQJ7aD
XdpvvfngIyzlGe3arvjAtux+iWq0h7/yitsDObXv564P5SP50b6qH8p32Al/
wtawY/keO+WZnsld+S3/Zv1cbmJnuesP8oXc4hP/boJdu/0HS7Quog==
       "]], Line3DBox[CompressedData["
1:eJwV0E0ug1EYxfHHsKjEuBOVqF342oEuQJouAG29DE0IeVtCCKmQzukXNTFi
CTYiSAww6u8dnJz/OefeO7jF6lZ5cyIiyvSVi/idjtjIR9xPRszzOVqaicjT
wVREUX6wHeIBXtb/ufNPr3JBPrZtyzU6wj/6N33XvUW8QCWq2F/0qTPrckL7
VNPNUlOfOtNz751/2Fb0ddyyNXnfdoob/ITX7QN8jnf4WbbphvgSD72xKl/g
R9115ro13RV+0t3wRE5wO3sHj/Ad3uW3meuecQfv8W9/96nreGsMWlwxug==

       "]], Line3DBox[CompressedData["
1:eJwVzDsyQ3EYhvEv0cmlViBjD5LsQmEHjJqCGeOWxKVIMmEBKgUzbEGrPAni
uITE2IEuY1T8UrzzPu/znf9ZWN1YXs9ExJLMTEf85UEhIslFLOpmMWKH38Zl
qUjXrcXv8hk7KwM7L/dum/6x59bDv253/AX3YFftfbcVe4pPJMVrsiW39oH7
M76UK+l79+1d263m9mhf8zeS4jr3pBPfzPrmBTcm/9A9bo57wx19yL/isX7X
p9wRHuAfPdRn3DH+wH3v5+1PfMKNdMqVuC98jv8B4UYztA==
       "]], Line3DBox[CompressedData["
1:eJwVzzlOQmEYheGPOCU47AElcQuOa9C4BBNbqTSyArlOOCXuQcVCW1qWACR2
4iwqiLECjI/FyXnP+92/uJnV3Mp6KiKWZDodMTAeMSh3oxEzujgRsc1v4VmZ
k4bbIV/gh+xhGZEM9+C2MRaRuN3jLl/hz7lHO2/vuM3rW35BL8qa+6Zc4zJf
xRdyKc/etfgjftfbJ7vEX8kr3uNedNU3k75p4n3uTR/bPfyBb9yX7Xfc51r6
xD7An/hXf+lTrojbuObNlP39/89cR9e5LPeDE3wmf63sNhY=
       "]], Line3DBox[CompressedData["
1:eJwVz7lZAmEUheE7so0j2oOB8NiEuDSAlEAAmYYqUIGhslmFBhqSElmAYAVW
ACou7wTfc8797v/Pst++bF0kEdHEYRaR7kZ0ETsRJ/IIDXzsRay4Yz2Ra4y5
O3e2uQxvOOC+7K6qEdf41Df8nN/SB3oPfZzinT+T33Yd52/Qwyu/4R71gvzF
jOubB/gxP8miDHnvO/70hWfV8ndxQy6RE3PJrqg/25+bC3qZK8sXrpWf0Stc
KqfmkfsVfWlfN2f6OP9f+WBOna3qt/ZT/AMO6ifK
       "]], Line3DBox[CompressedData["
1:eJwVzktOAmEQReFyStONIqLBaCQaQAm7UBOdkPicO9GRrsDH3A2AKLAFGQg7
cBG4CF0AiV8PTu6tU9Tf1G8ezu6XIqKLdiEiSSPuUEgijuUhzrOILKcYcWRO
7Er6l37BF2WKOVrmst0jnrCCBf+d/85dxdzznRPuhzuVa9wtnjHgfrmq/onU
zYb84y7tXvR1TJDZbcq+92ry3b7Ebetv3Jb84Ja5uj71xpV5J/9f3J6ccdfc
rl7mmnJkHrhv6EN9lT/I3+f25ZircB391X0f/5z0H/w=
       "]], Line3DBox[CompressedData["
1:eJwVzclRglEQReHGJag5kIUSAyXK8DOzIAAgFRKhsEQjcETdSQggCkgKfm9x
qvuefnVfcTiujnIRUUb/NOIRT7jCHl/nEXnU8hEH+Q8VXHDrs4g6PzYn2HDX
bi94RsMtx83wKt8kChEZP0+d8hBHrOQCmm5v8hJ1nHBLvNtbbh/mZ+pGVVeb
2/j71puMq3Ed7pu7S32ph3uwd/mGvcVdyltvelyWergS98P1uV9zIXf4pvuA
23H3qYeb2v8B7MYtbQ==
       "]], Line3DBox[CompressedData["
1:eJwNzjlKg1EYheHPwsI4gTsIsXAfTilDsgDFBWgjGK3EQhDUQEAICJJGl6Bx
Ng7RqBFSiS7BKqBxioVPcXjPfc9/L39yZi472xUROen0RaT6I6ZkPxExjAf4
NBDRLRnnF99UuNXeiEN85t97IqZto/oRt2Y7xnXfftjatjHbCTevn+IItm1D
/ILsurPC7eEyvnGDktU3vHPmThPPscpv6q9SkAuu4F4VP705br/Ui9wVfnET
3LW+xd1g3vmbr+kl7hYXuR/uTt/m6rjE/XKTeO+8wz9gh0tzj3qZa+Af1+LK
/vkf7Ik6iw==
       "]], Line3DBox[CompressedData["
1:eJwNzUkyQ2EUhuFzNVGi2YOhayWakcgCZAHMTFIKxQI0K1BRRTSTZAPEAkg0
QW4QhkYmRik8g6/e873n/PdOlVYXV5KIKEh/PGJ6ImJZbvMRKTbxZjIiJwW9
46bFVcbccpfc72hECa+kxx3Z3bnZdftn98PP8vfcmvkBZzDwi98217zZwTpu
4ZKs2xVxz3ce3bawjQ1+35zJgTxxx949YyJz9i94wnVwQOa5DKtcFzf0QXyV
U+4NN7khfJczLtUb/j+sX2NZP+d7ek4W9A+84D5xRL65Q7f/vis2qA==
       "]], Line3DBox[CompressedData["
1:eJwVyzlOAlAUheFrKZMIuABrAVeiCRZijda6AUNioq7AAcHKDaiJOKCl0yZA
QiEOSGFjZeJn8ee88593Z2sbS+sTEVHBbyqimI4o4TQZ0dO7/2QiJhMRL959
nNnmuHv/EvyqXMOAO7ft+7OHpO2H3+QP9AvbvF5Gyjbid7x3sYwVVNHj0/ZD
Nw203RW5pvcRMraWPMal7VWfwoPbun9X3FDPYkF/k9fcu9zWp+UHbriS/ugu
p3+iw5W5Jy6vP8st/ZYf6QUs6l/yjhvLGXxzJ/7+AerBMeg=
       "]], Line3DBox[CompressedData["
1:eJwVz0tKAmAUhuHTKOhGs9CuZnO1NhLNdCjkUPdglIFrqCghd5FdLCuipA1I
OW7QhVAH4dPg5fzf+50z+FPFyk55IiK28TcTkZ2NyOFiOuJN7s5FTGJhKuJd
7qOly3AP9hL8rllCn7vUHds5QlI34Kv8iXyl25I3saj74Gveh8ijgB43jyX9
qZszXLsb6dp8Q17WnZtN3Og+5RU82tmz0+a+5FU8cfvcLfct173XzB/ccVn5
2U5K/kWHy3Ev3LrcNQ/ke34gp/HK1f7/zw3lDTS4MQI4M2c=
       "]], Line3DBox[CompressedData["
1:eJwVzztOAgEUheFLQmFAiYkJiPIQFEUREBG2gJ2JlQo2VEqhK9DF+EjsFddg
Y0FJr9swfhQn/7n/mUlmKuP787tERJxJZiViILeSTUecYg5nmYglGbp/liPW
uVXM45xvpiImtgt9g1uzbeI7tmx/tktbgXvUi/iAbdsTf+K5G+nJtzspv/qH
lDybxzJ+8VP9yHufuMUVsIId7spe1cvcNh5zQ25Hr3I1fHZ3+V29xu3hy+Ib
uLpe5/bxletxIzxwN/gG9rlr7lBvcU188y//qFsd1w==
       "]], Line3DBox[CompressedData["
1:eJwVzjtOQmEQhuGhVFHX4A7kzjncLx2EwpoEpTMa3ZWRYO9lB7YUVoIN0WXg
8xdf3pl35j9nLpaPVw+FiJjJ+WnERO7k8iRiiiXcnEUcyVz/W4woc6VE7pvL
jiPucSt7rmxWsfOKudmBX/BVrsLVsMU/cyP9rYzlS1bcH75J3V4dG/jJv6vb
3n1gk2tghh3u2jxXN7kWdrkbrq3OuA6u9T2+q865Hr5wfa6fbkp363fuHXA/
+JS+wQ/Mh9xSP0z/5Ea4svMP8XgkHA==
       "]], Line3DBox[CompressedData["
1:eJwVz0tOAkEUheHLVNGwBfegMgRNeHY3EpZAYGIibIVdkJgYE6c+wSU4kCEK
Jiib8KvBn1vnP9W30ifD6WBSiogclaOIAj3UyhG/2GF9HNE4iPhz3qOOU27t
XpO/MSf44S50T3hESxfcHM/yJZqHEW3+nhvI11jhEx9cR/fi/IoGzriF+Yau
bmm+pz1pv10Z9+XtW/daXJvLuVHald5K35kPcsFnzh3uXP5O/8rlXJerchvu
ituad3LGF/o+N5Z7aT830/8DaXop1A==
       "]]}, {Line3DBox[CompressedData["
1:eJwVzz0vQ2EchvG/QauLSaKJGCqR1IgQRYgimgrxFiwWMZHoxmzgE/AJSOq9
qMnIbGKwev0GzH5nOLnuXNfJeZ6TW68sbDdExIan1hhRzURspiJyuIUtzREd
djkdcYo7XA/uYlbrtde0M9zn+vAA27R+u6Kd4yE3zg3YR3YB97QLfOePuSH7
BIeT97VL/NDuuBG7jqNY1a7wU3vkxuwnLOIb96Bf2y/cBL4m/8NP2s9aDb+4
KfzGTq2U3EO7wV+ujH+Y16YTp91iCle5GTttz2KmyR2Tb/Kt3JydxXls1+rJ
OVqeW7S7cAm7tXv80Qrcsj2IK1jS/gGeIDOw
       "]], Line3DBox[CompressedData["
1:eJwV0MsqxHEYxvHXQiYLVyDlDuQalJSVnVJK1iN7C7FwyCFGgxxyyPk05NAY
MRrGMdcg1yBrn9/i2/N9nnfx//dr7hvoytZERD8KtRFjmYhxdNRFTMoJ3DdE
dOpTfBo9/ME2y2fQq8/JeWR52W2B5zCo5+Ui2uzD+jJfwihfkavpe245fZ2v
Ic+HbBt8E7v6ttzCAR9x20k7ivq+3EPFXtIP+RE++Yk8xrPbl37GC/jmVdsF
P8ePfimv8Mtf3G74Nf70orxFtz0j71BCfXojPKS3cGuUjyijKf2XrSKf0IJq
+he04tTtVb6hHR94T++Bf1DKQa8=
       "]], Line3DBox[CompressedData["
1:eJwVzr0ug3EUwOFjaGiauAVxDaQuolslvpWWRUWLpm2wsVgsErGbbNUJ1yDR
1meCMBiriw5WT4dfzjnP+w7/8UI5WxqKiGk1ExG/IxF9zeh6NCIzHJGzt9XR
rG54jh8lI+7V0hy/5dv82N1WR3U279shP3E/qMsezQV+xk/tT/rhz+Yiv+Tn
9hf1+Ku5xL/0qTu2Yrb8t+Hbpt5Y0Vzl33zLXtY7L5l5/sd37BV98F2zwFO6
cFcHb1ZNa2xs8Ba+5z7QvtbZhBp80lxWWlfuKTOjfzZrNEw=
       "]], 
      Line3DBox[{1014, 231, 1111, 2915, 425, 1280, 244, 3359, 1122, 449, 1285,
        257, 2958, 473, 2959, 270, 497, 2983, 283, 522, 2998, 296, 547, 3011, 
       309, 3027, 572, 322, 3049, 597, 335, 3072, 622, 348, 3099, 647, 3100, 
       361, 672, 3127, 374, 697, 3142, 387, 723, 3157, 400, 1003}], 
      Line3DBox[{1460, 2339, 1645, 1872, 1646, 3605, 1874, 1657, 1890, 1658, 
       3609, 1892, 1672, 1908, 3698, 1673, 1910, 1687, 3653, 1926, 1688, 1928,
        1702, 3658, 1945, 1703, 1947, 3710, 1717, 1964, 1718, 1966, 3715, 
       1733, 1982, 1734, 3612, 1984, 1750, 2002, 1751, 3618, 2004, 1767, 2022,
        1768, 3622, 2024, 1784, 2042, 3740, 1785, 2044, 1801, 3674, 2062, 
       1802, 2064, 1818, 3680, 2082, 1819, 2084, 3754, 1835, 2105, 1836, 2107,
        3761, 1852, 2125, 1853, 2392, 2332}], 
      Line3DBox[{1461, 2341, 2342, 1873, 1647, 1876, 1659, 1891, 3694, 1661, 
       1894, 1674, 1909, 3699, 1676, 1912, 1689, 3654, 1927, 1691, 1930, 1704,
        3659, 1946, 1706, 1949, 1719, 3661, 1965, 1721, 1968, 3717, 1735, 
       1983, 1737, 3613, 1986, 1752, 2003, 3730, 1754, 2006, 1769, 2023, 3735,
        1771, 2026, 1786, 2043, 3741, 1788, 2046, 1803, 3675, 2063, 1805, 
       2066, 1820, 3681, 2083, 1822, 2086, 1837, 3684, 2106, 1839, 2109, 3763,
        1854, 2126, 2394, 2393, 2333}], 
      Line3DBox[{1465, 2349, 1650, 1879, 1651, 3606, 1881, 1664, 1897, 1665, 
       3610, 1899, 1679, 1915, 3700, 1680, 1917, 1694, 3655, 1933, 1695, 1935,
        3707, 1709, 1952, 1710, 1954, 3713, 1724, 1971, 1725, 1973, 3718, 
       1740, 1989, 1741, 3614, 1991, 1757, 2009, 1758, 3619, 2011, 1774, 2029,
        1775, 3623, 2031, 1791, 2049, 3742, 1792, 2051, 1808, 3676, 2069, 
       1809, 2071, 3750, 1825, 2089, 1826, 2091, 3757, 1842, 2112, 1843, 2114,
        3764, 1858, 2130, 1859, 2395, 2334}], 
      Line3DBox[{1466, 2350, 2351, 1880, 1652, 3607, 1882, 1666, 1898, 3696, 
       1667, 1900, 1681, 1916, 3702, 1682, 1918, 1696, 3656, 1934, 1697, 1937,
        1711, 3660, 1953, 1712, 1956, 1726, 3662, 1972, 1727, 1974, 3719, 
       1742, 1990, 1743, 3615, 1993, 1759, 2010, 1760, 3620, 2013, 1776, 2030,
        3737, 1777, 2033, 1793, 2050, 3744, 1794, 2053, 1810, 3677, 2070, 
       1811, 2073, 1827, 3682, 2090, 1828, 2093, 1844, 3685, 2113, 1845, 2116,
        3765, 1860, 2131, 2397, 2396, 2335}], 
      Line3DBox[{1467, 2536, 2537, 2352, 3798, 2520, 2530, 2521, 3822, 2522, 
       2531, 2523, 3823, 2524, 2532, 2525, 3824, 1936, 2526, 2533, 2527, 3825,
        1955, 2528, 2534, 2529, 3826, 2539}], Line3DBox[CompressedData["
1:eJwV0DlIm3EcxvF/BBMj9UCxGaSDODk5OQmCi04uZhKhgViPwWtwcBA8lnYQ
RAcXW4+hY0dpEQUhYL0vHFxEJ8VBUFS8bT8ZvjzP732+L+RNRbqvuTcSQhhB
cTSEduzEQ0igIS+Ej3IBZTgqDCFuT2HbPYRqTqmcx5m9RObYW7ClD6Kcc2gr
1udQhJfcEJKcTX0AMc4Bp0CfxQfccZo4G3o/kvbbWAj5+g/EccVp5Kzrl/Zu
ecqJye+I4pwzYavn/XV3YYuTI2cQyb7D+cap5ay5O/GHE+Q0/vl9+/ZjXg0n
41kHfnLebZP6if0t+x2cas6qZ+2Y4uzZXm3j2W+Xm5wqzor7C4Y5u5xn21f3
k8xwKjlL7jbU2Xt4j7Yx94Nc5nzi/HZf2NOylXNvG83+h/IXp8uW4C16lkIj
58Y2ol/Lz/I/G09KUA==
       "]], 
      Line3DBox[{1553, 1638, 2389, 1848, 3640, 1546, 1632, 2386, 1831, 3636, 
       1539, 1626, 2383, 1814, 3634, 1532, 1620, 2380, 3801, 1797, 1525, 1614,
        3668, 2377, 1780, 1518, 3734, 1608, 2374, 1763, 1511, 3728, 1602, 
       2371, 1746, 1504, 3721, 1596, 2368, 1729, 3631, 1497, 1590, 2365, 1713,
        3627, 1490, 1584, 2362, 1698, 3625, 1483, 1578, 2359, 3799, 1683, 
       1476, 1572, 3647, 2356, 1668, 1469, 3693, 1566, 2353, 1653, 1454, 3689,
        1560, 2336, 1641, 1864}], Line3DBox[CompressedData["
1:eJwV0LsrgFEAhvEj90iRwWXAYDIZZDKZKCllsmCxESkltwGFQiG3v4DRILeI
2CiRxeB+v26yKL8zPL3v+d7n6/s6Ja0dDe0JIYQ+5KSE0IbB9BAKUZsWQr4s
QB4uskLIsLdgwLkfFZxv5Orn9i89yd6ET30IxfjAij2b967/JYfQyHnT+5GJ
E/urzOK8yB9OPedZ78Wy/Tc1hCc9g/MYv82p4Tzox/Ye+cC5l2mcO/nCqebs
2G+du3HKSbInIxG3nC17Fe/G3okdzqJtCQu4tl/yKjlHzodY5czKOVzZZ+I9
cMo5B/o+5jlT8b7s03ISx5wyzp6+i2HOm31cn8AYjjil8b/1bXTau3gj+mh8
J77LKeJsxjuzb8hmznm8P5xhjZPPqfO8Je5Yxz9ImkwM
       "]], Line3DBox[CompressedData["
1:eJwV0LsrxXEYx/Gv4WDAYjJaZVXK4g8QpfwBlDvnuERHRO7FwkCyWBikLAxK
J9HJLYeU43ZYFGWznSzy+g3vns/zvD+/37lUtiWa4wUhhEGUF4awUBzCPBpQ
VxTCjXldFkIJNyfPohZVXI37hRzjZsxpVOLKvYI/k/9iIUyZkyjFJVfMpeQ8
N2GOo8X91z3vXUf2H27MTLknzU/uizuQv7lV91F5BPdcltuXP7glblgeip7n
0ty7vIs0l9MZkN+QwJ7OoU5Orua3zQeduPmKfmxEv4fb0XuxbyGj02c+ozf6
33ROddZ1nuybONfpMR/Rjfrou+kt6mTtazjR6Yo+E8d8p9mqk9S5k1dwEL2H
65Bv0Y4mnT6djLyMRvs/uUJHjw==
       "]], 
      Line3DBox[{1556, 1640, 2466, 2127, 3766, 1855, 1549, 1634, 2108, 3762, 
       1838, 1542, 1628, 2085, 3755, 1821, 1535, 1622, 2065, 3747, 1804, 1528,
        1616, 3670, 2045, 1787, 1521, 1610, 3665, 2025, 1770, 1514, 1604, 
       3664, 2005, 1753, 1507, 3724, 1598, 1985, 3723, 1736, 1500, 1592, 1967,
        3716, 1720, 1493, 1586, 1948, 3711, 1705, 1486, 1580, 1929, 3704, 
       1690, 1479, 1574, 3649, 1911, 1675, 1472, 1568, 3644, 1893, 1660, 1462,
        1562, 3643, 1875, 2344, 2343, 2340}], 
      Line3DBox[{1557, 2468, 2467, 2128, 1856, 3641, 1550, 1635, 2110, 1840, 
       3638, 1543, 1629, 2087, 3756, 1823, 1536, 1623, 2067, 3748, 1806, 1529,
        1617, 3671, 2047, 1789, 1522, 1611, 3666, 2027, 1772, 1515, 3731, 
       1605, 2007, 1755, 1508, 3725, 1599, 1987, 1738, 3632, 1501, 1593, 1969,
        1722, 3629, 1494, 1587, 1950, 3712, 1707, 1487, 1581, 1931, 3705, 
       1692, 1480, 1575, 3650, 1913, 1677, 1473, 1569, 3645, 1895, 1662, 1463,
        3691, 1563, 1877, 1648, 2346, 2345}], 
      Line3DBox[{1558, 2470, 2469, 2129, 1857, 3642, 1551, 1636, 2111, 1841, 
       3639, 1544, 1630, 2088, 1824, 3635, 1537, 1624, 2068, 3749, 1807, 1530,
        3743, 1618, 2048, 1790, 1523, 3736, 1612, 2028, 1773, 1516, 3732, 
       1606, 2008, 1756, 1509, 3726, 1600, 1988, 1739, 3633, 1502, 1594, 1970,
        1723, 3630, 1495, 1588, 1951, 1708, 3626, 1488, 1582, 1932, 3706, 
       1693, 1481, 3701, 1576, 1914, 1678, 1474, 3695, 1570, 1896, 1663, 1464,
        3692, 1564, 1878, 1649, 2348, 2347}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJyUWfdfjf/7rxQhVLIjigolSgh1oYgiI+2iIS0tJURDU6LJuymJ9k57Xe29
d6fdaZ1dREnpe/6Arx8+55f7cV6P+6fn/Xw9x3UdMLS+Y8zGwsLyfTMLyxrm
04YcZsPxlwEdZYqzO9JzSre/D/M1f/UfsPy/v1k4I07Q3aUyicoWfq/tWqYx
P3+NuuzlVGgZyPvKk0XDQ7U2jsfle4DfZUtV9s5yqKsPr2weKMARfqowbywD
gn9ent02WQQ/lFmN521SgJMoKudzjwFrM8ZfhCnUQVi00kyMIxlLTOzSDviO
YZfEzzUxvAjhERadSWkUtE2JeaPBMYr7OIjEWPFo2MOR8mOvFg3br0XMnHLp
R3UKT4vXsg/0YCvVIpSG4547483V+9DyZfZMwN2nIPvszY35OSpq1qffX7w2
gAouaw68v/IQ4q4GKpHbKGgq2Oqc/WUEBeZMYlv01cEv/Y/pig8ZA7oi6sXG
xjDpzHTk2a+KsPVW22GKKgn93yqXVPgRsXcyWCf48tl/4vblvnhz8woD4g5Y
55hz5pZmyDxe8ckJgRy+UvmsvFx8Nu37VLmPgQW59vWfM2NBPmlcrePAJBpF
i50Y/jGNNrbb882a04C/lO/4+w80TGA/uhwX1QOx7/rOuSpUQGaSHEPCqhAD
y3sPO35kwNKqivrHpyXQSM8u+I+mhkfMswOGtRjAFs12NyC2HrSDNTkjvSmY
qEsQ4SgcwZZHy8evW5WClmxjnZ8IFbXUfETntYZx3qx/k9rRaNhfdd5uxYqG
B0k7Qj/v6seyEJXK4lIfEODljrR9RsOmeS7dakYfUmYn+KxnHOA4WeMVWyYV
jb9ZrOzXGETBk61f6bnGUHL1g5eyCwV16Irpe++NotHJ8s1BuWpwl+S7J0Ga
jJoBTcs0nXFUKjjwp2PiCkTlMf7s5iDh41ztYckfRER9zqIkG5l/4kxlLK36
MXFW9E5KOfEgt1SVLrDWazUUNv09TslWzcMfBLPl6W4Gnjbj1uMNjYMXlmW3
hucnUK5u4fq2XTNol2GWXX8mA5aJhOkmBxrucEnYl7DUA63nX/yu9amEAVGu
G1J7i7D24efu+PcMWE7mcHx9GME1SChQdmc6LokvpVWeZoBreVbPEc5GgHV8
99fcp+KozI8Nt+IHkUXz0fvxkhJgcbN6c+QdFTdve78lpmsQOW7u/xuwLxqs
dMyunn9Bw/BxZ5lfI30oleRSvN/eB1atJbes3Gberw2PBj/G9KOFs1q8vp0D
NC34bE22oGKqc8J9S7MhnA3WuSQhaAwf3dik2cQoKOaRfuj31ChS3WMj7m5U
A+ITKg6MkbB7OnBUs30chUwGWGtEroAOX/3gat4MBst2cFvdmcB1GaYh3tFn
/onzM8vEJUUmzukHhOQ8K3JL14VxDV41CAep30/mWBh5uJu87aZZJwMVtm5I
+PM2HkhBl4RlaifQLahei1tuBqtTB6wFdmeC/UOudY/VaNg9o2c9o94LZTN3
f86Sq6Dn+6ssMrkI2fc+3W3xhgEeGp0MgnMZ3AgT1Gq7gnhHXbGnfp4OFydu
hZaYNIHSh+r/4tfTcN7zZ86pyX5ULDa8QltXArfa7HjHR6lomaO2x8JlAFO/
1WyZXxcNCje81lx2puEnidnjse19uCDow79jrw+stM6PHjzEPE9bLd/1iIAG
wec1p38+AWf3roe3BanI/2VW9JHzMH7crrnvmM8DCHxrx+HbS8Zznq7kCYsx
/O9l3czM/bvwzsBWl+5HwuEi10mji0Rk3IpviLG8DBIRHdUVj2aQeOviUlTK
BHpvrfr5uPv0P3EWN1x6tbDMAG28sNZFKK/0WuO1aMZgBBxt1xp655OPfzqf
P2luY2CuSNIv38AE6Oi4mD8cOoHfXfoVqw1ncM+dCdIuriyQkhz3FD9Bw9N/
a75xfesFnTUXOoPNa2C325D7l/5ivBjT2//GmQFR5taX41+UwzY73lKuzFrs
0/Dex+9Hh7BN706KYDMQv1gQnP1pOO29VYfu0IvPbzxo4bxdDF3d5ruFD9Jw
Oe8Uz6QeAa0YVxtPtH0CxrbNBCumPlwJOcdlTutDzsYq9nWFryFHuyR203cq
Snwh2hxh6rCGQGraR5snYJuQlGHaTcGsN2c924JH0PrQif4mqhH8pb9V1ncj
Y59UxJ/H1DF0PfJ3DV+OKqyp69ssLkvCjHm/ed4UIuai8cnJXAWQTJxV8RSa
wQ+DXMs/WCfxnoybbOyWf+Mclu58KJKJc2rwbpKMd15preDbZ232H6HN0WPj
baECPNuVJ8rbwkACqbV2S3wifF/uP9pgNoGB4eUDot4zqNd3AeW5v0FPRRxv
JJOHm9KUnT5v7gMhXXN5p411sO00IXmQUoIpC2IfK20YIDtS8HDkbQW0m0W+
Zulvxa6HtVLFrHQAA3GCyPpWeHL6uo7FAg1vTz/4tk6vGyfdc0AqsggS2Se3
62jSsOzi4NmAx/3oPdGrze/yCSzsb079MaNh0DrG9kcn+tHcMEtdR/k1WN+V
tqfnU1HYOCI94tQgOr+c5pSZsIfhmwvPbDwpqCq280ep6ijulI2anbthBD9y
qV8WxcjYVphied10HA92BA6+3agK3y1VVgeoMzj8hyb5hGcCb1BEgn+tUQBx
hZh5g8Fp5Lu+qh91ZxKXPeRJijdP/Vuf90RIn2TiTLq4lbeDllfaxnnz5auj
nyDizK9JueICLDpKrjzZyMDuSc7I+ZYkcIv4xfJTZgJfvzfeKpE8g9+vjC7d
Ec0G1tWikGvDVJSxvZq0x6wP1uc7xWS21YMl4YjTqYOIDQ5i1Gp9BpyuUWq6
l10Jwjt4xPJZu3Cft+XmJBUarAxfdDXc3wbKbmpXxRXp6P13lfzov04svGIU
KE4pBHtet6tVTH24RpLZRCvtw+D0uqyovZ9A7a/kjIAqDZ2/jZ2Qj+jHCtHn
7T7t3hB/tmoHryMVz7G5eYudGEJ20Iv3vG0Pnqd7F+YkKdj18o9CzcAoHtPZ
cc091RDmzosIVPaSsGX0+XvJkXEkGqbuWTS6Ax/VTLKko2bw6J30hS+2E6gc
/qpIXE0enHkWVx+FTOOqdy9re9Qk8z5F+D99L/1PnPUaXuaV/GGAhXU/v7FG
fmky/22l2VfRMHPrsoLy3UIUMpU4IVnHwO+TNinNG1JAWlKFW3P9BFY47h+v
b5nBTxGbfour58D1ywf4MtKoSNfvEGop74PZnv0bjEoaoS0zM6DtUhlW778p
IKXCgKvaSpHH5qsgdVv2Su/GPnx8x/70qj0V9nWmTJVktIHv+zC7R+50VCyV
m5c60IEnI6KFiuQKoVFdRNKRmdMktlddeynfh+dFH4z5pkRB4yalsvUnafh4
r5rtkggBr5WNd/Lf8AbXfZzt/dJUXD1dvBQhPYzpxNryhwV2wPI24saLYTJy
N7HzHDYYQ/azvAYGXIZgsqmbLOJOwnOzxoTft4j4jV3BilR6G45pF8Q+us30
u2cPlLFpAiO32T1vT7r0Tzz/dc7zykv9FBPn0iu8LLxV+aUa9BAZP9fPsMna
7KMJpRCpyWcG1lYzsGi78XlN3VTQttlvQuklImFoTfvM3AwmrSkOm4vIhfGt
nickmfzZlx/Px9jRD0Ff5fUZXc1wWOdeavb6cvzNPvYl/AwDNB84PXdVqQFb
nR3vtq0OYLqe+c/+JxS4KrOZtVKqHWwtT/IPptNxL4fr9YGlNjw3EVNC+a8A
Np/7EmcUR8NGjbccLau9mB59+VOwWBT8WXd97QwXDdte87Yc7yLgJzsTh+xS
L+Dx6aAWUSkYcHT2fNmFEUwYz3do47cDw/S7IZGvyXhGaKzlOHEMPZsXvAwt
DODuo7D9nhIkLJYOevmmhIjH735sGOW/DdPqLAGJa2fw4nXrAbrgJG5XbCTt
4Pjfcb7oHXMnYokBDXcX9/2WKihNveVgfD84BupjTB95virCw5e2v0srZ+A9
mvwT1+o0mOOtl4mNJSJrO6vMcz4Sll6FT4t/8mCtX9X4rgtUPHmpy9HXvB/u
BRHHH25qg7N+R5ctZ8qxmW/O5pkAA/bu/yKSWl0LXUPKoYFtI+jDVRCsoEoG
smVA2pqEdlj7+2PYzVY6eqVZNzfsb8M+vefHrv7IB9Ujr4pPJtJQyF33pf/3
XjQlt4Vdi/oI9ON2r34MUVFpmC9UMHKAmbvTjm4R8YJgH/bYi58oKBV46VGT
yChWFw1EV7x8DBWH6PwTJ8hIZ/eTvWIwjuYmXXY3G/Xhv/fN/BJDMxjVubN4
8OAEnnOeKFd2vgXdBzcLbC6dxl7DiF49+0nsvUZNOvzg4v+Ms4BEmTnpNwPc
fCedz8cXlLY4D6/oFH8BQ1tTjaDtxdi5r8XgYCkDCx+eC5c6mAEOd6O5HR8T
sefeRgPjUyS83dFUO/asAMy5c56HrDJ93GTPQbv8fhCfnfRSuNYODw4a1i+M
VuBOLQpVnI0B7tvMLsnq1sOVusqFyKIxjGhyuj+yhQTd06TDvlwdICR68PQQ
kY4qCRGBn/a3Ise1EOs/d/JBPYTzr+1nGu5Kq0yP3NWHhk6XTI6xfQQZlRNN
dvFUjHNyn2h6MYgD/pMc6709gVOueIFdhYLnzAr3pqaP4vJuHVd5gi1kOM/W
EQgk9LrxjHuOMI4eLbLkETF9OH8w57H12xl86TppteA1gaFjLWs31N6EZ1Fb
pLKfTiO0ZyieK5/EnE8/7gnWXfifcW6N/VDBz8RZ+hvDb3VvYWmhv4h07spX
+C0Wzu6UVIwGBP4Aw0IG8h5Y0Mr+kQFG122NdeWIeFc/fDBYg4Qipg4TYduK
4Myd4qN5eRQUuGJ3UoOFAKaqEgGNnzrA1/bzTvWflWheOO3BMkqHdVImiwN8
jfDunEPI5BMiRj21xPi0aZBfvcrdpN8BP2ev8P2k0/FTSnnby3ct2J/9TZiR
nQfrOL0sHJl5L8n9cAXH4z78rC8tV64ZCSWcbga1ZlQM8FB59ddqCNmkrlZH
jXiAir9LQvJvMqZa57woPcXs72+CfTRP2ULi9v77bB4k7C1TWN99k4jPhJ3d
Hh+4Dx1acmaesjMou76Ym0acQKLKzqspYSqw4lH3PE1qGvHeBnL++ilscc/s
4jnxv+OsmuRecXyRAZ+5Pa6YhBaWPii5SRzTigPt7DbdY7IlqFovo2GYy0Dn
HK6NQR2Z4BJ94vj59UTM5zFpnHpKwkc3n7o96C6GtcZhFiYmFOQM6JsLvUCA
H9lrUz7xdoGcZmB5s0g15khMnOXNp4OO3Wclte9N0ONetfMV3yTqk6akP0tO
wSPvlUC/rx3AvjGE3XWOjqnm8t6abi2YcP/JdeqOPCje1aQWZEdDnXYjf8HF
PlzXpbHJLyYCJi8rOBgfoqLCTuWjL22Hkff039+kEx4QbdCwiRhDxgDPmRvj
zHujzFXswBJkA10UO44OcRLaeb0Mz0Qiijn5hPTS9cBN39ggbnYaSVymz/vP
TWKngPCxOfsbQJPZz7Xh+xSe4LE6u15lCtN5e3uXZeF/xvlOufiswAIDzhhv
Oxm+vajUIHGf4sfOeFC51HHLv6UEN5/8lrsni4EaNYWdFyuyYIglQW1t5ziu
0eRgnA0hIfnG0OJkUSmsPOyxfbKJgiNVPy7fekoAk5x9fie+dMNI/iGZYsca
NHjJ9VHXhw5Zaw85vV9ogay5tzqZH6bQlxZ1ITRqAoSL3DZ19XaAsLn9TxKF
jvNjG4iPfregha2qSIxjLvBIrzyavUHDmq32Oonx/Sj82NNLdjQcNuVqr44Q
KEilTB/a7TKCBZzSF/e6uEPSbl9rbSUyihyTdxCSG8fLLh7t2oPWUBLr25jT
N4Pd2bn5ekcmkCLfFTNdoQtlJq3CK7HTqPX08PExv0kcuW8UKKZ1HULJZ383
Z03h6fTM/vt+U+jJtaemQUjuf8ZZrOJ3CfEnAzbn8V8oCy0qVYyq4/ljyewj
AvtYvO6V4spA0hnPVAY2xv90M6r6Bv47t/Z8jRjHnVlWw8Y5JLwb+VEi9GEZ
/NbjCPBOIOO+zzWehjEEePFymS3qTi/QhzvL+mZr0dx7QCz+Dh3++PkX1wS3
gQ7/oPPjxWks4Is2+Dk/Dib72ReSlzpAJyvRQH6YjgLGKrJ/Ka3Yl2ZnWzGQ
AwHxASda9tGQU+zku9IXBNSmcM584g0HDos/9eNvKKjV81eTcm0UDwwmM17W
uUGm5TcvnCVhA09ld3bxOFoU9ym/CrGCyP+8tm72nGH6r31Ulf8EnlVKEHoc
pQOGoaK/kvWmUaTzBduxoUk88tjucOgVZcj/5bu8/GQKB993NzAaprB/peHv
862y/zPOh2e4Df+cJgL/75mzou9IuJ/DN+GwYix4ivImf7gzgKlpLvZ/pqhY
MjXWcqkuDo5xPVB6ykJDFUL2Cw1DApbf/MRyuT0P7CkRkgocg/h46qZZyUsq
RL/rypzbUQYnjh86lDJBwX3XQ6vdjnSA6bPDSzuD+qHu0c4A70kyZvVr1lPl
xtDd/3tZtUUK9LRbZP/tpWLfPUWTn+kDePJozVm19e9hV6I+671wZu/+lH1Z
8HofVlnrRBcKvoIGlb8uLJdoSGq09npP6cdO8ciHSmnWsO2sj2fWZSr6a46E
PV0aQg3xgqezc/cg9eN17s41zJ5S2aVFER7D7dTiZdOOm2Ds9Dbfo5yEcgJC
aR4r49ijJyUTc+7fuUKotizy+9w4/BmLff6wjITRHNXFPVfjIGBPgrfq7gG8
G0zK1f9BxZa8i5yj7fEQ6/bRZnCSipnKPRu7kIBWVbyhm9ULoPWoh8OrgAEM
WROe4BxAhRUp/XTldeUw9vyl4douKk4pXIobEWmDNUbJh03DekCysvV9RCgF
c3c+l7XYPYqOUq5TUjopMHU/Z2CVm4Y92heHrEoIuGYXt7ssNRimNXjeEt/R
MG7fd+fY130o0DZxLH3MFaJe+H7MZubhD04Kk8d7CVh5d/qg1U8r2Cd0e3PX
IgU3CBCC07aNYCI4HLnFfQ9kd/VsFk0n47UrdtweiWPINhb2IKFDBXabXaEN
W5NQdjq0XMuciDt/cnaeTfu3f0X4v6H7JI3DTyf6VZMfJDSxOJ78Tjse9r7O
DWYfJ+CweESR/yoVTyy7fthDSwCD2OLC9noqKoeagMm+AeTY5GI4tFQIb+U9
nYr3DqD4Vc13m2Oo4BZjRevjrIAmb3Y8+oSGJ5ReyGjyNEO3/AV9aY0uqBa1
6WiWoOKp+AL5jh3DeOu2aL/t6RTgH1ks2CpLw+v9rBS/pX70+5z7bUtVMDRr
87+YeE5Dka++X07MMPPAlSNvToW5gsFOUspiOxVvOMfvXmwdwO1B+aysUlbA
4aj0TDiRgqYBLe2/t4/i2v8sXnEd1QOdlNg2eW0y1l4c2XlWZBzXtTx697br
BihtfdT/nwAJb25WU29pJ6KSPzk7UOjfuLm5e+WiwTj4eNq17xMmY5J1Y4Ov
UwLoxFrwxycSkOWwbIHnRhrqlj2nPd2TBHuOibBJp1DxkfVbl+9OA8heOLql
o6IYLA86NwimEjBJrDXhfCYVEg7s4Tm9rxIcD4qz1k3TsDV0Vr1HrQGoHKG/
6e874Fm9143AVCp6nt93N0d8EC/t2nkvji0Fqi7KtO/Wo6Gi1JmqSNN+TE3l
qrsUGAwDrHY3Xt6joZEn/c4T5rnlJbnE/665QtOEzkHuICqG6xVOsXcOoswT
1kZuU0sw4OC5dliDgnN68iEt0aNIlQ0xM5LXBXJ5LsWfg4xz+Ly5/9M4npPW
Zaztvw75C5sCptpmcCVEaWlFagIn78f5957+t4/HU7bcCdoxDhx+VX2ummRc
FZCaPvotEY7TC6dP2xKQ55p/HuxgfucLG3d9upcMKtqpCsNvqRjhbPb3zvAA
NmxJkzDMLAWf0hKHP3IE3Pj4QHVDCRVcMo7nnbhWBZcPFvJclKXjjlIvpS+0
WnhTZ7/32bF2iDp8E2z5aNj5gbz2L9MXVJWr26tLk8El/qJpny0NbVcvU3g4
+7FDcyf/xbvB8Ln0zK26czQs/CIZlLyWgEcXG3iUp1wgB4N8VW9Q8f2llwlP
h4bwZd5niboPj0C1g+epPlPHIGP/mUiRMdx29EDfG20deHXwWa1VJgnHfyol
XdxKREuVQzA7qgxtpuOtf91ncFu4sypX4ASGndkbzirxb1+upNWssjSNgTmn
zw7XN2RUf/4omLScBKZSgsLZZwhoQ5RhKxSkodruPbOm+SkwndHCFW1BxV4u
z1PaMIgku9q2E8Zl8PpTtLhrZz/yuV8+8qSWCm3r9CPyfKvh4JyAZqILHR0N
+5e586qh7WaWzPONbZDqUSL88yENQ4J3bota24895+gLPpbJsG5v8G/GCxr+
5t3S9F9fH27ao/Lx0aZgEP6wWYHEQ0M5nWq+cqau7mLrpAaIuYChTJDIMXYq
tr0YKPClDiO3yTEOkxILeH2YoHUrjYw+HLGfapLGsFlB+1GSrTa074oUl7lH
wqjClxcMXxFRwKL/DAdNCXRbLlZxyswgR2/rwAHSBP59KpS9JPZvn3WbX2rY
4DIGrnwd1M3FZBx/kqL/QDcFljUyDHawEFCm6aTnrDgNj7W7jA0fSYNfRaIZ
l69SkfuXykxL9CBuj3k+x+lTDuGJIpsWzPtxh0O7JrmZCn+Cpwanp2sg7Yo8
bUcOHY/+mGQPDqsE4SB2aZFTLcB1/oibQzwNpfQvScu19eK3F4zbRtzJsMPt
/eFpJm6mMZJpK0zckkQmGEIlQVDAWfV30xgV4+P4km8z/efDifcFjIfOUP4x
mHUvs2fNLVid/rwygk1FW3fLjppD1+w9m5fM+3NGS4fWeHgcA8au/u7z0YJT
R2s4LnCRUD7GYuYMmYhN7j+WSSvXQPTXKd9DzBzu8y7vm8X5SRQItOzgkDz/
77mH6iGD9ONjABT/gn00Mp48O3fuQWcqcNw/S9et7cfD/NGqw2doaMzt8l4+
Px1uKoc6BQpSMcc/4fQjtiHU/z5Y8a6mAszTCsZDOfoxOJF4urWNCmprHnGs
16+DLzYFg1pjdMRvzv9pupWDMzH9e0BME1jqE55s7KNhsvSFw9qEHlw448v/
KCEJphWjJIUe0/DaJ3ZJk3X9+PVzm1u5URBcDdkj4JBIxSvxnFN19oM4GPra
3fU/J4DlzvTkh8y85+6+ctB7FFO2B7Z8XjUD6fET943YyKgdUxNx+SuzB7x+
nbv9qyZkR5Dd6otm8GL3F/b2GxNofveHowjfNfi1udXCOnEa45SrEnf5TmKw
drKlqty5f+J2geNCMX10FMQv7V8XvZeCPmIdpUNG6XDNdeuEs18/qrSq5TvJ
07ArU+Hl28wM6Be403tuiYL3tx/SHzQawkMzDzTv7K+CN3e9XDO+9OHJH9NX
c1qp8B72nw36VQ+ap3b5Dq5l4HNfj4ubKkvBOf3ntmilRmAfqOVwWKKhg1jq
K6tDPWjn+PW71akk2H/cLnqOqf/ir+JeXzLox/D/SKtfWIMgurZwxxOmPlAH
XOtfmA1hwWNXvlfFL+Hz24VFq60UVPG2kRDbPIat3Rt+kfjN4GbyUbeXKSQ8
d3Ro7fQuInK4c0YplWtA/NKjy7yWM/iEp9LgQsoEzioWNIsfvwru0lpJvx9M
Y8X5zzz3uifxkX0omfXOv/fUJ513yNb7j8ISTUfX7QYF42oNkv94Z4CMyNN4
B7V+1DprNl7L7E/slofK+EIyIUNf+MpcCwX9jyirZlcNoahn/X/iYdUQ6Xvg
vuXlPpQ+y2AcaKCCrNUC16G0RtgV3HR5hwgDPRrO5vKqF4LycGSg8IEGeNWv
KCXITUdbBy7Kn4xu1GDPj54rTATKd6JcMDPHrj0Ru+YOsR99P8iVnA4JBCOF
r6eeilDRMqaMkG0+jFeb5pNUCS/g4eDYdvZSMrbERcvTgsZQpKb09QMZU/j9
uDbilAYJpcs5YxzfENHQWL3vwrg62NS/ibqxfwaHyK6XYjkmsdA2wVX9jiJE
FMXIdghO482zjAyLPVMoTReRPGD5773zkSstriA7CgWHGaezX1Lw4Dtt23WW
mVA54CJ3nr8fp44ENGdrMP0/XLJa0S8LRqaPpdyMpmCQ1rzd44PDWPucGnzm
JNMnVcJv7KL04sxVSwcXpMKTj7Dfz6cZfPRVkXiJgWeaelV743NgJsVVf3ZP
PUgqe4Qd2E3HwkyFjm8vutGK6GggeyoRbktwsl7cS8NdXimvenwIGLr+OnXh
YCCIDK3QV4couEi3GOi0H8HfV16GOcw5gk8brx+nCRkZSUrmH/jG8UxrSI2K
ugm8DhU98IuNhDeGnwuM/iSiXMrmP4nr1IFYlj0Q2z2NlKXvZQe1J5Hoz2sw
6XgF5B0LtViJU/iS65Gkg94UahlLvfrm/+89smfrX4XYjhEwC9lRLphMQTnk
5dU3zIL08BSFmvE+rBSS+HnWgIYXOgu2jYV+g02s6XXjlhTcvf6r5Eu3YQw+
8Lygfb4OxDo/1E2/70XdqN5+oXQqzK88O13q2wrOe77lR2ozULOIdSwjNgMK
6Yv3ZyXrYO/46oTULjqKhfbPPnPvxgchL9bZJiTAVprEPhkGFRNX7R6H3xrA
9mEDeJocAAN1N0lx/hTkZNlAlro0ihsn2Waer3GEh9rzV3duIaOYSXCVfdA4
elLbbdrtH4JgcaguX8YM1m02GluvO4EXzcLE9kiqgV0Ln/z5d9PIHr6mk5Q4
ibstTJw2JF2GvOOmrm9ip1CP1ZYzM2IKiw6VuKYX/HtfaUXm+LVOdAQSNG6U
FvRRUFIpd6OD2TcI4zftXZ/Yh4Nm7isq5jTMlnKLb83PhtR00VWh0xQ8UGEi
xzU8jFy7CWYxww0g/FXvHY98Lzqe+CaiGEqFqp3sncMDbXCuQ6/rlBUD1zT9
Wsh3iQPdgQ9hofdr4Ue6RVTHJmbfH+F9a1jdjSwOubbBPAnADgI2jflUtN10
+vMaqUGM2sRy8cHRANAY/Vi+S5aC3w3abu9sHMU33E0lf3iew6vwq1X1uUwd
S5H6ubKRiJTTYTNLH4xB0vik6ci9GcyOZZv8XTyBq1Oa27cY3oWJj3ktRxSn
0eJzZLzgz0mUHc+VnBxRgLFQFhtL8ync8eJLqErPFGpfOZLBRvn3/vF+Fxsk
OQ7D+Ly1lhEHFdOeLT4ddc8GsT6hTUtWfWgdXatHZPqbs5DSbtnZHNj0oczK
7g8ZNzZJ1Z85xbwvFO+f7382QUtR0Mbanz3Iu4d0g9WRCmezyIJ3OTvAyGsq
7qYTA5ctunef//IBgsjmwk6RNaDBXyont8jMb3K1Zs2yPRiwiaiQYBsPXOPy
qrqOVLxtkCWkJDaE9ZGTW7mV/YFVtbaSe5qMe3XuN8aojmHKuDbxw75nYGbi
6ZnEzGObqbt/V7kSkcZdYlRc+ADyl+/Vh22ZQX76mlTcOYn18jw80yGq4Geg
8tF9zTQK/CS0spyfwujKk80e/Aqw5/XRo3EnpnCsZdbAddM0xqT67AwS+jdu
LrudHV9qE4FtW/3bJ3YkjLROpC41fgXhy56N1ma56OSZ/saun4FUgfgOF/lY
cDVmpQhuI4KQKVGxJY75/k9GCU9NLJxTqLYnrzCg5lnERfuBnFLjvCLngZ0h
oNHKEpVlNYCSMwYnckap6N3TERF9LQ4ys3Zvdzg1gBItnLknaVRcf2GT5bxS
PCjOdh/Y+ZWGvqu597ptekD8p+cG/+RyWJMePqf2g4p9iylccwEEVNx1drLX
Px9I0t8cVS4MYvAJ8eJdj6lwiPUe5/kbCCkRLNr9X5OhbkJb+W42A/azdNle
6UNor7uQktAwgGGhlSWjXlS4GUeKs31XBtypMn+aptJh2bpzcuIbA44xrIJW
5kpBO3OSfnF3JBRdfjUXd58BGjtuQyhTl5z5vzpfk6NglkIq/0H9Tlg8YO0t
azEAEXK1yg84KXiv1pZRnz6KB0JznRwqSqFnn+MlNjMqdvKoFLPsZvaliDeq
/ku9kLJ+7WAEjYLGPvtnT4mPoG5rl2GPeDT437GxzrxEwSNlDbViSaOo7fpV
de3DFDB36Yq/ZkzDppsJdyhX+vESoV7r0ogPdB4rET76i4o/NlqKDh0fQCW1
EEmp5WAIbAk5DD403FrT4l78qQ/3G3fOfBV4CqsxN4O2fqChuqdSzKhxH/YW
JzOE17yCT2d4kzZ1MHuNazARmX2/fZeEr+2qMfCS/hzjEmX2xtmgK373CfhM
gUV3n6o1+HoQejUSKDh81q/x/s5RFDl8N29oozoMBk7FfRWg4ofNnJ5qr4fx
4MwXj4RX90Ax/ZZB7X0y6i9u+HlKYBzF9l0/dllBEf4W7Lb07SfjR78w+TbT
MZStbvpldOcmGLdKrPiEknD9lFNT5EkixkfGekbM/3tucKXI/2Q9Rx5e9XDn
2NvLwFLXqkZ+oTgo7Y7VN28ZBy3hIkVGPwlH+ITrP7bGQdPriFzxvwQU1ngl
7vKbiiNzj/Ml9RIg+bTKDycvGibJs9pHNPXAPYntn1qJFSDH0se1ro+KZz0e
4zKdgMd3ulxmdmK4pbrMKlEaA9ailIQ/WQxI2ao5JzNSBh5ux44NqA+g2UH5
7/5hVEgwXfovy7Mc2vwigwVefsKWdXdJ+dcZwL447Der3gDDV2hij38z8ZTl
Is4ID6PwQS2jQztKIZW+1D97lIbRw8eiXCNbQMdNSsbSuBsE3r1QyNClYnWW
hbFv4BCa+Og3nxGOhr9RxmVvpykoEiNopr5/BJ8dqW36TzkFmq/ecrnmQMOO
nwc67i704dgkuzVbhA+cbTm0N4z5fS1L31ow1AjIWzCZ9qo/GOqcG09wMPvp
6RuNVhJMvnGXyMaspDlAq5wVvcODmXvuxJ0Ry+5Dyc1htrqlrhCcxVc15EfF
9HuFkg0jg3iH4r73kKUxEFmSRFlnqfh61+3H/HcG0MmhrUvrgxXw6XcrdalR
kNc4+TPrl1F0n4xkXWugBnutfxnfbKfg2zn+H0oxIzhH6V/eHKUH59t61idv
ZOpnxQnLmyHjSGZ8ClrwvAK5v7SDcz3ISPL+Xfx3Zgy11rA5qquqgKHyj/u+
iiQk8ap7l0YRcfwN87aY/ps/FgkOObaf81Cv4f3RlC4GchgFp8dyx8Pl0As8
t73GgVp0mKWZi4wHtBRGW0jxUMh7o7G3moBJ4uc3BnEwe/mT698bXyVC6u7n
QU+ZuJEDyakVor3wdasMa/6pKog+91ngTBEV+bXYVLaoDCBX2KSrLKEItJWi
peJCg4Bb8riRdBoDrPbmbHowUQ4KkZ8EhSYJGE26K/4rkQpelB7nuYAK8M2V
UP+jnYd7cKNN8G6mXhVd4E7PbwR+GlfJwwIqLjpl+syeG8C2ro4f8kYl0KGO
XxazaGieo7QzO64R3mWtc0o17QTBvlbeo8z3NV5PbKgRGkTnXjtHO75oOLdu
Z1qOLRVDzy3tWcM/hNpGTgWbBFLAp8iTY8yJhvJbY3/bd/bhVMtxoqCSDzyz
22LyVoWG8RcsXMyS+zGAbjb/KzkYbtuqv9I5T0OZqOqbeewEZJ/dIJ4g7QBv
shlZeyxpaPL1+PDDg/24Rv+I6ZXHrpD0ZFvkU0UqWtRZWhf/GMJqY+VV0Z4H
0Eep4Y/NoqIc52cTo1uDWO4Jb7xbLOFlZGH8BCsFrxu9ezh/eAz1RyzWhObc
hW9ftBLNXCmY6xckdFZ3FEtfBP2yydMF5YpHwgr5JHTrDbDYsIGIyR6zyyoN
l+HuRbXXQxJkPPbH7JjEg3H8TE1vMlW/AaaSt705F2fwzyLh69s1E6gnzi+Q
U/rv+RuFbdrx/vl89GP1PirQwcDRinPLZzclQNj+MIfu8+NgeDZGXQfIeHE2
Nml2WyIYjq8O2r4jYMDPKltzHhruqZrNUitMgs78d6tZzB7LOdAszu7ZC6fn
N7+uiauGg+ZKtysjmfzhbezemDaA/iM7cGNOCVx40/XruI4GqsSUfNGOZUCH
oCEPfbkCKhOMGaVPCNgt++H6QB4VWo+v2BMzKiHhID3CO7YSS3dbV2+uoQPe
+M+wka8Z1ndqueTdouFHhiLZg9mPxT4r9+qlFEO9MG+U2TY61vUsS0Tuqodr
H/TNFnrboVy7efQFOw0XlQ93s80QcIFFvUTp+ydoYr3Am02k4pq/N9573xjA
Mbm4k47jyTBF3vPJ9iUNZ74Xi+sR+rDMwmRoPe01qGY8ettrSsOs3bE3xCT7
8bSc8jo2+2Cw5iLtucfF7DuRmgaGfQSkNTByT2Q/gTDvqxnrmXwbJDdFsGX3
4891YmqSAq4gbSahobhMwZ2cnkdOrh/B+jXKJ3XOPYCup+o7r9gwefXik4ez
xhAqHmuYr1x9BMtVL/5jTyWju6RmeEnKGGbmvOu8v+EuaJ9iWXkiTsGe9eda
oidG8U64Ct+GVh0Id9ZNIhqT8LYp+/WHT4lIHsmQa+O5DNJ9nhdMBkjYaFPF
eYowjtFyOQavdK/DHy9n1XHFGdQxCB4b651A05YT5qO2p+G8rPjYqaQZdDkr
NSpsNIEHk3UzQ7L+PZ/c21ZOf92Tj1Wfy6bsWhnoKvHBbtfuRNDYSb/6a24M
ps8ejnhnS8Ze3ZsLlmpJUMsy27N4l4AK9R95OJh9cWlHk20AZwqwSHWydzP/
+9dvk/4+2gtcFYS+jFO1MKf6XcflJRXr50zNqjYPIvWJRK5qPsLCRVdrp8r/
UMJeVD8hhAHv+96UiB6pAqu8IsFJTgLGfRVbZKmkAoendpjhdBVU1QeuHq1s
RJkrTqYF1+lwwfDXJsGHLXCJjf9raw0Nj3YrXnh+vwed7qtOnP5VBGoDpwUf
6NPxuRlxaKi5BszLXcKKPrRB9Gdels0XaKhiPuGnOtaPvK+TSZWJn6BZlvvx
Tua5n7rq8ruCflS6XfekKCQZKosCKy8z871PsLS+54Z+rC4WWd3r8Rpe1Nm+
k3hGw1tbZdZeIjMDoPCbjRslg2FpP4PzXA8VXcxazmwoHUDLLWsaLh19As97
FJuLRGiYeeiS6mZ9Asbf2a74540LSCgG7K5JZea6/v1//m4exeHLnQeiPxrB
0JSFxZXDVDSwaZ4JfTCM/ErvaJePPALJ7o6NqRpkXNfcGLp0ZBzraxN4+PVV
IUVycGqxj4yxpaSaNLMxtH39ymb9lDaYyY5Wd/CRUMKbxv9ohIiL280V6LoK
UB92Z0+mNwmTg3+/+6NExDfiZ8D8oTIUWFkspK1Oo6bootbAkUlc/KBsVZN2
CqQsIy/LM3vWuPc1728lE5ibts9dIPXf89vh11URROsClA88Nh3fxECNJ+e/
fTyTBNHg5ZkVOwZpUe8d1L+Q0Xdxua8zMRlU93r9NOUnYOvCPd57zLww4LHU
ZmGVCtYyM9vs5qnI+lOjZcP5Phgcv3NPl1QHQsEDwme1qRjuIXRng80gqj5f
8Nk8XwbB79oU7n2Lw6N2w21nPRjAzTYuaG5ZDefLVwf6o/pxIXCkfk8jFTq9
7ts6nKqB4Z0bPfIW2rFhunFicyoNuk5N3XkX3wriF66ZsAjS0X6EvGBl3YVa
Ocf+HJQvAsVdXd15EXQMPMzm/C6uCjzi+ZWD97RCxcu016eYvtPVPfmikKcf
0+5q1une+gRZfmezVZk5+eSGXVKPjPow9PqrJYMLyWAQWNMWcp+Gp3ZctG4w
6MdWvjHfli2vYU/88TZRpg9OWv3qn+roQxHqtLbtVBA801urJBnO7H2b/9TY
Zw3i+HOF+xER9vByf3K9xhIVCWdjcm8fGkCh/+6HijU6w6nW5mPPdSnYuXgw
ckPoKOaPHxoeXjGEiu1B+ruHKehu06m1aj+CgedDotVuWkA59wj5FhsZBQ23
8hl8HcfT4s2ujnl3YPa/JyQHdzJuuD7e2EUeQ7tdT9T8V7RgA33+3K3qGfz+
eYH7xKUJrHX7lMWZIg9OLz0tuKVJOGGq98Ahl+mDl867ddkrAbfDYER0wTSm
Vtg5yj+fxCMqZ3rE5qRB4eiDH3f4ZnDE79g9va2TGGb71i487d/zbcseo0uG
nIW4xYGill/PwE6Hkk5F82R4ZkLE9ZpjgOSE2PguMmYWTrh086XCo3JlwVJi
P0bEnh+ykaJhtyijmoueBix83Wu21FLx9/Il54IPfbBRWqFmsrwBNhmqTRdK
U3F7tSprVPsgVikVR1gerICjHxZJanqZiDXqZ9abM0BJGjqXa2tgi955teHT
/Si8uu16dysV7kXabVCNrgXnG3xic5w9aCyx82P4FBV4vP/T2W/eBmpt6+1e
mNBxjmZyrr29Ax0aW3j03heCeXJA/YkmOhIcz7KK+lXAyXM3btKMmqFme7Gg
8DsaVkOLqoRjH9qpCF5enoqCCguh5uhyGooO6I6L3ejFw2Tp5G9DSVDQMWIU
pkDDz1lnOB2G+nG9bbnqxwBv+Ov1/s5ppl5FlwSN/cfUK58n9eIBgUGgZVKS
HK5JxROzrRd0soZwzcxSL99ae8BHegrbaqjYpf3L+hrLIKptVr20uuoE2c5T
bVRmDz2TQd7Tt28Mn938duWPriEkzedKKvpT8Pu46PhW+VHs224jddXGHDwJ
1iq6qSQ8Kvczv2gnEffxyZXu4LkDTt86GDbiZNSQ+/v6k8k4kmS3r4nfrgWs
B5wbgp7OIFHmdEb7pwmcmvtP22r1Ehi1+DxuI84gi4RPZDL/BJqYp29Tf33t
nzxZ7P3m6t40jccJFlyqDyaRq2huy6W8f8//reRfWCx+KkT61/ChzzXMfJUo
ehwzUoAnxzXlD+cYtPKJSD/moODkdcPoW6Fp8E3BPeB7Uj929xTKn5Gj4XVD
1ViyQgb0y1wa2PGBiq9iVesu0vqg+vVLnf8qmyDDnhlWN1ORJ32ttYTUEAax
RJkWW1fCp/ebH0h29aH6HP/D+jYqsA8/PaQpUg+CdwVXI8vzMEx5i+aIIgM8
515+PHiuDmTWaY6yrCdguX2+AdsSBY7MCl9gm2+Dh31XOB4xdSlS4DVDzaMd
t8j4GMuTCyBLUMKjd56O5dILpGm7MjB8e4qTa7YRZt75HxmMpuERI3+14t19
yB4a9NfQKgpu1gecppFpeF/btLT2aQ/GbT/B+dUmCc7VtYc8PUBDQkdkh54j
AWeEO0z3rvOGbduOTnwzo6GA44+Q7RL9eK53c3WlVBCIXvfyGuGh4gI8k39d
OIzk0Vcz4RZ2IMoQsjnvS8XJrqpOddogloQ8vfXxiBO8f9cgmPGNjJKTfy/F
xIxh0NL21rYiA+hMrJjUlaUg6ezujvGGUZSpGfpl52cGAQajnJJaJNz339cS
kjcR5X4/P+xkeRu8O84+Nuwl4U7ihds5I+P4OsjMUUFSE1Qd+3nrjs7g5zS2
OdvFCfS6q+Gip3EJ2GsYdpLvZzBB0Ew6xWkC3WIb5Cw+X/0nT94ern1G8ZpG
0T2xtOqMSbQ/ESUtW/vv/QjXyZ2BIaeKMFLZLFK/koFtfPyjvZvSoEHzy7vX
+aOwLuaBUJw0Bf2v2XIc3pMB89ysbiyP+zFuzUVa6lVmP94dslNaMBMCNj4Y
nNSjomuS03+lF/uB0NhSNjDXAr8m2jf9maAg+PbpG74fQke16iepfcy8NBgT
td2+D91Znpq5N1Ph0Os9tptbGsBjYI3/9relmDTHSNHkZ8AXUzW+dXX1wDrR
3JhAZfb8L5HZ3TNkqN5UlNBi3Q67CdFtW8rpaDfEJfPEow39Lp9w+6RQAAIc
30MDdzBwPiOs2Cu4GFic7xJrMhrgQcRWn0OJNJR0bpN0/d6LmVPhx45PfwQx
RxPO9rV0nF7IzDpJ7MbIiJpJwu9EkPLauuXBLyoeywhWnDs5gD1FDp7Ldl4Q
F8nVNnGbhurqmbtefOzH0NNdhTbNgRCgs0J3raFgTmCi30TtCD5Qrt4t2vwY
Jhy+aRxTouLmHVtul88MIcuTc4Ja118CrSGu6Y4eGR0K7wpUCI7jcm1uuMQe
A0hf39H2c4aMl03DZsdvjWH6z8DvYsmmIHqWPeXoWhJGktmUB+aISG0rzD3Q
fAuchusYpa9IeO1aCUv3HSKayqxUXLytAf14d++28Wn85d7/+tz1STy2jqjP
kX0RTr2iVVldmcEsLY6fgf0TSHGo3f68TPGfPFH0tHwdIT+N4Z1FLjOLk6h4
6wfbl+F/74/MZXdOHWsqQsuTnzbMIgPFP61PCHFPB+/9mwkZD0fhrOkWJ0lj
CnZkkIPfLWZA47u3qqNn+jGj9J1vwx0afjlx+/w97ix4lDI+nb2fill+CqIi
Qf0g9UFkO39CG9DnuRR58ynI4E65ivND+InIf/uMYQ3UvPE8XL2jD3+f8Prx
opoKtWPS7cdDmqC8O+2t7FgFsq1T0OubpEPltaPro6wb4Qshd2y8axRVcnyP
vcghwa++g2rKg+0w4Joy3UugY7I9Y5TvUyvqV3deqonJB5ncgQPu0gzk0tf4
c4MzH/TVtKP8wuvB7qRMalQcDd+on1UvWO3FG4GrbbTbH4GP3TDXZzsd6+1M
I/z9upESy+JT9DwRTgqs1H2qpOK1Yy9aLq0fRF4BNuH1fZ6wOrPtM/sJGgY+
7GO5KklALcenvuvvB4LS5LITz1MKCt6mKFRajOK+WxKNZUcfw4Xy2GSDNVRk
f5ovOkofxnm+UeuYhy9A+nvmcYO1ZAzlvO2QHjWOuiz19n0v9IFL/OSntCAy
HiEcljzeNYYV/Jkf8mtNIENPVCY0ewaF2necDFCfwBQ9dX+z47fAJo+9hSFG
Qv139Y+7yohoxH5ho569Orz5wogOCZ9GHo7duToRk/ilhmXCe9tFYKlJ6/i2
NI3d6/8Kuhxn5vN0z/jmySv/5Emj5IXoKLZpHLWxFaKfn0Ljjwcvvlz5935t
Zcp+bap+Mf5o1+lSKmZg17ts4X1vMsCx8sGDJ1tHQeHKsgDHewqO3UlfDJ7M
BHaJRCOf1T68dZ6g76lLw/Gjghs38HyDbblfBmMGKei63ezChaF+yNrgEL5j
rh2uSbPph3tTMN4phL1QdRhDWNz6w7bUwdGthNRn2Iulyu0f+PKpUNbgtxLp
2QIRbgE39+fUoHZ88sirGDo8SDvRkSTZDE/pYtw7Isex7Jx5dr3hDCjUH6bn
n+mAo8XEUi8yHT/v+8CaUN2CbiWvR8vW5MMv7zL5izcZSApL+6Ug+Q3YHCge
2l/rQDfbiZgXRkMx1qdrhqAP936OTtyVHgl5W5+uX91Nx9LM5a37n3XjRslX
Ws9nE+C3W2HUSx8q3ki1eXL6xyCyHnvzWeKkJ/gFRl+5uY7ZQ58kKD0jETA6
3dN/GykAfvpMCJ84SMGleccAwx+juFZ/r6bFa1tIe8DNZpxHwQmpbw6Hlkew
wrtvM9sLRxA4Hd6sn07CLoLsS5btRAxu2rZ2vvg+bK30Ujp0joyv6dc5Oe+O
o1ueuaby5ENQ/ctxsvjBDP4NuaW0LXcCv7Jna96QuAkBRX4id/tncDI8szXy
8AQ+WdojKROpBnaHeMeN1aaxjqWAxDY1iR4515KXXlwA++xyd5HMaRy8vlIW
4TaJdOHNbTE8/+bV95VHvkuVU1j6uNZ+g9MUZi7zilUL/ZtXtU1+JSs/itGL
9rTQPJ+BcpOKEgcMMmHEkNqY5jQCC4uVPhsqmLy4tEAKJ2bBz5rK7LnqPqw0
S2DrMqZhxn3PQC7hbFj9pctID6Cg1odJKe8DBNA4+E30vVonjN4EuR2qzPzZ
WUX+lDGMk6+MBTQm6sGx6s1FS4te5MzKDw7+SoWetLp0UZU2GJagz4tWNeCt
XXk6krfo4F/4bCmQpxVYfHs9mq5O4MCRGo7mH1PwcE6bVurRAbOF+2mX5ui4
NDOzIv+0BTdxmrfrP8yDZp/GirkHDIzyk+99xJICf4XfSlFqasHonJBtmRsN
n6671hOd3ofbVZZDT61GQPqvpfImPjpurJ3o0fvYjWQy9h28lwC//E8ZPrhK
xehKO4FQ+hAqKhWWO/p4QMEWcfL6birCctaHL6UDeOXMxUcnHwUAB+ft/W9a
yGjQqBkf9ZyZw5XOexyZsIH89QFJAw8pKF/XTA/3GsXre2zu8vg+B237II4W
TRJaeJ1yN3lNxMSrs8t63vcg2NA6/cc4CWe3u6U3to7j4rEN1qwcD+EL+aV7
+/YZfBiq8MiNexITqXeNTq5VgedNPovgPYPr78tdE303gev2lsvcq78L59r3
vfbnncY+bj5PI7EpDCFl0tpaAJQtdstNm03j0juNb3xtk6gkEkASULj8T56k
TKauZHhP4Xn3Z4o2BVMY+eZuk/Xtf++1TUOHYYNXCSpQ7xtezWbggINA5amr
WZA7Lt+W0T4MteNGGeIMCkapJEcemv8GTuf3ym5624e2Gv7bkqxo+Njmiabt
7RwoCDvlnHeOgopsj45d0SOAh/9sAH9vF4xUa5fM76Lgtr5ZiN4wgtrJNMVT
E40Q/SWvbGBPLzZFrN7Z/4YKfqd7+aWYeSmNQ2n/B+5WfMHqdvsJlQbXC5q+
CXm1QfpP4UBC3yTOnN9UaWcxCatr5hQvlHWAlnCgwfaWdry0l/32S3saaKQt
jHIHtgN57e/pHAYd0xpTbTjSWpB0LwmM63OBqOJZpOvAwLDeLiuTmmj49bf6
+O3lGuBM8pb+aUBDRcFq3zXK/bjl0zm1oUsRMP/Xs+w6Ox15AmR/rfvTjTs0
RaawIh6WLsmvHWKhYoqB3jPRhWHcKQSxvP3uoJufOPI2nIpnkt7f35k6iOa5
PJ/lO/whp8SJ0uhARh4eRuOjlTEcf7CrZwFsQMd6j/EzXgoaVNrucdkyhr1t
kiSL0Gegt+mU0J41JLyxRcY4/ScRF9+y6S1r6IGMhXFn8hsSti3Vnlu9QsQ8
hlAHQcQYHPlSMjgbpzG6V8tqwXgSg98cGqRMXocfrILfl07N4AFp5URXygQW
NhgZyCyrQie3cOq+jik07LsamGE1hU8UcGNcuhws6BYvcx6aRlLK+cVdu6bw
/qa4nzpOCv/kzyEZg6d4YwrjDUnTt79P4fZdTUMPvP6917bxlW4p2F6Kdtfq
dw+kM1A1aP7LzIVvYCR5/f284DBUPZAq0djDxO/FEbnRnTkw3CCd7/2LAVYu
KRfENIpKd6se2u0emQAaocflWm734ZX238WLDjSM1DV1cvuQC62aqdP2g2Q8
JmDNYudHAF//rGN/HXrAWbop2HuAjPVZaJCpP4K/tU7Q5be2QPvw53BiWw/u
CousqjKhwo4IZ6En8R3wNs/ajKI0jRMsG4nqTUR4b/GEfJ3SAcLOZQksKx2o
7lExR5eggWzW9w0mezpAtUWHfc8UHVeW8svyjFrxgsQthedHc+FrmPKxBTcG
Zhpp+uW+dIMb9A9y/lADW28nR/mepmF+jLSA3SYC7hc/ZlvvGA5HAs74eHyj
YCa3xxMz9lEccbrqK3nQHYLjPb583UvG9weTbtOcxvH0sRN//o+dN/+m+v3e
xzMWiVKkOZQkjaaobGNSyJBEKpRkCCUhkpAxpQyRuTLP82yb5+mY59kxnXMe
zVLK93z+gOd3rffvr5/OWte6z37ca+99X/u6Hms9bidpG6DW2s+lZ8xjR7iS
RsmNGZyUl1XJOW4IjEff13k/n8NXf0IEIgtm8UvvUllx+yXYfb5EgC+YjI4B
Ox/uSSfjlzuzzPfe/9+/1/gvnGHTSTlv/hK8Ay1tFnEE7AoaNnuXUgadsRdL
/1SV4M1VRYEz4QSEhrVlO6lVwH3mA0qH3EpRjjOhs/g1ATp6i8+D11fCRrX6
G9tvluGPF3/W5XoSMDJtvZH0uxLKlL9/FL1ZjiOJQtnzDgTEn2VtCGOoBpUC
EaMNHhX4Ny3ceIs5AQORvzvy99TA7MeR4LAORNQ0zOnVo/eR3DjTLq1aEIxV
NzmV2IkkjxDWk7lUuHtrc/VnNhJ4t6QZKSkkQj+EqXPkEZAYcH7o2e1K+Chj
5MvhkYeeHtLaGwwIcOAdPG3l2gD/XP04K3eUouPvI823xAjgfztQfPlfI7Q1
TUtnc1ShrWG/RjAjAd2u7iJWYc2gdnGdGbWmFoVv+TnO19EgysxzR5p6K7Sf
uKvHk9+IB00qy24602DqZhk1dm87WB69uid0qhXJdi/GUvfTYCL6XkU5Syew
cArVpCYSKPkt5sKCYD7WdI9nf/xZAQyLXw8P7aHiY8WA79a0PmTaev8VrboZ
MrVUyj5HEfhBxjrKzCMfgwek2lZfVcKktMQhQxIVs11OFXa96EYFXg6+f6JN
EFM5IFf8lkCFfOJ82Ew+HtISOLlcUgU25McxCpo0dNv6+3xkbieaCnGfyGls
gLcnmQYqXxCorX0lSE+lAO+U2f3OY6gB53SR1ecpNHxx44daRkMryj5OKOsI
rIdvBnZl+XQeDs4PajdNLcDkHr6pedNaMCmkOTIu0XDlh5BzBnsTbnBhvX/9
WR0ofRRrkTAlcG/woflnmwvR9OjJfp/FOuD0U34os4PAuaTjEde31aOvpHmQ
16taYJIMCWjRJHDHTKDMxceFeFz/yOn2tw1gQD0fflW4BmV3i/0+v0ADG/cw
2ZC1ZiCthRy/IEOgGoW5Pru9BhNtlN9uLa6Bz6HSOxdPExiaxluqMVKIx3gL
5M+aNEG963H/1ehG/PDL9VZzMA2uM11zavdthdXsqoUULQJ/vFa8lypcjTwZ
LU9u/a6GOe9ns/O7CUz4Fa/6Tb4ID720vRtm2ALFzdV8GWrt+HlD9Wc+ERrI
VhzO897fDtwZ87UlxgRKuO72uc9Tha4he+wMNarB7/rAvn9/aJjvdNL5RUIR
DozcvLvwog1qzuuRfXm7MM447klSAhUad7g1yVd1wE4LT+fflgRGCpmPbvWv
xDf7GDd5ZlfB+cd9cdK9NMz7Ii/GyVaMTbatrnenOqDNeTh4155efPm6VZO8
ngrWu2r9LfI6QcZ0qVL1AYGBy2XtzO6VONh8aGvF/ipYOPuEwTWRhro7Xc/d
vleM5u8n7MXPkODnN/9b+pJ0X2N+qkn2EgVOXtO9XuBLgn3pz6VYHhL4uRy0
3b9XYt47ie9q4ZXAHfWG68kDGr76dzyfv6YYK0kdVQc/dsHE+8BmAWsCKwO5
rO6PViGzqMF0LV8ljCum+Xw8ScNp31+/nLeXoK3z07DdR3rAXeNDFtD75Gfk
l0HR0zW4p6TgwjdpBB25lUPnjKiQ9XbbEA99vr/TdPL3nY8FlGzYdVWXCvxC
B4PUXAbR3dIqje16HCicCeUsViajy9ST04xvyHAq5fqR2UtV4KX5xo33IBnt
jPlv2aWQ4a0V+9nV7ip4VVIr0hTahH7rw6/FNFDB4WnEg+7obii85Zhnn0xB
w67jZ3FyAB1V7jQ4xbXAuablWG/9TixpS+ZdvkyFw8eUH91v6YbiEN4vt0cX
kcvneJK9+CSSDKcMb7HlwRVZvj8rHwjk3S4x90AnH5uMr/+TZ6wENY4+K25m
Mvq7Kgm415CBdyAj8qxxNUxTqt6lTs3i6KMEY6ERMrjNdbKNf6uGKivS96zm
btyvJLPWX0WB39nG7+rnu2HNmonb5hkV3fNZqxiFelHeBLldvjSB8OKGiNd8
/WjBWpjZuI8CatorJnnL3dDVp0ZeubCEotbrKvh9JvCCV4rsyZ+5MMcRUKuW
uoRbObpFymrGcR3t957ccbpf5Pvp5xNGoElBX2Rrbj4WhJr9aOKn94/SZdOp
yln806E5pvudDM3hXx7veVkD2UVe/gXRs+ifyHaNlWMOmldPRIqL0Hn7HKk6
69wQqgzUzVVYLQHXkPumYyvdULVvIkqWl4YfP485ntvYhYWf+NUpjxrhH9Oe
s4mSo6hTlD2VkboITPw+RYG0bpAp/G07ykxBzT3O7RaeY5i5yY9Jsj4Xjp9K
3X70KgVHqwq/XtAZRSNTxgsbUnLBOCvvm9NLOs/oS0c18BTgpiPA0WNQDTrL
DTUHXGZxc5K8z3HBOdAS+HTZtL0W/rnb5orqz2K7cFJynfQcNPVoBn1xrIML
ogrb49dNoLBkkab/+AJsXl+spz/YDc+/da8cf07D1Z3n9A6stGOK5T6RwEMN
wK/q+fqyxiS2TalnCG9cgHXPuC6xl3bD6iWlT5UxFJx0PHOe/+QI7g+788Xe
PxeuVMv+4pmioEBgwXDe3mG8njhDlFrkwkZjISsPVwLFnE4zHHcqQCmpeOFv
mTWwbMHu1yoxS5e0+z3LL89B+ZlCrj0i9dCIt68xcs+irNfTGXbTOTDRt796
YqoexL9/kTLzpPsche/yu0/Og7jpw4XdId1wKHj13IM2GprxbK1sb29GLgYH
/MRUD2c80vd7f5zGipTD4+E6c5C50MK23rwbDr9djsiiz6mahAMv3HcPYRRf
Ysj2C7lgf6ZUYr0OFR+YXvu++cggPj+6PrpcMBeY+ISFL9F54Mm1UJPB0QKc
XFfzb0WwDrhYrke0Umf+n7/Si3WagwOxBT/t4hpg2r/B83DTDEYUFfrYBMxB
39k3FLF7jWC06VFieBrdd90U6Xj+iAyH7Ati9p/uBtkLizbszATe445+d9ix
AbnOWvuKM9XBalTGWnos3c+bONEcQmah9ldLnB9TN5C7smiBdH8ae2OAIffi
AN401OEc/ZsDNhZ+y2VpVLzPcfFDinM/RlVZ5UT25UCIYdXRu9cJ7BXUZNBV
LETO9m8660rqYSRRcvf2TzO4MU+L3Tx2Dg6tN25AySbYOrH2L9B1Blf3PxBw
zZmD9uaebZabmmH+6w5m/udk3Bw6JBVfOAMfZOreaLV2wS+n3T+FjhAYf6pd
MGikFksU030y99fCi7CTDBqX5zDi7/k/K8PT4M0r1awX1AU02RCNr/S57zZW
JCZS0YcvhlU37s/IAXa2J0KBX+n5lwwQ1+Huw/put8Dnnjmw2nTgqY4ygRVH
hOd0kwtR571R1x37RlAqz1QPuTaDQ3Vv/kTWzIH5m5g3npRmCC6NzhI4NYOS
Va+PZHfPwUebPxxmPS1gWDnvFMoxj90jnzcIMk1DZYgXj75+F5Q4y79iUiFw
+mfSm5j5ahRIHDM5qEfnAb+/6YYl83ixRIvh5dEp2LRcuHNxbxd4cri60Dhp
aKBkt1XMsReZGcO+9OvnwFfulpQbh2gIqo1DdUQP8k/xZ4ofywGyJZ+UEz0/
onmRFae5ivBoV0BWm34zBHlrs53aOIPC5PfnUqbmgLG8V+xuXSscL3qeVjk9
jc+2ByQ/+DwHG7Y3M49jG7DODmwg9BfQP4IpzP76JMiuUzN+MUMCEV2bp24G
dD1jqPv1XkAVHrxkslPhQzXwfW2zeUVZwECrT42fX06A4t01d+8UEkwU/O46
cJbuT8O2O65z6sFToyfGPjLkwJsff5Q91el+c++MZ+3WHsx+unfdsZ5sMJ6d
LNi7iUAH2ssxq0dFeD9aW26/ZSssvXQfbCmdxu0bBCOJ1TnYcWHzBZHadnA6
7rlRLWgaXR+vUDZtmId1DAwMCV0dELkjQtrYbhFdi61iZjzG4YNTkaT0AxKY
2ICThxmB616ey/qElehf9sJR9l8VZN9We+NC0H1T9jeZkO+j8E2t+VvDaRJI
vjJxzr5Ow5ZXbjd+Yzfmb2Uz7Y3PBomI0w2jd2m44YJNmMXTbvwRe10t8nE2
8JeI9Zst0DCIZUfXjoEiVH7rsedpejuoZJPcZC2mkTrRWZ+1ZR6uz3Va9dl3
wimJRub3ctMYycXxpWLHPPQ0brvZsZ4Er/+GufcYL2GKh6HSC8sRSJOmvtVi
IEHcmFeElA09P+tksfFxJbqzGt1pNasCW6qSmmrLEjZeVo7ZNj8EqT9DVOeb
OyHgLPf6kzY0VPp5LnriUjfyFZzte3Y+GwKzYtXbHtGwVZ3my3ukG61L9/s7
82TDnmT5KA2kYeWJQ8bHpIuRhctlb9jbTqjUcjE04J1Gs+6MWzv20/kw5ZGD
RQwJ9q8KTjktTeEtk27JmAPzMF5fQus72wWad+xoUaIU3LKLg/Gj+SDEia+c
fh3SCUydgS6n6brIaGbvbcG0StSxTEphGqkE9lGlXh8vCgrWa6RpE/1w5LzU
UzDuhLErRmutDjRsbDDqrNnZjaq/j5t5T2fBji3BMYqONNx6PFsogo5/jPfr
Cc/KghCJVNvIABryvNqifzu0GBmKJXjVl0gQUHniJhWn0JbzJOupQ/Ng4iCc
DxNd8HinykJW0BQ22165mULHtYXdgkm+3aAhSimPGqRgSvjzXDvHPuDh0xpY
ONoJ3Acozmm2BLpN6xqYGVTht8tJhprXKiFG4WTzHSEqllULLRxi7oXkLF4y
7WcHtCav5Sk8piEp4/XuYyLd2NS7HJrmkgVW7LMuJLoO3NiSwSak2o25nuv9
slWyoG13sBjjzBJERCfZM3KOY8PxywrsC9kwt2H14onOJehnGQ/SvzyOjkkS
N1ie5YAs+6jUjDYNrw48LTtLK8ayw5r66253ww/P4cTCu1MoNPH+5ezBeQho
+5mQJ90Dd7/vtvxzegrlXvtXFvHPw+glMOD63AOPH5bsV7tPxbt5hWHZb7oh
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
i1DkuyktlKFjTd3eiVtdfg9iie26jocfgvZqm+fj/nSQ/j2ip/aqATJ5ORSn
IRwC088r03wZ+lzajddmbSM0Jw6z/bg3j4LzKfvX8Degz175hzYfOuBU1WVZ
u/J5fBPIs9llbx1+Pjx7fzKmHd68Zkn8MjyPq46yvLluU4NuKS9m/VzaICvb
2W/qxzxuOcytb9xbhTEP4qP5nVrB+FmzuuxmOoq1FYeZTr7HyQP9O7KDW4A5
pF2wXoSOMilJe3ZeZczxw4Rb5bnNkHno1jkJGTpOsmh/fK7yFg/KrH7uN9cE
MlsG9zFp0PHi4E+tSqsy9CrVfnBLrgmu3RDKeXKWoRt1Uheut5RgxwzRcSa+
EZiWXNWczOg4lnwoKse9GE35tmkPLzVAhUevnsbOSkx+xhJIv8DwESkOMVPM
9SBdlacfGV+B3Xbyhj8s6KDus+q3Q2QdGGudYMt26MKorqp1j/7S4P2VCyfC
oANkhXruS/d8wEbznJ27LWlAWi+2nprUCR7bdXifMfciD2vWxNJuGvxmeTSX
vLELMv+qvlRe34ffJEzhN40KVioT/VbSXYw6pe/zl+/HJIXQkZlMKmx/1M16
j3HezT74yYg5DaDqIa53IeZUiGopZy4s7gLdSeLZ9Y6DmOXiJtsmRIWrG75F
/h/O3jucy/eN/09EREpkVBIqDSoyi1Mi2ZUIlZnKiKxSERraIVJEqMjee532
3nvv+ZqSFuH7eh/8/vn+jn7H8fn9+zju1/26j+u+r+t8ns9rnFU9TfDxO887
kdAexGq/++eaicDBUnsymLcZjO4deM7S2IvO2b3y592IcO/43HURg2aolU7+
I17eh49KGk8pShNB1s13QfFuM3AGR6dIz/VjofzxzM29BFiccni6J6sZygJV
bE4KDWJju4LNkbsEqN+2/fLj783wZwu9oB/TEPb9vnBGSIwAsTV9D2w5WsBO
Q3eINXQIdworN66pmAa5R6VfKjRb4NCXFwcPig/jXpH3HgyG09D39fHGs94t
sInPufnSp2HcGf1Q+jLjNBjo21n0RbTAmR2pyiHJVdC985pFmw4Z1V7keTx8
2AF7BnwTOfiKIYQ+8tjuJCoKiwoZusdFgsyrtR8nUtMwj/mObV8GFR61anod
EMkH/jMSqXqTaShu3NmrnEaF4s9/un3z8+G+3jPJ3yZFMCAYwo3pVCTmvXmU
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
QNGnUDR7lCcihoQShg7t7537cMTljM5PdIYa92UOFgci2h1X9P7mMoRMXzPl
fu22AGepCxyZ3ATc19XPZOE9gomP+MR9h89BP+fRTYLdU6j9dKS1b98YThre
E2XuOgmE+AYB5tpJrBLY+feX5TiqefnFnRD4d3sO+mZ81mjMwXPXxm500OK7
FDGdx/VHLBjXuGUVLFDhmn33dssL2YWftp9Vn/EKhwbvEywEiTF0MQ7tjU6a
wiNC0iJGWumww/Oi+pMuEsZf6n2r5dwFRawTTcxsNVAWuecHpw6iwLnsFh+a
/kkbehXm11sKhMqXCcSHbRh8kXPpiSQZ9poKfN4r0QSdAfz9xjoUTCUJyBha
tuKxt0XMAe25sLNWzMv0ARl/2t8vLUroQqdQAdZ59jDYv9O82kuHjIffic+3
xHUj//aNz88WP4EMCsO6EgcSJgk9svY+249trplKaQrOoHTQ5ISnCBEXrZ3t
A0hDmHXj4HebIHMQOsbtJlk/jW+I1Vmh5BFsVL4VcFrnHCTzfxN4GzCF37Mz
xKXcx9CBr/FUGZwE8oH53j+vJ7HW/nrRuuhxzGn9e+2Z+7/H83/xc+9N1p2m
tfPH5v3HLTKzC4lVJgYCphH/vP7USEdq6TwViO0Xx2u4cwrTBF/OGWh9+uf1
xOmPGWK06zeeExFNuZdTmBcxz9Wk/vmf19fRb3F7bjCKF45u5NyqOo2evHrL
m0/mAk/m575PfUS8v9VKUbG/G6JZbgVzf2sGY566wpfXSlGF4alH0TcK/F7P
/GjH0Ro4kD9a6E2g4Ff+t3TR5Q34pODpUBF9Nhinu49mBZFxP91t+n7oQuGI
8BjepBD4+yD3o9szEp5KuOki/b0P14s9jzh09DH8eTa254gwEX/O3fU1/z6E
bKY7DGyeOoCgdHC9aRJtPOmRd1uzdRQ/1nExzuWbgP7SuqP5V2jjybsz6lyZ
Y5jIkG6gdUgHbu3mGLHUm8SKNTnTayfG8XmGWtz8vf/9PEBraqDFy/2j2GNR
uLXeYhq75OyDtubmgf6Znv0vgok4lflZXpe3B8Yqrb9KiLQCR4364iXLMrzK
wuca10wBVmOCtklZLQxf2NyZNENBaW5jvxa3BrxRkJLEcDcLGLhKfnx7TMYg
hZHA4+FdeHbqnWAIVwh4nNQPqDlDQu3AIFrQ6UdrvSev2MIegbdA2BbzbgJe
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
6rvDRpBN6hKVsVsTRlf54irPPbrCK36x+U40TSH5nfr8osQYpppG+XRKA6Su
csb3K9zSZIX/67v6Fyf9ynPPsJ4CyWenn4yEj2EO48SWwkPR8PGBYdaes10Q
VTnNtek1GTk8737wFI2FNYaih1MlOtDGQvVQyi8yZqTqNQRcigX1lCeXxb0p
eMiL89z8umY01AuN0GwshnnqpRNvjIfRjfH4vLseAQaPnTLsvVMO0c8ezv4J
b8NaukNqHyfI8FqKvuKhVSl8y0y6aTY9jSSSS5048xD0CHyprH7WCvR39v7q
EqVincvYrrDsZyhVFDDEVFoHejc5ih/ykpHfuII1WrMHM4wGY5b8k2E9lU8L
ech4QrGno9G5B+9djeO6UR0N9k1t2uO0934j/YfOzOVuFJRZGx7mFAifazr+
ejuR0fvhBj97um7M3zC06XagH3AKxMNRDTJyvUhdCKDp3gE3NVmW3Q9g/U3F
2MR9ZPy6P+PF+ws9OHSYfa24mjvcy8pzGr9NQh6jpcPNsv1oJ/ZDcRvXTRAc
Go/9c4iEnG7PevI1BvDV16BTPLbWcHj4qp2XLBEHtjR6H2oewl5O07073Yzh
D8vb9PSAaRTzTBnNlB1FLZuG1+Vb1SFosCGAPW0KVaQuStr9t19KIVN93EMR
EgdMijbbTmGz2Icl+4QxNA9f7Le49r+f8yyl/9vnsCkZ+bizzVjlu7FcpNBw
JjAS8h3CRZhp7bNRgLVi87pu/MrXGSkm4QOkmug74QpklMrjizz0pxvdksTL
tb89BM8/L5jXTZDQInPhe9G9XrSNLGMgrL8LpbnRJyNMSSg3nbq9wL8fSecK
/PLMHWCHQu++5W1E3NPYdOjdmmE8N3NBNUbZFF6d217xjRaXo1rWE/OrR7HX
nU9ywFUVRK5khAz6T6Fl8SDzpvtjSNwyd3Nc6wTsjbwoTWWZwlALTSoH/ziy
vbtxwqTw3/MO/+ITzstut5+R0S52mjvlYRe+YpI1f2r/CdZtdHl7mzbOVBmX
BrZYd2P109uOfcdeQGFrxQ2TABJNP4R3Pq7uQ7HHpZPanbdg5+kyGQYNEspH
v3u7eaIfuc9u9lYNdgSXVX27R2ZF3+4ZXdG3zyP2XBpYJOA7qxMOSoeHccvl
Cn+Do2bw48WK7t1Vt6J7fWVXdK/qAW6pxZwpPLLuaRvdmTF0iGTUf7esDKkt
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
    "]],
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  ImageSize->{1375., Automatic},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->{{0, 5}, {-1.1, -0.9}, {-6.124448662435572, 1335.0088059191712`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  ViewPoint->{0.34591108367822054`, -3.365847372130989, -0.03764292373765583},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.64641933874264*^9, 3.646419358011742*^9}, {
  3.6464194163620796`*^9, 3.6464194403484516`*^9}, {3.6464198691009746`*^9, 
  3.6464198939413953`*^9}, {3.646419927488314*^9, 3.646419941872137*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", "=", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      SuperscriptBox["q", "4"], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["q", "3"], " ", "v"}], "+", 
      RowBox[{"15", " ", 
       SuperscriptBox["q", "2"], " ", 
       SuperscriptBox["v", "2"]}], "+", 
      RowBox[{"16", " ", "q", " ", 
       SuperscriptBox["v", "3"]}], "+", 
      RowBox[{"4", " ", 
       SuperscriptBox["q", "2"], " ", 
       SuperscriptBox["v", "3"]}], "+", 
      RowBox[{"15", " ", "q", " ", 
       SuperscriptBox["v", "4"]}], "+", 
      RowBox[{"6", " ", "q", " ", 
       SuperscriptBox["v", "5"]}], "+", 
      RowBox[{"q", " ", 
       SuperscriptBox["v", "6"]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"q", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6464187403964167`*^9, 3.6464187739903383`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
CP8DlXMixA==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  ImageSize->{487., Automatic},
  Method->{},
  PlotRange->{{-10, 10}, {-0.9999980414520333, 10855.42213654644}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.6464187674209623`*^9, 3.64641877455037*^9}}]
}, Open  ]]
},
WindowSize->{1904, 945},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 133, 3, 31, "Input"],
Cell[715, 27, 2287, 52, 128, "Output"]
}, Open  ]],
Cell[3017, 82, 770, 21, 31, "Input"],
Cell[3790, 105, 8037, 185, 612, "Input"],
Cell[11830, 292, 6475, 164, 612, "Input"],
Cell[18308, 458, 7413, 182, 632, "Input"],
Cell[25724, 642, 1262, 30, 132, "Input"],
Cell[CellGroupData[{
Cell[27011, 676, 153, 3, 31, "Input"],
Cell[27167, 681, 2160, 51, 390, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29364, 737, 331, 8, 31, "Input"],
Cell[CellGroupData[{
Cell[29720, 749, 2752, 65, 197, "Print"],
Cell[32475, 816, 2752, 65, 197, "Print"],
Cell[35230, 883, 3934, 90, 226, "Print"],
Cell[39167, 975, 2769, 66, 197, "Print"],
Cell[41939, 1043, 2718, 64, 197, "Print"],
Cell[44660, 1109, 3907, 89, 226, "Print"],
Cell[48570, 1200, 5239, 121, 195, "Print"]
}, Open  ]],
Cell[53824, 1324, 4022, 133, 52, "Output"]
}, Open  ]],
Cell[57861, 1460, 5100, 148, 72, InheritFromParent],
Cell[62964, 1610, 54065, 1134, 1154, "Output"],
Cell[117032, 2746, 2012, 58, 33, InheritFromParent],
Cell[119047, 2806, 2035, 48, 38, "Output"],
Cell[CellGroupData[{
Cell[121107, 2858, 526, 13, 31, "Input"],
Cell[CellGroupData[{
Cell[121658, 2875, 20459, 431, 115, "Print"],
Cell[142120, 3308, 17549, 383, 115, "Print"],
Cell[159672, 3693, 15216, 346, 118, "Print"],
Cell[174891, 4041, 15094, 332, 115, "Print"],
Cell[189988, 4375, 13295, 297, 115, "Print"],
Cell[203286, 4674, 12601, 289, 118, "Print"],
Cell[215890, 4965, 10892, 252, 118, "Print"],
Cell[226785, 5219, 8821, 205, 190, "Print"],
Cell[235609, 5426, 8092, 184, 118, "Print"]
}, Open  ]],
Cell[243716, 5613, 52376, 1494, 363, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296129, 7112, 180, 4, 31, "Input"],
Cell[296312, 7118, 2717, 67, 33, "Print"],
Cell[299032, 7187, 194, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299263, 7197, 372, 10, 31, "Input"],
Cell[299638, 7209, 73, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299748, 7215, 136, 2, 31, "Input"],
Cell[299887, 7219, 2626, 58, 329, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302550, 7282, 231, 6, 31, "Input"],
Cell[302784, 7290, 312, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[303133, 7305, 510, 12, 31, "Input"],
Cell[303646, 7319, 728, 21, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304411, 7345, 606, 15, 31, "Input"],
Cell[305020, 7362, 1271, 38, 31, "Output"]
}, Open  ]],
Cell[306306, 7403, 1355, 40, 31, "Input"],
Cell[CellGroupData[{
Cell[307686, 7447, 522, 13, 31, "Input"],
Cell[308211, 7462, 3173, 75, 206, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[311421, 7542, 562, 14, 31, "Input"],
Cell[311986, 7558, 1069, 33, 31, "Output"]
}, Open  ]],
Cell[313070, 7594, 1208, 36, 31, "Input"],
Cell[314281, 7632, 560, 14, 31, "Input"],
Cell[CellGroupData[{
Cell[314866, 7650, 168, 4, 31, "Input"],
Cell[315037, 7656, 94, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315168, 7662, 55329, 1500, 473, "Input"],
Cell[370500, 9164, 124, 2, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[370661, 9171, 149, 3, 31, "Input"],
Cell[370813, 9176, 472, 10, 21, "Message"],
Cell[371288, 9188, 95, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[371420, 9195, 707, 20, 33, "Input"],
Cell[372130, 9217, 706, 20, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[372873, 9242, 936, 27, 33, "Input"],
Cell[373812, 9271, 122, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[373971, 9278, 168, 4, 31, "Input"],
Cell[374142, 9284, 74, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[374253, 9290, 527, 13, 31, "Input"],
Cell[374783, 9305, 229390, 3777, 605, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[604210, 13087, 992, 29, 33, "Input"],
Cell[605205, 13118, 13632, 231, 325, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
